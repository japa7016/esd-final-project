
ESD_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf70  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002070  0800d030  0800d030  0000e030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0a0  0800f0a0  000111ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800f0a0  0800f0a0  000111ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f0a0  0800f0a0  000111ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0a0  0800f0a0  000100a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f0a4  0800f0a4  000100a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800f0a8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  200001ec  0800f294  000111ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  0800f294  000118bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000111ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df49  00000000  00000000  00011214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3e  00000000  00000000  0001f15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00021ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba5  00000000  00000000  00022ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6a4  00000000  00000000  0002366d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132e1  00000000  00000000  00040d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab2f1  00000000  00000000  00053ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff2e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c4c  00000000  00000000  000ff328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00103f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001ec 	.word	0x200001ec
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d014 	.word	0x0800d014

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001f0 	.word	0x200001f0
 8000100:	0800d014 	.word	0x0800d014

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fee7 	bl	800220c <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fe27 	bl	800209c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fed9 	bl	800220c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fecf 	bl	800220c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fe51 	bl	8002124 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fe47 	bl	8002124 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fbdb 	bl	8000c68 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb5b 	bl	8000b78 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fbcd 	bl	8000c68 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fbc3 	bl	8000c68 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb69 	bl	8000bc8 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fb5f 	bl	8000bc8 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_f2uiz>:
 8000518:	219e      	movs	r1, #158	@ 0x9e
 800051a:	b510      	push	{r4, lr}
 800051c:	05c9      	lsls	r1, r1, #23
 800051e:	1c04      	adds	r4, r0, #0
 8000520:	f7ff fff0 	bl	8000504 <__aeabi_fcmpge>
 8000524:	2800      	cmp	r0, #0
 8000526:	d103      	bne.n	8000530 <__aeabi_f2uiz+0x18>
 8000528:	1c20      	adds	r0, r4, #0
 800052a:	f000 fecd 	bl	80012c8 <__aeabi_f2iz>
 800052e:	bd10      	pop	{r4, pc}
 8000530:	219e      	movs	r1, #158	@ 0x9e
 8000532:	1c20      	adds	r0, r4, #0
 8000534:	05c9      	lsls	r1, r1, #23
 8000536:	f000 fd23 	bl	8000f80 <__aeabi_fsub>
 800053a:	f000 fec5 	bl	80012c8 <__aeabi_f2iz>
 800053e:	2380      	movs	r3, #128	@ 0x80
 8000540:	061b      	lsls	r3, r3, #24
 8000542:	469c      	mov	ip, r3
 8000544:	4460      	add	r0, ip
 8000546:	e7f2      	b.n	800052e <__aeabi_f2uiz+0x16>

08000548 <__aeabi_d2uiz>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	2200      	movs	r2, #0
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <__aeabi_d2uiz+0x38>)
 800054e:	0004      	movs	r4, r0
 8000550:	000d      	movs	r5, r1
 8000552:	f7ff ff9d 	bl	8000490 <__aeabi_dcmpge>
 8000556:	2800      	cmp	r0, #0
 8000558:	d104      	bne.n	8000564 <__aeabi_d2uiz+0x1c>
 800055a:	0020      	movs	r0, r4
 800055c:	0029      	movs	r1, r5
 800055e:	f002 fd4d 	bl	8002ffc <__aeabi_d2iz>
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <__aeabi_d2uiz+0x38>)
 8000566:	2200      	movs	r2, #0
 8000568:	0020      	movs	r0, r4
 800056a:	0029      	movs	r1, r5
 800056c:	f002 f988 	bl	8002880 <__aeabi_dsub>
 8000570:	f002 fd44 	bl	8002ffc <__aeabi_d2iz>
 8000574:	2380      	movs	r3, #128	@ 0x80
 8000576:	061b      	lsls	r3, r3, #24
 8000578:	469c      	mov	ip, r3
 800057a:	4460      	add	r0, ip
 800057c:	e7f1      	b.n	8000562 <__aeabi_d2uiz+0x1a>
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	41e00000 	.word	0x41e00000

08000584 <__aeabi_d2lz>:
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0004      	movs	r4, r0
 800058c:	000d      	movs	r5, r1
 800058e:	f7ff ff61 	bl	8000454 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x24>
 8000596:	0020      	movs	r0, r4
 8000598:	0029      	movs	r1, r5
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	@ 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e9      	adds	r1, r5, r3
 80005ae:	0020      	movs	r0, r4
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x1e>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fe93 	bl	80022f0 <__aeabi_dmul>
 80005ca:	f7ff ffbd 	bl	8000548 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fd7e 	bl	80030d0 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	@ (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fe8a 	bl	80022f0 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f002 f94c 	bl	8002880 <__aeabi_dsub>
 80005e8:	f7ff ffae 	bl	8000548 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 fd39 	bl	8003074 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fe73 	bl	80022f0 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 fd5e 	bl	80030d0 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fec2 	bl	80013a0 <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__aeabi_fadd>:
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	46ce      	mov	lr, r9
 8000628:	4647      	mov	r7, r8
 800062a:	0243      	lsls	r3, r0, #9
 800062c:	0a5a      	lsrs	r2, r3, #9
 800062e:	024e      	lsls	r6, r1, #9
 8000630:	0045      	lsls	r5, r0, #1
 8000632:	0fc4      	lsrs	r4, r0, #31
 8000634:	0048      	lsls	r0, r1, #1
 8000636:	4691      	mov	r9, r2
 8000638:	0e2d      	lsrs	r5, r5, #24
 800063a:	0a72      	lsrs	r2, r6, #9
 800063c:	0e00      	lsrs	r0, r0, #24
 800063e:	4694      	mov	ip, r2
 8000640:	b580      	push	{r7, lr}
 8000642:	099b      	lsrs	r3, r3, #6
 8000644:	0fc9      	lsrs	r1, r1, #31
 8000646:	09b6      	lsrs	r6, r6, #6
 8000648:	1a2a      	subs	r2, r5, r0
 800064a:	428c      	cmp	r4, r1
 800064c:	d021      	beq.n	8000692 <__aeabi_fadd+0x6e>
 800064e:	2a00      	cmp	r2, #0
 8000650:	dd0d      	ble.n	800066e <__aeabi_fadd+0x4a>
 8000652:	2800      	cmp	r0, #0
 8000654:	d12d      	bne.n	80006b2 <__aeabi_fadd+0x8e>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d100      	bne.n	800065c <__aeabi_fadd+0x38>
 800065a:	e08d      	b.n	8000778 <__aeabi_fadd+0x154>
 800065c:	1e51      	subs	r1, r2, #1
 800065e:	2a01      	cmp	r2, #1
 8000660:	d100      	bne.n	8000664 <__aeabi_fadd+0x40>
 8000662:	e11d      	b.n	80008a0 <__aeabi_fadd+0x27c>
 8000664:	2aff      	cmp	r2, #255	@ 0xff
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x46>
 8000668:	e0ab      	b.n	80007c2 <__aeabi_fadd+0x19e>
 800066a:	000a      	movs	r2, r1
 800066c:	e027      	b.n	80006be <__aeabi_fadd+0x9a>
 800066e:	2a00      	cmp	r2, #0
 8000670:	d04d      	beq.n	800070e <__aeabi_fadd+0xea>
 8000672:	1b42      	subs	r2, r0, r5
 8000674:	2d00      	cmp	r5, #0
 8000676:	d000      	beq.n	800067a <__aeabi_fadd+0x56>
 8000678:	e0cc      	b.n	8000814 <__aeabi_fadd+0x1f0>
 800067a:	2b00      	cmp	r3, #0
 800067c:	d100      	bne.n	8000680 <__aeabi_fadd+0x5c>
 800067e:	e079      	b.n	8000774 <__aeabi_fadd+0x150>
 8000680:	1e54      	subs	r4, r2, #1
 8000682:	2a01      	cmp	r2, #1
 8000684:	d100      	bne.n	8000688 <__aeabi_fadd+0x64>
 8000686:	e128      	b.n	80008da <__aeabi_fadd+0x2b6>
 8000688:	2aff      	cmp	r2, #255	@ 0xff
 800068a:	d100      	bne.n	800068e <__aeabi_fadd+0x6a>
 800068c:	e097      	b.n	80007be <__aeabi_fadd+0x19a>
 800068e:	0022      	movs	r2, r4
 8000690:	e0c5      	b.n	800081e <__aeabi_fadd+0x1fa>
 8000692:	2a00      	cmp	r2, #0
 8000694:	dc00      	bgt.n	8000698 <__aeabi_fadd+0x74>
 8000696:	e096      	b.n	80007c6 <__aeabi_fadd+0x1a2>
 8000698:	2800      	cmp	r0, #0
 800069a:	d04f      	beq.n	800073c <__aeabi_fadd+0x118>
 800069c:	2dff      	cmp	r5, #255	@ 0xff
 800069e:	d100      	bne.n	80006a2 <__aeabi_fadd+0x7e>
 80006a0:	e08f      	b.n	80007c2 <__aeabi_fadd+0x19e>
 80006a2:	2180      	movs	r1, #128	@ 0x80
 80006a4:	04c9      	lsls	r1, r1, #19
 80006a6:	430e      	orrs	r6, r1
 80006a8:	2a1b      	cmp	r2, #27
 80006aa:	dd51      	ble.n	8000750 <__aeabi_fadd+0x12c>
 80006ac:	002a      	movs	r2, r5
 80006ae:	3301      	adds	r3, #1
 80006b0:	e018      	b.n	80006e4 <__aeabi_fadd+0xc0>
 80006b2:	2dff      	cmp	r5, #255	@ 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0x94>
 80006b6:	e084      	b.n	80007c2 <__aeabi_fadd+0x19e>
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	04c9      	lsls	r1, r1, #19
 80006bc:	430e      	orrs	r6, r1
 80006be:	2101      	movs	r1, #1
 80006c0:	2a1b      	cmp	r2, #27
 80006c2:	dc08      	bgt.n	80006d6 <__aeabi_fadd+0xb2>
 80006c4:	0031      	movs	r1, r6
 80006c6:	2020      	movs	r0, #32
 80006c8:	40d1      	lsrs	r1, r2
 80006ca:	1a82      	subs	r2, r0, r2
 80006cc:	4096      	lsls	r6, r2
 80006ce:	0032      	movs	r2, r6
 80006d0:	1e50      	subs	r0, r2, #1
 80006d2:	4182      	sbcs	r2, r0
 80006d4:	4311      	orrs	r1, r2
 80006d6:	1a5b      	subs	r3, r3, r1
 80006d8:	015a      	lsls	r2, r3, #5
 80006da:	d459      	bmi.n	8000790 <__aeabi_fadd+0x16c>
 80006dc:	2107      	movs	r1, #7
 80006de:	002a      	movs	r2, r5
 80006e0:	4019      	ands	r1, r3
 80006e2:	d049      	beq.n	8000778 <__aeabi_fadd+0x154>
 80006e4:	210f      	movs	r1, #15
 80006e6:	4019      	ands	r1, r3
 80006e8:	2904      	cmp	r1, #4
 80006ea:	d000      	beq.n	80006ee <__aeabi_fadd+0xca>
 80006ec:	3304      	adds	r3, #4
 80006ee:	0159      	lsls	r1, r3, #5
 80006f0:	d542      	bpl.n	8000778 <__aeabi_fadd+0x154>
 80006f2:	1c50      	adds	r0, r2, #1
 80006f4:	2afe      	cmp	r2, #254	@ 0xfe
 80006f6:	d03a      	beq.n	800076e <__aeabi_fadd+0x14a>
 80006f8:	019b      	lsls	r3, r3, #6
 80006fa:	b2c0      	uxtb	r0, r0
 80006fc:	0a5b      	lsrs	r3, r3, #9
 80006fe:	05c0      	lsls	r0, r0, #23
 8000700:	4318      	orrs	r0, r3
 8000702:	07e4      	lsls	r4, r4, #31
 8000704:	4320      	orrs	r0, r4
 8000706:	bcc0      	pop	{r6, r7}
 8000708:	46b9      	mov	r9, r7
 800070a:	46b0      	mov	r8, r6
 800070c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800070e:	20fe      	movs	r0, #254	@ 0xfe
 8000710:	4680      	mov	r8, r0
 8000712:	1c6f      	adds	r7, r5, #1
 8000714:	0038      	movs	r0, r7
 8000716:	4647      	mov	r7, r8
 8000718:	4207      	tst	r7, r0
 800071a:	d000      	beq.n	800071e <__aeabi_fadd+0xfa>
 800071c:	e08e      	b.n	800083c <__aeabi_fadd+0x218>
 800071e:	2d00      	cmp	r5, #0
 8000720:	d000      	beq.n	8000724 <__aeabi_fadd+0x100>
 8000722:	e0b4      	b.n	800088e <__aeabi_fadd+0x26a>
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x106>
 8000728:	e0db      	b.n	80008e2 <__aeabi_fadd+0x2be>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d06c      	beq.n	8000808 <__aeabi_fadd+0x1e4>
 800072e:	1b98      	subs	r0, r3, r6
 8000730:	0145      	lsls	r5, r0, #5
 8000732:	d400      	bmi.n	8000736 <__aeabi_fadd+0x112>
 8000734:	e0f7      	b.n	8000926 <__aeabi_fadd+0x302>
 8000736:	000c      	movs	r4, r1
 8000738:	1af3      	subs	r3, r6, r3
 800073a:	e03d      	b.n	80007b8 <__aeabi_fadd+0x194>
 800073c:	2e00      	cmp	r6, #0
 800073e:	d01b      	beq.n	8000778 <__aeabi_fadd+0x154>
 8000740:	1e51      	subs	r1, r2, #1
 8000742:	2a01      	cmp	r2, #1
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x124>
 8000746:	e082      	b.n	800084e <__aeabi_fadd+0x22a>
 8000748:	2aff      	cmp	r2, #255	@ 0xff
 800074a:	d03a      	beq.n	80007c2 <__aeabi_fadd+0x19e>
 800074c:	000a      	movs	r2, r1
 800074e:	e7ab      	b.n	80006a8 <__aeabi_fadd+0x84>
 8000750:	0031      	movs	r1, r6
 8000752:	2020      	movs	r0, #32
 8000754:	40d1      	lsrs	r1, r2
 8000756:	1a82      	subs	r2, r0, r2
 8000758:	4096      	lsls	r6, r2
 800075a:	0032      	movs	r2, r6
 800075c:	1e50      	subs	r0, r2, #1
 800075e:	4182      	sbcs	r2, r0
 8000760:	430a      	orrs	r2, r1
 8000762:	189b      	adds	r3, r3, r2
 8000764:	015a      	lsls	r2, r3, #5
 8000766:	d5b9      	bpl.n	80006dc <__aeabi_fadd+0xb8>
 8000768:	1c6a      	adds	r2, r5, #1
 800076a:	2dfe      	cmp	r5, #254	@ 0xfe
 800076c:	d175      	bne.n	800085a <__aeabi_fadd+0x236>
 800076e:	20ff      	movs	r0, #255	@ 0xff
 8000770:	2300      	movs	r3, #0
 8000772:	e7c4      	b.n	80006fe <__aeabi_fadd+0xda>
 8000774:	000c      	movs	r4, r1
 8000776:	0033      	movs	r3, r6
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	2aff      	cmp	r2, #255	@ 0xff
 800077c:	d146      	bne.n	800080c <__aeabi_fadd+0x1e8>
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f5      	beq.n	800076e <__aeabi_fadd+0x14a>
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	03d2      	lsls	r2, r2, #15
 8000786:	4313      	orrs	r3, r2
 8000788:	025b      	lsls	r3, r3, #9
 800078a:	20ff      	movs	r0, #255	@ 0xff
 800078c:	0a5b      	lsrs	r3, r3, #9
 800078e:	e7b6      	b.n	80006fe <__aeabi_fadd+0xda>
 8000790:	019f      	lsls	r7, r3, #6
 8000792:	09bf      	lsrs	r7, r7, #6
 8000794:	0038      	movs	r0, r7
 8000796:	f002 fd8b 	bl	80032b0 <__clzsi2>
 800079a:	3805      	subs	r0, #5
 800079c:	4087      	lsls	r7, r0
 800079e:	4285      	cmp	r5, r0
 80007a0:	dc24      	bgt.n	80007ec <__aeabi_fadd+0x1c8>
 80007a2:	003b      	movs	r3, r7
 80007a4:	2120      	movs	r1, #32
 80007a6:	1b42      	subs	r2, r0, r5
 80007a8:	3201      	adds	r2, #1
 80007aa:	40d3      	lsrs	r3, r2
 80007ac:	1a8a      	subs	r2, r1, r2
 80007ae:	4097      	lsls	r7, r2
 80007b0:	1e7a      	subs	r2, r7, #1
 80007b2:	4197      	sbcs	r7, r2
 80007b4:	2200      	movs	r2, #0
 80007b6:	433b      	orrs	r3, r7
 80007b8:	0759      	lsls	r1, r3, #29
 80007ba:	d193      	bne.n	80006e4 <__aeabi_fadd+0xc0>
 80007bc:	e797      	b.n	80006ee <__aeabi_fadd+0xca>
 80007be:	000c      	movs	r4, r1
 80007c0:	0033      	movs	r3, r6
 80007c2:	08db      	lsrs	r3, r3, #3
 80007c4:	e7db      	b.n	800077e <__aeabi_fadd+0x15a>
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d014      	beq.n	80007f4 <__aeabi_fadd+0x1d0>
 80007ca:	1b42      	subs	r2, r0, r5
 80007cc:	2d00      	cmp	r5, #0
 80007ce:	d14b      	bne.n	8000868 <__aeabi_fadd+0x244>
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0d0      	beq.n	8000776 <__aeabi_fadd+0x152>
 80007d4:	1e51      	subs	r1, r2, #1
 80007d6:	2a01      	cmp	r2, #1
 80007d8:	d100      	bne.n	80007dc <__aeabi_fadd+0x1b8>
 80007da:	e09e      	b.n	800091a <__aeabi_fadd+0x2f6>
 80007dc:	2aff      	cmp	r2, #255	@ 0xff
 80007de:	d0ef      	beq.n	80007c0 <__aeabi_fadd+0x19c>
 80007e0:	000a      	movs	r2, r1
 80007e2:	2a1b      	cmp	r2, #27
 80007e4:	dd5f      	ble.n	80008a6 <__aeabi_fadd+0x282>
 80007e6:	0002      	movs	r2, r0
 80007e8:	1c73      	adds	r3, r6, #1
 80007ea:	e77b      	b.n	80006e4 <__aeabi_fadd+0xc0>
 80007ec:	4b50      	ldr	r3, [pc, #320]	@ (8000930 <__aeabi_fadd+0x30c>)
 80007ee:	1a2a      	subs	r2, r5, r0
 80007f0:	403b      	ands	r3, r7
 80007f2:	e7e1      	b.n	80007b8 <__aeabi_fadd+0x194>
 80007f4:	21fe      	movs	r1, #254	@ 0xfe
 80007f6:	1c6a      	adds	r2, r5, #1
 80007f8:	4211      	tst	r1, r2
 80007fa:	d13b      	bne.n	8000874 <__aeabi_fadd+0x250>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d15d      	bne.n	80008bc <__aeabi_fadd+0x298>
 8000800:	2b00      	cmp	r3, #0
 8000802:	d07f      	beq.n	8000904 <__aeabi_fadd+0x2e0>
 8000804:	2e00      	cmp	r6, #0
 8000806:	d17f      	bne.n	8000908 <__aeabi_fadd+0x2e4>
 8000808:	2200      	movs	r2, #0
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	025b      	lsls	r3, r3, #9
 800080e:	0a5b      	lsrs	r3, r3, #9
 8000810:	b2d0      	uxtb	r0, r2
 8000812:	e774      	b.n	80006fe <__aeabi_fadd+0xda>
 8000814:	28ff      	cmp	r0, #255	@ 0xff
 8000816:	d0d2      	beq.n	80007be <__aeabi_fadd+0x19a>
 8000818:	2480      	movs	r4, #128	@ 0x80
 800081a:	04e4      	lsls	r4, r4, #19
 800081c:	4323      	orrs	r3, r4
 800081e:	2401      	movs	r4, #1
 8000820:	2a1b      	cmp	r2, #27
 8000822:	dc07      	bgt.n	8000834 <__aeabi_fadd+0x210>
 8000824:	001c      	movs	r4, r3
 8000826:	2520      	movs	r5, #32
 8000828:	40d4      	lsrs	r4, r2
 800082a:	1aaa      	subs	r2, r5, r2
 800082c:	4093      	lsls	r3, r2
 800082e:	1e5a      	subs	r2, r3, #1
 8000830:	4193      	sbcs	r3, r2
 8000832:	431c      	orrs	r4, r3
 8000834:	1b33      	subs	r3, r6, r4
 8000836:	0005      	movs	r5, r0
 8000838:	000c      	movs	r4, r1
 800083a:	e74d      	b.n	80006d8 <__aeabi_fadd+0xb4>
 800083c:	1b9f      	subs	r7, r3, r6
 800083e:	017a      	lsls	r2, r7, #5
 8000840:	d422      	bmi.n	8000888 <__aeabi_fadd+0x264>
 8000842:	2f00      	cmp	r7, #0
 8000844:	d1a6      	bne.n	8000794 <__aeabi_fadd+0x170>
 8000846:	2400      	movs	r4, #0
 8000848:	2000      	movs	r0, #0
 800084a:	2300      	movs	r3, #0
 800084c:	e757      	b.n	80006fe <__aeabi_fadd+0xda>
 800084e:	199b      	adds	r3, r3, r6
 8000850:	2501      	movs	r5, #1
 8000852:	3201      	adds	r2, #1
 8000854:	0159      	lsls	r1, r3, #5
 8000856:	d400      	bmi.n	800085a <__aeabi_fadd+0x236>
 8000858:	e740      	b.n	80006dc <__aeabi_fadd+0xb8>
 800085a:	2101      	movs	r1, #1
 800085c:	4835      	ldr	r0, [pc, #212]	@ (8000934 <__aeabi_fadd+0x310>)
 800085e:	4019      	ands	r1, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	4003      	ands	r3, r0
 8000864:	430b      	orrs	r3, r1
 8000866:	e7a7      	b.n	80007b8 <__aeabi_fadd+0x194>
 8000868:	28ff      	cmp	r0, #255	@ 0xff
 800086a:	d0a9      	beq.n	80007c0 <__aeabi_fadd+0x19c>
 800086c:	2180      	movs	r1, #128	@ 0x80
 800086e:	04c9      	lsls	r1, r1, #19
 8000870:	430b      	orrs	r3, r1
 8000872:	e7b6      	b.n	80007e2 <__aeabi_fadd+0x1be>
 8000874:	2aff      	cmp	r2, #255	@ 0xff
 8000876:	d100      	bne.n	800087a <__aeabi_fadd+0x256>
 8000878:	e779      	b.n	800076e <__aeabi_fadd+0x14a>
 800087a:	199b      	adds	r3, r3, r6
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	0759      	lsls	r1, r3, #29
 8000880:	d000      	beq.n	8000884 <__aeabi_fadd+0x260>
 8000882:	e72f      	b.n	80006e4 <__aeabi_fadd+0xc0>
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	e7c1      	b.n	800080c <__aeabi_fadd+0x1e8>
 8000888:	000c      	movs	r4, r1
 800088a:	1af7      	subs	r7, r6, r3
 800088c:	e782      	b.n	8000794 <__aeabi_fadd+0x170>
 800088e:	2b00      	cmp	r3, #0
 8000890:	d12c      	bne.n	80008ec <__aeabi_fadd+0x2c8>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d193      	bne.n	80007be <__aeabi_fadd+0x19a>
 8000896:	2380      	movs	r3, #128	@ 0x80
 8000898:	2400      	movs	r4, #0
 800089a:	20ff      	movs	r0, #255	@ 0xff
 800089c:	03db      	lsls	r3, r3, #15
 800089e:	e72e      	b.n	80006fe <__aeabi_fadd+0xda>
 80008a0:	2501      	movs	r5, #1
 80008a2:	1b9b      	subs	r3, r3, r6
 80008a4:	e718      	b.n	80006d8 <__aeabi_fadd+0xb4>
 80008a6:	0019      	movs	r1, r3
 80008a8:	2520      	movs	r5, #32
 80008aa:	40d1      	lsrs	r1, r2
 80008ac:	1aaa      	subs	r2, r5, r2
 80008ae:	4093      	lsls	r3, r2
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	4193      	sbcs	r3, r2
 80008b4:	430b      	orrs	r3, r1
 80008b6:	0005      	movs	r5, r0
 80008b8:	199b      	adds	r3, r3, r6
 80008ba:	e753      	b.n	8000764 <__aeabi_fadd+0x140>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x29e>
 80008c0:	e77e      	b.n	80007c0 <__aeabi_fadd+0x19c>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x2a4>
 80008c6:	e77c      	b.n	80007c2 <__aeabi_fadd+0x19e>
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	03d2      	lsls	r2, r2, #15
 80008cc:	4591      	cmp	r9, r2
 80008ce:	d302      	bcc.n	80008d6 <__aeabi_fadd+0x2b2>
 80008d0:	4594      	cmp	ip, r2
 80008d2:	d200      	bcs.n	80008d6 <__aeabi_fadd+0x2b2>
 80008d4:	0033      	movs	r3, r6
 80008d6:	08db      	lsrs	r3, r3, #3
 80008d8:	e753      	b.n	8000782 <__aeabi_fadd+0x15e>
 80008da:	000c      	movs	r4, r1
 80008dc:	1af3      	subs	r3, r6, r3
 80008de:	3501      	adds	r5, #1
 80008e0:	e6fa      	b.n	80006d8 <__aeabi_fadd+0xb4>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0af      	beq.n	8000846 <__aeabi_fadd+0x222>
 80008e6:	000c      	movs	r4, r1
 80008e8:	0033      	movs	r3, r6
 80008ea:	e78d      	b.n	8000808 <__aeabi_fadd+0x1e4>
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2ce>
 80008f0:	e767      	b.n	80007c2 <__aeabi_fadd+0x19e>
 80008f2:	2280      	movs	r2, #128	@ 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4591      	cmp	r9, r2
 80008f8:	d3ed      	bcc.n	80008d6 <__aeabi_fadd+0x2b2>
 80008fa:	4594      	cmp	ip, r2
 80008fc:	d2eb      	bcs.n	80008d6 <__aeabi_fadd+0x2b2>
 80008fe:	000c      	movs	r4, r1
 8000900:	0033      	movs	r3, r6
 8000902:	e7e8      	b.n	80008d6 <__aeabi_fadd+0x2b2>
 8000904:	0033      	movs	r3, r6
 8000906:	e77f      	b.n	8000808 <__aeabi_fadd+0x1e4>
 8000908:	199b      	adds	r3, r3, r6
 800090a:	2200      	movs	r2, #0
 800090c:	0159      	lsls	r1, r3, #5
 800090e:	d5b9      	bpl.n	8000884 <__aeabi_fadd+0x260>
 8000910:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <__aeabi_fadd+0x30c>)
 8000912:	4013      	ands	r3, r2
 8000914:	08db      	lsrs	r3, r3, #3
 8000916:	2201      	movs	r2, #1
 8000918:	e778      	b.n	800080c <__aeabi_fadd+0x1e8>
 800091a:	199b      	adds	r3, r3, r6
 800091c:	3201      	adds	r2, #1
 800091e:	3501      	adds	r5, #1
 8000920:	0159      	lsls	r1, r3, #5
 8000922:	d49a      	bmi.n	800085a <__aeabi_fadd+0x236>
 8000924:	e6da      	b.n	80006dc <__aeabi_fadd+0xb8>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d08d      	beq.n	8000846 <__aeabi_fadd+0x222>
 800092a:	08db      	lsrs	r3, r3, #3
 800092c:	e76e      	b.n	800080c <__aeabi_fadd+0x1e8>
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	fbffffff 	.word	0xfbffffff
 8000934:	7dffffff 	.word	0x7dffffff

08000938 <__aeabi_fdiv>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	464f      	mov	r7, r9
 800093c:	4646      	mov	r6, r8
 800093e:	46d6      	mov	lr, sl
 8000940:	0244      	lsls	r4, r0, #9
 8000942:	b5c0      	push	{r6, r7, lr}
 8000944:	0047      	lsls	r7, r0, #1
 8000946:	1c0e      	adds	r6, r1, #0
 8000948:	0a64      	lsrs	r4, r4, #9
 800094a:	0e3f      	lsrs	r7, r7, #24
 800094c:	0fc5      	lsrs	r5, r0, #31
 800094e:	2f00      	cmp	r7, #0
 8000950:	d03c      	beq.n	80009cc <__aeabi_fdiv+0x94>
 8000952:	2fff      	cmp	r7, #255	@ 0xff
 8000954:	d042      	beq.n	80009dc <__aeabi_fdiv+0xa4>
 8000956:	2300      	movs	r3, #0
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	4699      	mov	r9, r3
 800095c:	469a      	mov	sl, r3
 800095e:	00e4      	lsls	r4, r4, #3
 8000960:	04d2      	lsls	r2, r2, #19
 8000962:	4314      	orrs	r4, r2
 8000964:	3f7f      	subs	r7, #127	@ 0x7f
 8000966:	0273      	lsls	r3, r6, #9
 8000968:	0a5b      	lsrs	r3, r3, #9
 800096a:	4698      	mov	r8, r3
 800096c:	0073      	lsls	r3, r6, #1
 800096e:	0e1b      	lsrs	r3, r3, #24
 8000970:	0ff6      	lsrs	r6, r6, #31
 8000972:	2b00      	cmp	r3, #0
 8000974:	d01b      	beq.n	80009ae <__aeabi_fdiv+0x76>
 8000976:	2bff      	cmp	r3, #255	@ 0xff
 8000978:	d013      	beq.n	80009a2 <__aeabi_fdiv+0x6a>
 800097a:	4642      	mov	r2, r8
 800097c:	2180      	movs	r1, #128	@ 0x80
 800097e:	00d2      	lsls	r2, r2, #3
 8000980:	04c9      	lsls	r1, r1, #19
 8000982:	4311      	orrs	r1, r2
 8000984:	4688      	mov	r8, r1
 8000986:	2000      	movs	r0, #0
 8000988:	3b7f      	subs	r3, #127	@ 0x7f
 800098a:	0029      	movs	r1, r5
 800098c:	1aff      	subs	r7, r7, r3
 800098e:	464b      	mov	r3, r9
 8000990:	4071      	eors	r1, r6
 8000992:	b2c9      	uxtb	r1, r1
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d900      	bls.n	800099a <__aeabi_fdiv+0x62>
 8000998:	e0b5      	b.n	8000b06 <__aeabi_fdiv+0x1ce>
 800099a:	4a74      	ldr	r2, [pc, #464]	@ (8000b6c <__aeabi_fdiv+0x234>)
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	58d3      	ldr	r3, [r2, r3]
 80009a0:	469f      	mov	pc, r3
 80009a2:	4643      	mov	r3, r8
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d13f      	bne.n	8000a28 <__aeabi_fdiv+0xf0>
 80009a8:	3fff      	subs	r7, #255	@ 0xff
 80009aa:	3302      	adds	r3, #2
 80009ac:	e003      	b.n	80009b6 <__aeabi_fdiv+0x7e>
 80009ae:	4643      	mov	r3, r8
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d12d      	bne.n	8000a10 <__aeabi_fdiv+0xd8>
 80009b4:	2301      	movs	r3, #1
 80009b6:	0029      	movs	r1, r5
 80009b8:	464a      	mov	r2, r9
 80009ba:	4071      	eors	r1, r6
 80009bc:	b2c9      	uxtb	r1, r1
 80009be:	431a      	orrs	r2, r3
 80009c0:	2a0e      	cmp	r2, #14
 80009c2:	d838      	bhi.n	8000a36 <__aeabi_fdiv+0xfe>
 80009c4:	486a      	ldr	r0, [pc, #424]	@ (8000b70 <__aeabi_fdiv+0x238>)
 80009c6:	0092      	lsls	r2, r2, #2
 80009c8:	5882      	ldr	r2, [r0, r2]
 80009ca:	4697      	mov	pc, r2
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	d113      	bne.n	80009f8 <__aeabi_fdiv+0xc0>
 80009d0:	2304      	movs	r3, #4
 80009d2:	4699      	mov	r9, r3
 80009d4:	3b03      	subs	r3, #3
 80009d6:	2700      	movs	r7, #0
 80009d8:	469a      	mov	sl, r3
 80009da:	e7c4      	b.n	8000966 <__aeabi_fdiv+0x2e>
 80009dc:	2c00      	cmp	r4, #0
 80009de:	d105      	bne.n	80009ec <__aeabi_fdiv+0xb4>
 80009e0:	2308      	movs	r3, #8
 80009e2:	4699      	mov	r9, r3
 80009e4:	3b06      	subs	r3, #6
 80009e6:	27ff      	movs	r7, #255	@ 0xff
 80009e8:	469a      	mov	sl, r3
 80009ea:	e7bc      	b.n	8000966 <__aeabi_fdiv+0x2e>
 80009ec:	230c      	movs	r3, #12
 80009ee:	4699      	mov	r9, r3
 80009f0:	3b09      	subs	r3, #9
 80009f2:	27ff      	movs	r7, #255	@ 0xff
 80009f4:	469a      	mov	sl, r3
 80009f6:	e7b6      	b.n	8000966 <__aeabi_fdiv+0x2e>
 80009f8:	0020      	movs	r0, r4
 80009fa:	f002 fc59 	bl	80032b0 <__clzsi2>
 80009fe:	2776      	movs	r7, #118	@ 0x76
 8000a00:	1f43      	subs	r3, r0, #5
 8000a02:	409c      	lsls	r4, r3
 8000a04:	2300      	movs	r3, #0
 8000a06:	427f      	negs	r7, r7
 8000a08:	4699      	mov	r9, r3
 8000a0a:	469a      	mov	sl, r3
 8000a0c:	1a3f      	subs	r7, r7, r0
 8000a0e:	e7aa      	b.n	8000966 <__aeabi_fdiv+0x2e>
 8000a10:	4640      	mov	r0, r8
 8000a12:	f002 fc4d 	bl	80032b0 <__clzsi2>
 8000a16:	4642      	mov	r2, r8
 8000a18:	1f43      	subs	r3, r0, #5
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	2376      	movs	r3, #118	@ 0x76
 8000a1e:	425b      	negs	r3, r3
 8000a20:	1a1b      	subs	r3, r3, r0
 8000a22:	4690      	mov	r8, r2
 8000a24:	2000      	movs	r0, #0
 8000a26:	e7b0      	b.n	800098a <__aeabi_fdiv+0x52>
 8000a28:	2303      	movs	r3, #3
 8000a2a:	464a      	mov	r2, r9
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	4691      	mov	r9, r2
 8000a30:	2003      	movs	r0, #3
 8000a32:	33fc      	adds	r3, #252	@ 0xfc
 8000a34:	e7a9      	b.n	800098a <__aeabi_fdiv+0x52>
 8000a36:	000d      	movs	r5, r1
 8000a38:	20ff      	movs	r0, #255	@ 0xff
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	05c0      	lsls	r0, r0, #23
 8000a3e:	07ed      	lsls	r5, r5, #31
 8000a40:	4310      	orrs	r0, r2
 8000a42:	4328      	orrs	r0, r5
 8000a44:	bce0      	pop	{r5, r6, r7}
 8000a46:	46ba      	mov	sl, r7
 8000a48:	46b1      	mov	r9, r6
 8000a4a:	46a8      	mov	r8, r5
 8000a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4e:	000d      	movs	r5, r1
 8000a50:	2000      	movs	r0, #0
 8000a52:	2200      	movs	r2, #0
 8000a54:	e7f2      	b.n	8000a3c <__aeabi_fdiv+0x104>
 8000a56:	4653      	mov	r3, sl
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d0ed      	beq.n	8000a38 <__aeabi_fdiv+0x100>
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d033      	beq.n	8000ac8 <__aeabi_fdiv+0x190>
 8000a60:	46a0      	mov	r8, r4
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d105      	bne.n	8000a72 <__aeabi_fdiv+0x13a>
 8000a66:	2000      	movs	r0, #0
 8000a68:	2200      	movs	r2, #0
 8000a6a:	e7e7      	b.n	8000a3c <__aeabi_fdiv+0x104>
 8000a6c:	0035      	movs	r5, r6
 8000a6e:	2803      	cmp	r0, #3
 8000a70:	d07a      	beq.n	8000b68 <__aeabi_fdiv+0x230>
 8000a72:	003b      	movs	r3, r7
 8000a74:	337f      	adds	r3, #127	@ 0x7f
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	dd2d      	ble.n	8000ad6 <__aeabi_fdiv+0x19e>
 8000a7a:	4642      	mov	r2, r8
 8000a7c:	0752      	lsls	r2, r2, #29
 8000a7e:	d007      	beq.n	8000a90 <__aeabi_fdiv+0x158>
 8000a80:	220f      	movs	r2, #15
 8000a82:	4641      	mov	r1, r8
 8000a84:	400a      	ands	r2, r1
 8000a86:	2a04      	cmp	r2, #4
 8000a88:	d002      	beq.n	8000a90 <__aeabi_fdiv+0x158>
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	44e0      	add	r8, ip
 8000a90:	4642      	mov	r2, r8
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	d505      	bpl.n	8000aa2 <__aeabi_fdiv+0x16a>
 8000a96:	4642      	mov	r2, r8
 8000a98:	4b36      	ldr	r3, [pc, #216]	@ (8000b74 <__aeabi_fdiv+0x23c>)
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	003b      	movs	r3, r7
 8000a9e:	4690      	mov	r8, r2
 8000aa0:	3380      	adds	r3, #128	@ 0x80
 8000aa2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000aa4:	dcc8      	bgt.n	8000a38 <__aeabi_fdiv+0x100>
 8000aa6:	4642      	mov	r2, r8
 8000aa8:	0192      	lsls	r2, r2, #6
 8000aaa:	0a52      	lsrs	r2, r2, #9
 8000aac:	b2d8      	uxtb	r0, r3
 8000aae:	e7c5      	b.n	8000a3c <__aeabi_fdiv+0x104>
 8000ab0:	2280      	movs	r2, #128	@ 0x80
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	20ff      	movs	r0, #255	@ 0xff
 8000ab6:	03d2      	lsls	r2, r2, #15
 8000ab8:	e7c0      	b.n	8000a3c <__aeabi_fdiv+0x104>
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	03d2      	lsls	r2, r2, #15
 8000abe:	4214      	tst	r4, r2
 8000ac0:	d002      	beq.n	8000ac8 <__aeabi_fdiv+0x190>
 8000ac2:	4643      	mov	r3, r8
 8000ac4:	4213      	tst	r3, r2
 8000ac6:	d049      	beq.n	8000b5c <__aeabi_fdiv+0x224>
 8000ac8:	2280      	movs	r2, #128	@ 0x80
 8000aca:	03d2      	lsls	r2, r2, #15
 8000acc:	4322      	orrs	r2, r4
 8000ace:	0252      	lsls	r2, r2, #9
 8000ad0:	20ff      	movs	r0, #255	@ 0xff
 8000ad2:	0a52      	lsrs	r2, r2, #9
 8000ad4:	e7b2      	b.n	8000a3c <__aeabi_fdiv+0x104>
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	2b1b      	cmp	r3, #27
 8000adc:	dcc3      	bgt.n	8000a66 <__aeabi_fdiv+0x12e>
 8000ade:	4642      	mov	r2, r8
 8000ae0:	40da      	lsrs	r2, r3
 8000ae2:	4643      	mov	r3, r8
 8000ae4:	379e      	adds	r7, #158	@ 0x9e
 8000ae6:	40bb      	lsls	r3, r7
 8000ae8:	1e59      	subs	r1, r3, #1
 8000aea:	418b      	sbcs	r3, r1
 8000aec:	431a      	orrs	r2, r3
 8000aee:	0753      	lsls	r3, r2, #29
 8000af0:	d004      	beq.n	8000afc <__aeabi_fdiv+0x1c4>
 8000af2:	230f      	movs	r3, #15
 8000af4:	4013      	ands	r3, r2
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d000      	beq.n	8000afc <__aeabi_fdiv+0x1c4>
 8000afa:	3204      	adds	r2, #4
 8000afc:	0153      	lsls	r3, r2, #5
 8000afe:	d529      	bpl.n	8000b54 <__aeabi_fdiv+0x21c>
 8000b00:	2001      	movs	r0, #1
 8000b02:	2200      	movs	r2, #0
 8000b04:	e79a      	b.n	8000a3c <__aeabi_fdiv+0x104>
 8000b06:	4642      	mov	r2, r8
 8000b08:	0163      	lsls	r3, r4, #5
 8000b0a:	0155      	lsls	r5, r2, #5
 8000b0c:	42ab      	cmp	r3, r5
 8000b0e:	d215      	bcs.n	8000b3c <__aeabi_fdiv+0x204>
 8000b10:	201b      	movs	r0, #27
 8000b12:	2200      	movs	r2, #0
 8000b14:	3f01      	subs	r7, #1
 8000b16:	2601      	movs	r6, #1
 8000b18:	001c      	movs	r4, r3
 8000b1a:	0052      	lsls	r2, r2, #1
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2c00      	cmp	r4, #0
 8000b20:	db01      	blt.n	8000b26 <__aeabi_fdiv+0x1ee>
 8000b22:	429d      	cmp	r5, r3
 8000b24:	d801      	bhi.n	8000b2a <__aeabi_fdiv+0x1f2>
 8000b26:	1b5b      	subs	r3, r3, r5
 8000b28:	4332      	orrs	r2, r6
 8000b2a:	3801      	subs	r0, #1
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d1f3      	bne.n	8000b18 <__aeabi_fdiv+0x1e0>
 8000b30:	1e58      	subs	r0, r3, #1
 8000b32:	4183      	sbcs	r3, r0
 8000b34:	4313      	orrs	r3, r2
 8000b36:	4698      	mov	r8, r3
 8000b38:	000d      	movs	r5, r1
 8000b3a:	e79a      	b.n	8000a72 <__aeabi_fdiv+0x13a>
 8000b3c:	201a      	movs	r0, #26
 8000b3e:	2201      	movs	r2, #1
 8000b40:	1b5b      	subs	r3, r3, r5
 8000b42:	e7e8      	b.n	8000b16 <__aeabi_fdiv+0x1de>
 8000b44:	3b02      	subs	r3, #2
 8000b46:	425a      	negs	r2, r3
 8000b48:	4153      	adcs	r3, r2
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	0035      	movs	r5, r6
 8000b4e:	2200      	movs	r2, #0
 8000b50:	b2d8      	uxtb	r0, r3
 8000b52:	e773      	b.n	8000a3c <__aeabi_fdiv+0x104>
 8000b54:	0192      	lsls	r2, r2, #6
 8000b56:	2000      	movs	r0, #0
 8000b58:	0a52      	lsrs	r2, r2, #9
 8000b5a:	e76f      	b.n	8000a3c <__aeabi_fdiv+0x104>
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	0252      	lsls	r2, r2, #9
 8000b60:	0035      	movs	r5, r6
 8000b62:	20ff      	movs	r0, #255	@ 0xff
 8000b64:	0a52      	lsrs	r2, r2, #9
 8000b66:	e769      	b.n	8000a3c <__aeabi_fdiv+0x104>
 8000b68:	4644      	mov	r4, r8
 8000b6a:	e7ad      	b.n	8000ac8 <__aeabi_fdiv+0x190>
 8000b6c:	0800d0b8 	.word	0x0800d0b8
 8000b70:	0800d0f8 	.word	0x0800d0f8
 8000b74:	f7ffffff 	.word	0xf7ffffff

08000b78 <__eqsf2>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	0042      	lsls	r2, r0, #1
 8000b7c:	024e      	lsls	r6, r1, #9
 8000b7e:	004c      	lsls	r4, r1, #1
 8000b80:	0245      	lsls	r5, r0, #9
 8000b82:	0a6d      	lsrs	r5, r5, #9
 8000b84:	0e12      	lsrs	r2, r2, #24
 8000b86:	0fc3      	lsrs	r3, r0, #31
 8000b88:	0a76      	lsrs	r6, r6, #9
 8000b8a:	0e24      	lsrs	r4, r4, #24
 8000b8c:	0fc9      	lsrs	r1, r1, #31
 8000b8e:	2aff      	cmp	r2, #255	@ 0xff
 8000b90:	d010      	beq.n	8000bb4 <__eqsf2+0x3c>
 8000b92:	2cff      	cmp	r4, #255	@ 0xff
 8000b94:	d00c      	beq.n	8000bb0 <__eqsf2+0x38>
 8000b96:	2001      	movs	r0, #1
 8000b98:	42a2      	cmp	r2, r4
 8000b9a:	d10a      	bne.n	8000bb2 <__eqsf2+0x3a>
 8000b9c:	42b5      	cmp	r5, r6
 8000b9e:	d108      	bne.n	8000bb2 <__eqsf2+0x3a>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d00f      	beq.n	8000bc4 <__eqsf2+0x4c>
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	d104      	bne.n	8000bb2 <__eqsf2+0x3a>
 8000ba8:	0028      	movs	r0, r5
 8000baa:	1e43      	subs	r3, r0, #1
 8000bac:	4198      	sbcs	r0, r3
 8000bae:	e000      	b.n	8000bb2 <__eqsf2+0x3a>
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	2cff      	cmp	r4, #255	@ 0xff
 8000bb8:	d1fb      	bne.n	8000bb2 <__eqsf2+0x3a>
 8000bba:	4335      	orrs	r5, r6
 8000bbc:	d1f9      	bne.n	8000bb2 <__eqsf2+0x3a>
 8000bbe:	404b      	eors	r3, r1
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	e7f6      	b.n	8000bb2 <__eqsf2+0x3a>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	e7f4      	b.n	8000bb2 <__eqsf2+0x3a>

08000bc8 <__gesf2>:
 8000bc8:	b530      	push	{r4, r5, lr}
 8000bca:	0042      	lsls	r2, r0, #1
 8000bcc:	0244      	lsls	r4, r0, #9
 8000bce:	024d      	lsls	r5, r1, #9
 8000bd0:	0fc3      	lsrs	r3, r0, #31
 8000bd2:	0048      	lsls	r0, r1, #1
 8000bd4:	0a64      	lsrs	r4, r4, #9
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	0a6d      	lsrs	r5, r5, #9
 8000bda:	0e00      	lsrs	r0, r0, #24
 8000bdc:	0fc9      	lsrs	r1, r1, #31
 8000bde:	2aff      	cmp	r2, #255	@ 0xff
 8000be0:	d019      	beq.n	8000c16 <__gesf2+0x4e>
 8000be2:	28ff      	cmp	r0, #255	@ 0xff
 8000be4:	d00b      	beq.n	8000bfe <__gesf2+0x36>
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	d11e      	bne.n	8000c28 <__gesf2+0x60>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d10b      	bne.n	8000c06 <__gesf2+0x3e>
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d027      	beq.n	8000c42 <__gesf2+0x7a>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d134      	bne.n	8000c60 <__gesf2+0x98>
 8000bf6:	2900      	cmp	r1, #0
 8000bf8:	d02f      	beq.n	8000c5a <__gesf2+0x92>
 8000bfa:	0008      	movs	r0, r1
 8000bfc:	bd30      	pop	{r4, r5, pc}
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d128      	bne.n	8000c54 <__gesf2+0x8c>
 8000c02:	2a00      	cmp	r2, #0
 8000c04:	d101      	bne.n	8000c0a <__gesf2+0x42>
 8000c06:	2c00      	cmp	r4, #0
 8000c08:	d0f5      	beq.n	8000bf6 <__gesf2+0x2e>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d107      	bne.n	8000c1e <__gesf2+0x56>
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d023      	beq.n	8000c5a <__gesf2+0x92>
 8000c12:	0018      	movs	r0, r3
 8000c14:	e7f2      	b.n	8000bfc <__gesf2+0x34>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d11c      	bne.n	8000c54 <__gesf2+0x8c>
 8000c1a:	28ff      	cmp	r0, #255	@ 0xff
 8000c1c:	d014      	beq.n	8000c48 <__gesf2+0x80>
 8000c1e:	1e58      	subs	r0, r3, #1
 8000c20:	2302      	movs	r3, #2
 8000c22:	4018      	ands	r0, r3
 8000c24:	3801      	subs	r0, #1
 8000c26:	e7e9      	b.n	8000bfc <__gesf2+0x34>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d0f8      	beq.n	8000c1e <__gesf2+0x56>
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d1f6      	bne.n	8000c1e <__gesf2+0x56>
 8000c30:	4282      	cmp	r2, r0
 8000c32:	dcf4      	bgt.n	8000c1e <__gesf2+0x56>
 8000c34:	dbeb      	blt.n	8000c0e <__gesf2+0x46>
 8000c36:	42ac      	cmp	r4, r5
 8000c38:	d8f1      	bhi.n	8000c1e <__gesf2+0x56>
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	42ac      	cmp	r4, r5
 8000c3e:	d2dd      	bcs.n	8000bfc <__gesf2+0x34>
 8000c40:	e7e5      	b.n	8000c0e <__gesf2+0x46>
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d0da      	beq.n	8000bfc <__gesf2+0x34>
 8000c46:	e7ea      	b.n	8000c1e <__gesf2+0x56>
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	d103      	bne.n	8000c54 <__gesf2+0x8c>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d1e6      	bne.n	8000c1e <__gesf2+0x56>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e7d3      	b.n	8000bfc <__gesf2+0x34>
 8000c54:	2002      	movs	r0, #2
 8000c56:	4240      	negs	r0, r0
 8000c58:	e7d0      	b.n	8000bfc <__gesf2+0x34>
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	4240      	negs	r0, r0
 8000c5e:	e7cd      	b.n	8000bfc <__gesf2+0x34>
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d0e8      	beq.n	8000c36 <__gesf2+0x6e>
 8000c64:	e7db      	b.n	8000c1e <__gesf2+0x56>
 8000c66:	46c0      	nop			@ (mov r8, r8)

08000c68 <__lesf2>:
 8000c68:	b530      	push	{r4, r5, lr}
 8000c6a:	0042      	lsls	r2, r0, #1
 8000c6c:	0244      	lsls	r4, r0, #9
 8000c6e:	024d      	lsls	r5, r1, #9
 8000c70:	0fc3      	lsrs	r3, r0, #31
 8000c72:	0048      	lsls	r0, r1, #1
 8000c74:	0a64      	lsrs	r4, r4, #9
 8000c76:	0e12      	lsrs	r2, r2, #24
 8000c78:	0a6d      	lsrs	r5, r5, #9
 8000c7a:	0e00      	lsrs	r0, r0, #24
 8000c7c:	0fc9      	lsrs	r1, r1, #31
 8000c7e:	2aff      	cmp	r2, #255	@ 0xff
 8000c80:	d01a      	beq.n	8000cb8 <__lesf2+0x50>
 8000c82:	28ff      	cmp	r0, #255	@ 0xff
 8000c84:	d00e      	beq.n	8000ca4 <__lesf2+0x3c>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d11e      	bne.n	8000cc8 <__lesf2+0x60>
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	d10e      	bne.n	8000cac <__lesf2+0x44>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d02a      	beq.n	8000ce8 <__lesf2+0x80>
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d00c      	beq.n	8000cb0 <__lesf2+0x48>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d01d      	beq.n	8000cd6 <__lesf2+0x6e>
 8000c9a:	1e58      	subs	r0, r3, #1
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	4018      	ands	r0, r3
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	e010      	b.n	8000cc6 <__lesf2+0x5e>
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d10d      	bne.n	8000cc4 <__lesf2+0x5c>
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	d120      	bne.n	8000cee <__lesf2+0x86>
 8000cac:	2c00      	cmp	r4, #0
 8000cae:	d11e      	bne.n	8000cee <__lesf2+0x86>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d023      	beq.n	8000cfc <__lesf2+0x94>
 8000cb4:	0008      	movs	r0, r1
 8000cb6:	e006      	b.n	8000cc6 <__lesf2+0x5e>
 8000cb8:	2c00      	cmp	r4, #0
 8000cba:	d103      	bne.n	8000cc4 <__lesf2+0x5c>
 8000cbc:	28ff      	cmp	r0, #255	@ 0xff
 8000cbe:	d1ec      	bne.n	8000c9a <__lesf2+0x32>
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d017      	beq.n	8000cf4 <__lesf2+0x8c>
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	bd30      	pop	{r4, r5, pc}
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d0e6      	beq.n	8000c9a <__lesf2+0x32>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d1e4      	bne.n	8000c9a <__lesf2+0x32>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	dce2      	bgt.n	8000c9a <__lesf2+0x32>
 8000cd4:	db04      	blt.n	8000ce0 <__lesf2+0x78>
 8000cd6:	42ac      	cmp	r4, r5
 8000cd8:	d8df      	bhi.n	8000c9a <__lesf2+0x32>
 8000cda:	2000      	movs	r0, #0
 8000cdc:	42ac      	cmp	r4, r5
 8000cde:	d2f2      	bcs.n	8000cc6 <__lesf2+0x5e>
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00b      	beq.n	8000cfc <__lesf2+0x94>
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	e7ee      	b.n	8000cc6 <__lesf2+0x5e>
 8000ce8:	2c00      	cmp	r4, #0
 8000cea:	d0ec      	beq.n	8000cc6 <__lesf2+0x5e>
 8000cec:	e7d5      	b.n	8000c9a <__lesf2+0x32>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d1d3      	bne.n	8000c9a <__lesf2+0x32>
 8000cf2:	e7f5      	b.n	8000ce0 <__lesf2+0x78>
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d0e5      	beq.n	8000cc6 <__lesf2+0x5e>
 8000cfa:	e7ce      	b.n	8000c9a <__lesf2+0x32>
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4240      	negs	r0, r0
 8000d00:	e7e1      	b.n	8000cc6 <__lesf2+0x5e>
 8000d02:	46c0      	nop			@ (mov r8, r8)

08000d04 <__aeabi_fmul>:
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	464f      	mov	r7, r9
 8000d08:	4646      	mov	r6, r8
 8000d0a:	46d6      	mov	lr, sl
 8000d0c:	0243      	lsls	r3, r0, #9
 8000d0e:	0a5b      	lsrs	r3, r3, #9
 8000d10:	0045      	lsls	r5, r0, #1
 8000d12:	b5c0      	push	{r6, r7, lr}
 8000d14:	4699      	mov	r9, r3
 8000d16:	1c0f      	adds	r7, r1, #0
 8000d18:	0e2d      	lsrs	r5, r5, #24
 8000d1a:	0fc6      	lsrs	r6, r0, #31
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_fmul+0x1e>
 8000d20:	e088      	b.n	8000e34 <__aeabi_fmul+0x130>
 8000d22:	2dff      	cmp	r5, #255	@ 0xff
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fmul+0x24>
 8000d26:	e08d      	b.n	8000e44 <__aeabi_fmul+0x140>
 8000d28:	2280      	movs	r2, #128	@ 0x80
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	04d2      	lsls	r2, r2, #19
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	2300      	movs	r3, #0
 8000d32:	4691      	mov	r9, r2
 8000d34:	4698      	mov	r8, r3
 8000d36:	469a      	mov	sl, r3
 8000d38:	3d7f      	subs	r5, #127	@ 0x7f
 8000d3a:	027c      	lsls	r4, r7, #9
 8000d3c:	007b      	lsls	r3, r7, #1
 8000d3e:	0a64      	lsrs	r4, r4, #9
 8000d40:	0e1b      	lsrs	r3, r3, #24
 8000d42:	0fff      	lsrs	r7, r7, #31
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d068      	beq.n	8000e1a <__aeabi_fmul+0x116>
 8000d48:	2bff      	cmp	r3, #255	@ 0xff
 8000d4a:	d021      	beq.n	8000d90 <__aeabi_fmul+0x8c>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	00e4      	lsls	r4, r4, #3
 8000d50:	04d2      	lsls	r2, r2, #19
 8000d52:	4314      	orrs	r4, r2
 8000d54:	4642      	mov	r2, r8
 8000d56:	3b7f      	subs	r3, #127	@ 0x7f
 8000d58:	195b      	adds	r3, r3, r5
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	1c5d      	adds	r5, r3, #1
 8000d5e:	2a0a      	cmp	r2, #10
 8000d60:	dc2e      	bgt.n	8000dc0 <__aeabi_fmul+0xbc>
 8000d62:	407e      	eors	r6, r7
 8000d64:	4642      	mov	r2, r8
 8000d66:	2a02      	cmp	r2, #2
 8000d68:	dc23      	bgt.n	8000db2 <__aeabi_fmul+0xae>
 8000d6a:	3a01      	subs	r2, #1
 8000d6c:	2a01      	cmp	r2, #1
 8000d6e:	d900      	bls.n	8000d72 <__aeabi_fmul+0x6e>
 8000d70:	e0bd      	b.n	8000eee <__aeabi_fmul+0x1ea>
 8000d72:	2902      	cmp	r1, #2
 8000d74:	d06e      	beq.n	8000e54 <__aeabi_fmul+0x150>
 8000d76:	2901      	cmp	r1, #1
 8000d78:	d12c      	bne.n	8000dd4 <__aeabi_fmul+0xd0>
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	05c0      	lsls	r0, r0, #23
 8000d80:	07f6      	lsls	r6, r6, #31
 8000d82:	4310      	orrs	r0, r2
 8000d84:	4330      	orrs	r0, r6
 8000d86:	bce0      	pop	{r5, r6, r7}
 8000d88:	46ba      	mov	sl, r7
 8000d8a:	46b1      	mov	r9, r6
 8000d8c:	46a8      	mov	r8, r5
 8000d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d90:	002b      	movs	r3, r5
 8000d92:	33ff      	adds	r3, #255	@ 0xff
 8000d94:	2c00      	cmp	r4, #0
 8000d96:	d065      	beq.n	8000e64 <__aeabi_fmul+0x160>
 8000d98:	2203      	movs	r2, #3
 8000d9a:	4641      	mov	r1, r8
 8000d9c:	4311      	orrs	r1, r2
 8000d9e:	0032      	movs	r2, r6
 8000da0:	3501      	adds	r5, #1
 8000da2:	4688      	mov	r8, r1
 8000da4:	407a      	eors	r2, r7
 8000da6:	35ff      	adds	r5, #255	@ 0xff
 8000da8:	290a      	cmp	r1, #10
 8000daa:	dd00      	ble.n	8000dae <__aeabi_fmul+0xaa>
 8000dac:	e0d8      	b.n	8000f60 <__aeabi_fmul+0x25c>
 8000dae:	0016      	movs	r6, r2
 8000db0:	2103      	movs	r1, #3
 8000db2:	4640      	mov	r0, r8
 8000db4:	2201      	movs	r2, #1
 8000db6:	4082      	lsls	r2, r0
 8000db8:	20a6      	movs	r0, #166	@ 0xa6
 8000dba:	00c0      	lsls	r0, r0, #3
 8000dbc:	4202      	tst	r2, r0
 8000dbe:	d020      	beq.n	8000e02 <__aeabi_fmul+0xfe>
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d046      	beq.n	8000e54 <__aeabi_fmul+0x150>
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_fmul+0xc8>
 8000dca:	e0bb      	b.n	8000f44 <__aeabi_fmul+0x240>
 8000dcc:	4651      	mov	r1, sl
 8000dce:	464c      	mov	r4, r9
 8000dd0:	2901      	cmp	r1, #1
 8000dd2:	d0d2      	beq.n	8000d7a <__aeabi_fmul+0x76>
 8000dd4:	002b      	movs	r3, r5
 8000dd6:	337f      	adds	r3, #127	@ 0x7f
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	dd70      	ble.n	8000ebe <__aeabi_fmul+0x1ba>
 8000ddc:	0762      	lsls	r2, r4, #29
 8000dde:	d004      	beq.n	8000dea <__aeabi_fmul+0xe6>
 8000de0:	220f      	movs	r2, #15
 8000de2:	4022      	ands	r2, r4
 8000de4:	2a04      	cmp	r2, #4
 8000de6:	d000      	beq.n	8000dea <__aeabi_fmul+0xe6>
 8000de8:	3404      	adds	r4, #4
 8000dea:	0122      	lsls	r2, r4, #4
 8000dec:	d503      	bpl.n	8000df6 <__aeabi_fmul+0xf2>
 8000dee:	4b63      	ldr	r3, [pc, #396]	@ (8000f7c <__aeabi_fmul+0x278>)
 8000df0:	401c      	ands	r4, r3
 8000df2:	002b      	movs	r3, r5
 8000df4:	3380      	adds	r3, #128	@ 0x80
 8000df6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000df8:	dc2c      	bgt.n	8000e54 <__aeabi_fmul+0x150>
 8000dfa:	01a2      	lsls	r2, r4, #6
 8000dfc:	0a52      	lsrs	r2, r2, #9
 8000dfe:	b2d8      	uxtb	r0, r3
 8000e00:	e7bd      	b.n	8000d7e <__aeabi_fmul+0x7a>
 8000e02:	2090      	movs	r0, #144	@ 0x90
 8000e04:	0080      	lsls	r0, r0, #2
 8000e06:	4202      	tst	r2, r0
 8000e08:	d127      	bne.n	8000e5a <__aeabi_fmul+0x156>
 8000e0a:	38b9      	subs	r0, #185	@ 0xb9
 8000e0c:	38ff      	subs	r0, #255	@ 0xff
 8000e0e:	4210      	tst	r0, r2
 8000e10:	d06d      	beq.n	8000eee <__aeabi_fmul+0x1ea>
 8000e12:	003e      	movs	r6, r7
 8000e14:	46a1      	mov	r9, r4
 8000e16:	468a      	mov	sl, r1
 8000e18:	e7d2      	b.n	8000dc0 <__aeabi_fmul+0xbc>
 8000e1a:	2c00      	cmp	r4, #0
 8000e1c:	d141      	bne.n	8000ea2 <__aeabi_fmul+0x19e>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	4642      	mov	r2, r8
 8000e22:	431a      	orrs	r2, r3
 8000e24:	4690      	mov	r8, r2
 8000e26:	002b      	movs	r3, r5
 8000e28:	4642      	mov	r2, r8
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	1c5d      	adds	r5, r3, #1
 8000e2e:	2a0a      	cmp	r2, #10
 8000e30:	dd97      	ble.n	8000d62 <__aeabi_fmul+0x5e>
 8000e32:	e7c5      	b.n	8000dc0 <__aeabi_fmul+0xbc>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d126      	bne.n	8000e86 <__aeabi_fmul+0x182>
 8000e38:	2304      	movs	r3, #4
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	2500      	movs	r5, #0
 8000e40:	469a      	mov	sl, r3
 8000e42:	e77a      	b.n	8000d3a <__aeabi_fmul+0x36>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d118      	bne.n	8000e7a <__aeabi_fmul+0x176>
 8000e48:	2308      	movs	r3, #8
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	3b06      	subs	r3, #6
 8000e4e:	25ff      	movs	r5, #255	@ 0xff
 8000e50:	469a      	mov	sl, r3
 8000e52:	e772      	b.n	8000d3a <__aeabi_fmul+0x36>
 8000e54:	20ff      	movs	r0, #255	@ 0xff
 8000e56:	2200      	movs	r2, #0
 8000e58:	e791      	b.n	8000d7e <__aeabi_fmul+0x7a>
 8000e5a:	2280      	movs	r2, #128	@ 0x80
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	20ff      	movs	r0, #255	@ 0xff
 8000e60:	03d2      	lsls	r2, r2, #15
 8000e62:	e78c      	b.n	8000d7e <__aeabi_fmul+0x7a>
 8000e64:	4641      	mov	r1, r8
 8000e66:	2202      	movs	r2, #2
 8000e68:	3501      	adds	r5, #1
 8000e6a:	4311      	orrs	r1, r2
 8000e6c:	4688      	mov	r8, r1
 8000e6e:	35ff      	adds	r5, #255	@ 0xff
 8000e70:	290a      	cmp	r1, #10
 8000e72:	dca5      	bgt.n	8000dc0 <__aeabi_fmul+0xbc>
 8000e74:	2102      	movs	r1, #2
 8000e76:	407e      	eors	r6, r7
 8000e78:	e774      	b.n	8000d64 <__aeabi_fmul+0x60>
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	4698      	mov	r8, r3
 8000e7e:	3b09      	subs	r3, #9
 8000e80:	25ff      	movs	r5, #255	@ 0xff
 8000e82:	469a      	mov	sl, r3
 8000e84:	e759      	b.n	8000d3a <__aeabi_fmul+0x36>
 8000e86:	0018      	movs	r0, r3
 8000e88:	f002 fa12 	bl	80032b0 <__clzsi2>
 8000e8c:	464a      	mov	r2, r9
 8000e8e:	1f43      	subs	r3, r0, #5
 8000e90:	2576      	movs	r5, #118	@ 0x76
 8000e92:	409a      	lsls	r2, r3
 8000e94:	2300      	movs	r3, #0
 8000e96:	426d      	negs	r5, r5
 8000e98:	4691      	mov	r9, r2
 8000e9a:	4698      	mov	r8, r3
 8000e9c:	469a      	mov	sl, r3
 8000e9e:	1a2d      	subs	r5, r5, r0
 8000ea0:	e74b      	b.n	8000d3a <__aeabi_fmul+0x36>
 8000ea2:	0020      	movs	r0, r4
 8000ea4:	f002 fa04 	bl	80032b0 <__clzsi2>
 8000ea8:	4642      	mov	r2, r8
 8000eaa:	1f43      	subs	r3, r0, #5
 8000eac:	409c      	lsls	r4, r3
 8000eae:	1a2b      	subs	r3, r5, r0
 8000eb0:	3b76      	subs	r3, #118	@ 0x76
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	1c5d      	adds	r5, r3, #1
 8000eb6:	2a0a      	cmp	r2, #10
 8000eb8:	dc00      	bgt.n	8000ebc <__aeabi_fmul+0x1b8>
 8000eba:	e752      	b.n	8000d62 <__aeabi_fmul+0x5e>
 8000ebc:	e780      	b.n	8000dc0 <__aeabi_fmul+0xbc>
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b1b      	cmp	r3, #27
 8000ec4:	dd00      	ble.n	8000ec8 <__aeabi_fmul+0x1c4>
 8000ec6:	e758      	b.n	8000d7a <__aeabi_fmul+0x76>
 8000ec8:	359e      	adds	r5, #158	@ 0x9e
 8000eca:	0022      	movs	r2, r4
 8000ecc:	40ac      	lsls	r4, r5
 8000ece:	40da      	lsrs	r2, r3
 8000ed0:	1e63      	subs	r3, r4, #1
 8000ed2:	419c      	sbcs	r4, r3
 8000ed4:	4322      	orrs	r2, r4
 8000ed6:	0753      	lsls	r3, r2, #29
 8000ed8:	d004      	beq.n	8000ee4 <__aeabi_fmul+0x1e0>
 8000eda:	230f      	movs	r3, #15
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_fmul+0x1e0>
 8000ee2:	3204      	adds	r2, #4
 8000ee4:	0153      	lsls	r3, r2, #5
 8000ee6:	d537      	bpl.n	8000f58 <__aeabi_fmul+0x254>
 8000ee8:	2001      	movs	r0, #1
 8000eea:	2200      	movs	r2, #0
 8000eec:	e747      	b.n	8000d7e <__aeabi_fmul+0x7a>
 8000eee:	0c21      	lsrs	r1, r4, #16
 8000ef0:	464a      	mov	r2, r9
 8000ef2:	0424      	lsls	r4, r4, #16
 8000ef4:	0c24      	lsrs	r4, r4, #16
 8000ef6:	0027      	movs	r7, r4
 8000ef8:	0c10      	lsrs	r0, r2, #16
 8000efa:	0412      	lsls	r2, r2, #16
 8000efc:	0c12      	lsrs	r2, r2, #16
 8000efe:	4344      	muls	r4, r0
 8000f00:	4357      	muls	r7, r2
 8000f02:	4348      	muls	r0, r1
 8000f04:	4351      	muls	r1, r2
 8000f06:	0c3a      	lsrs	r2, r7, #16
 8000f08:	1909      	adds	r1, r1, r4
 8000f0a:	1852      	adds	r2, r2, r1
 8000f0c:	4294      	cmp	r4, r2
 8000f0e:	d903      	bls.n	8000f18 <__aeabi_fmul+0x214>
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	0249      	lsls	r1, r1, #9
 8000f14:	468c      	mov	ip, r1
 8000f16:	4460      	add	r0, ip
 8000f18:	043f      	lsls	r7, r7, #16
 8000f1a:	0411      	lsls	r1, r2, #16
 8000f1c:	0c3f      	lsrs	r7, r7, #16
 8000f1e:	19c9      	adds	r1, r1, r7
 8000f20:	018c      	lsls	r4, r1, #6
 8000f22:	1e67      	subs	r7, r4, #1
 8000f24:	41bc      	sbcs	r4, r7
 8000f26:	0c12      	lsrs	r2, r2, #16
 8000f28:	0e89      	lsrs	r1, r1, #26
 8000f2a:	1812      	adds	r2, r2, r0
 8000f2c:	430c      	orrs	r4, r1
 8000f2e:	0192      	lsls	r2, r2, #6
 8000f30:	4314      	orrs	r4, r2
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	d50e      	bpl.n	8000f54 <__aeabi_fmul+0x250>
 8000f36:	2301      	movs	r3, #1
 8000f38:	0862      	lsrs	r2, r4, #1
 8000f3a:	401c      	ands	r4, r3
 8000f3c:	4314      	orrs	r4, r2
 8000f3e:	e749      	b.n	8000dd4 <__aeabi_fmul+0xd0>
 8000f40:	003e      	movs	r6, r7
 8000f42:	46a1      	mov	r9, r4
 8000f44:	2280      	movs	r2, #128	@ 0x80
 8000f46:	464b      	mov	r3, r9
 8000f48:	03d2      	lsls	r2, r2, #15
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	0252      	lsls	r2, r2, #9
 8000f4e:	20ff      	movs	r0, #255	@ 0xff
 8000f50:	0a52      	lsrs	r2, r2, #9
 8000f52:	e714      	b.n	8000d7e <__aeabi_fmul+0x7a>
 8000f54:	001d      	movs	r5, r3
 8000f56:	e73d      	b.n	8000dd4 <__aeabi_fmul+0xd0>
 8000f58:	0192      	lsls	r2, r2, #6
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	0a52      	lsrs	r2, r2, #9
 8000f5e:	e70e      	b.n	8000d7e <__aeabi_fmul+0x7a>
 8000f60:	290f      	cmp	r1, #15
 8000f62:	d1ed      	bne.n	8000f40 <__aeabi_fmul+0x23c>
 8000f64:	2280      	movs	r2, #128	@ 0x80
 8000f66:	464b      	mov	r3, r9
 8000f68:	03d2      	lsls	r2, r2, #15
 8000f6a:	4213      	tst	r3, r2
 8000f6c:	d0ea      	beq.n	8000f44 <__aeabi_fmul+0x240>
 8000f6e:	4214      	tst	r4, r2
 8000f70:	d1e8      	bne.n	8000f44 <__aeabi_fmul+0x240>
 8000f72:	003e      	movs	r6, r7
 8000f74:	20ff      	movs	r0, #255	@ 0xff
 8000f76:	4322      	orrs	r2, r4
 8000f78:	e701      	b.n	8000d7e <__aeabi_fmul+0x7a>
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	f7ffffff 	.word	0xf7ffffff

08000f80 <__aeabi_fsub>:
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f82:	4647      	mov	r7, r8
 8000f84:	46ce      	mov	lr, r9
 8000f86:	024e      	lsls	r6, r1, #9
 8000f88:	0243      	lsls	r3, r0, #9
 8000f8a:	0045      	lsls	r5, r0, #1
 8000f8c:	0a72      	lsrs	r2, r6, #9
 8000f8e:	0fc4      	lsrs	r4, r0, #31
 8000f90:	0048      	lsls	r0, r1, #1
 8000f92:	b580      	push	{r7, lr}
 8000f94:	4694      	mov	ip, r2
 8000f96:	0a5f      	lsrs	r7, r3, #9
 8000f98:	0e2d      	lsrs	r5, r5, #24
 8000f9a:	099b      	lsrs	r3, r3, #6
 8000f9c:	0e00      	lsrs	r0, r0, #24
 8000f9e:	0fc9      	lsrs	r1, r1, #31
 8000fa0:	09b6      	lsrs	r6, r6, #6
 8000fa2:	28ff      	cmp	r0, #255	@ 0xff
 8000fa4:	d024      	beq.n	8000ff0 <__aeabi_fsub+0x70>
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4051      	eors	r1, r2
 8000faa:	1a2a      	subs	r2, r5, r0
 8000fac:	428c      	cmp	r4, r1
 8000fae:	d00f      	beq.n	8000fd0 <__aeabi_fsub+0x50>
 8000fb0:	2a00      	cmp	r2, #0
 8000fb2:	dc00      	bgt.n	8000fb6 <__aeabi_fsub+0x36>
 8000fb4:	e16a      	b.n	800128c <__aeabi_fsub+0x30c>
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	d135      	bne.n	8001026 <__aeabi_fsub+0xa6>
 8000fba:	2e00      	cmp	r6, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_fsub+0x40>
 8000fbe:	e0a2      	b.n	8001106 <__aeabi_fsub+0x186>
 8000fc0:	1e51      	subs	r1, r2, #1
 8000fc2:	2a01      	cmp	r2, #1
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_fsub+0x48>
 8000fc6:	e124      	b.n	8001212 <__aeabi_fsub+0x292>
 8000fc8:	2aff      	cmp	r2, #255	@ 0xff
 8000fca:	d021      	beq.n	8001010 <__aeabi_fsub+0x90>
 8000fcc:	000a      	movs	r2, r1
 8000fce:	e02f      	b.n	8001030 <__aeabi_fsub+0xb0>
 8000fd0:	2a00      	cmp	r2, #0
 8000fd2:	dc00      	bgt.n	8000fd6 <__aeabi_fsub+0x56>
 8000fd4:	e167      	b.n	80012a6 <__aeabi_fsub+0x326>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d05e      	beq.n	8001098 <__aeabi_fsub+0x118>
 8000fda:	2dff      	cmp	r5, #255	@ 0xff
 8000fdc:	d018      	beq.n	8001010 <__aeabi_fsub+0x90>
 8000fde:	2180      	movs	r1, #128	@ 0x80
 8000fe0:	04c9      	lsls	r1, r1, #19
 8000fe2:	430e      	orrs	r6, r1
 8000fe4:	2a1b      	cmp	r2, #27
 8000fe6:	dc00      	bgt.n	8000fea <__aeabi_fsub+0x6a>
 8000fe8:	e076      	b.n	80010d8 <__aeabi_fsub+0x158>
 8000fea:	002a      	movs	r2, r5
 8000fec:	3301      	adds	r3, #1
 8000fee:	e032      	b.n	8001056 <__aeabi_fsub+0xd6>
 8000ff0:	002a      	movs	r2, r5
 8000ff2:	3aff      	subs	r2, #255	@ 0xff
 8000ff4:	4691      	mov	r9, r2
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	d042      	beq.n	8001080 <__aeabi_fsub+0x100>
 8000ffa:	428c      	cmp	r4, r1
 8000ffc:	d055      	beq.n	80010aa <__aeabi_fsub+0x12a>
 8000ffe:	464a      	mov	r2, r9
 8001000:	2a00      	cmp	r2, #0
 8001002:	d100      	bne.n	8001006 <__aeabi_fsub+0x86>
 8001004:	e09c      	b.n	8001140 <__aeabi_fsub+0x1c0>
 8001006:	2d00      	cmp	r5, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x8c>
 800100a:	e077      	b.n	80010fc <__aeabi_fsub+0x17c>
 800100c:	000c      	movs	r4, r1
 800100e:	0033      	movs	r3, r6
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d100      	bne.n	8001018 <__aeabi_fsub+0x98>
 8001016:	e06e      	b.n	80010f6 <__aeabi_fsub+0x176>
 8001018:	2280      	movs	r2, #128	@ 0x80
 800101a:	03d2      	lsls	r2, r2, #15
 800101c:	4313      	orrs	r3, r2
 800101e:	025b      	lsls	r3, r3, #9
 8001020:	20ff      	movs	r0, #255	@ 0xff
 8001022:	0a5b      	lsrs	r3, r3, #9
 8001024:	e024      	b.n	8001070 <__aeabi_fsub+0xf0>
 8001026:	2dff      	cmp	r5, #255	@ 0xff
 8001028:	d0f2      	beq.n	8001010 <__aeabi_fsub+0x90>
 800102a:	2180      	movs	r1, #128	@ 0x80
 800102c:	04c9      	lsls	r1, r1, #19
 800102e:	430e      	orrs	r6, r1
 8001030:	2101      	movs	r1, #1
 8001032:	2a1b      	cmp	r2, #27
 8001034:	dc08      	bgt.n	8001048 <__aeabi_fsub+0xc8>
 8001036:	0031      	movs	r1, r6
 8001038:	2020      	movs	r0, #32
 800103a:	40d1      	lsrs	r1, r2
 800103c:	1a82      	subs	r2, r0, r2
 800103e:	4096      	lsls	r6, r2
 8001040:	0032      	movs	r2, r6
 8001042:	1e50      	subs	r0, r2, #1
 8001044:	4182      	sbcs	r2, r0
 8001046:	4311      	orrs	r1, r2
 8001048:	1a5b      	subs	r3, r3, r1
 800104a:	015a      	lsls	r2, r3, #5
 800104c:	d460      	bmi.n	8001110 <__aeabi_fsub+0x190>
 800104e:	2107      	movs	r1, #7
 8001050:	002a      	movs	r2, r5
 8001052:	4019      	ands	r1, r3
 8001054:	d057      	beq.n	8001106 <__aeabi_fsub+0x186>
 8001056:	210f      	movs	r1, #15
 8001058:	4019      	ands	r1, r3
 800105a:	2904      	cmp	r1, #4
 800105c:	d000      	beq.n	8001060 <__aeabi_fsub+0xe0>
 800105e:	3304      	adds	r3, #4
 8001060:	0159      	lsls	r1, r3, #5
 8001062:	d550      	bpl.n	8001106 <__aeabi_fsub+0x186>
 8001064:	1c50      	adds	r0, r2, #1
 8001066:	2afe      	cmp	r2, #254	@ 0xfe
 8001068:	d045      	beq.n	80010f6 <__aeabi_fsub+0x176>
 800106a:	019b      	lsls	r3, r3, #6
 800106c:	b2c0      	uxtb	r0, r0
 800106e:	0a5b      	lsrs	r3, r3, #9
 8001070:	05c0      	lsls	r0, r0, #23
 8001072:	4318      	orrs	r0, r3
 8001074:	07e4      	lsls	r4, r4, #31
 8001076:	4320      	orrs	r0, r4
 8001078:	bcc0      	pop	{r6, r7}
 800107a:	46b9      	mov	r9, r7
 800107c:	46b0      	mov	r8, r6
 800107e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001080:	2201      	movs	r2, #1
 8001082:	4051      	eors	r1, r2
 8001084:	428c      	cmp	r4, r1
 8001086:	d1ba      	bne.n	8000ffe <__aeabi_fsub+0x7e>
 8001088:	464a      	mov	r2, r9
 800108a:	2a00      	cmp	r2, #0
 800108c:	d010      	beq.n	80010b0 <__aeabi_fsub+0x130>
 800108e:	2d00      	cmp	r5, #0
 8001090:	d100      	bne.n	8001094 <__aeabi_fsub+0x114>
 8001092:	e098      	b.n	80011c6 <__aeabi_fsub+0x246>
 8001094:	2300      	movs	r3, #0
 8001096:	e7bb      	b.n	8001010 <__aeabi_fsub+0x90>
 8001098:	2e00      	cmp	r6, #0
 800109a:	d034      	beq.n	8001106 <__aeabi_fsub+0x186>
 800109c:	1e51      	subs	r1, r2, #1
 800109e:	2a01      	cmp	r2, #1
 80010a0:	d06e      	beq.n	8001180 <__aeabi_fsub+0x200>
 80010a2:	2aff      	cmp	r2, #255	@ 0xff
 80010a4:	d0b4      	beq.n	8001010 <__aeabi_fsub+0x90>
 80010a6:	000a      	movs	r2, r1
 80010a8:	e79c      	b.n	8000fe4 <__aeabi_fsub+0x64>
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d000      	beq.n	80010b0 <__aeabi_fsub+0x130>
 80010ae:	e088      	b.n	80011c2 <__aeabi_fsub+0x242>
 80010b0:	20fe      	movs	r0, #254	@ 0xfe
 80010b2:	1c6a      	adds	r2, r5, #1
 80010b4:	4210      	tst	r0, r2
 80010b6:	d000      	beq.n	80010ba <__aeabi_fsub+0x13a>
 80010b8:	e092      	b.n	80011e0 <__aeabi_fsub+0x260>
 80010ba:	2d00      	cmp	r5, #0
 80010bc:	d000      	beq.n	80010c0 <__aeabi_fsub+0x140>
 80010be:	e0a4      	b.n	800120a <__aeabi_fsub+0x28a>
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x146>
 80010c4:	e0cb      	b.n	800125e <__aeabi_fsub+0x2de>
 80010c6:	2e00      	cmp	r6, #0
 80010c8:	d000      	beq.n	80010cc <__aeabi_fsub+0x14c>
 80010ca:	e0ca      	b.n	8001262 <__aeabi_fsub+0x2e2>
 80010cc:	2200      	movs	r2, #0
 80010ce:	08db      	lsrs	r3, r3, #3
 80010d0:	025b      	lsls	r3, r3, #9
 80010d2:	0a5b      	lsrs	r3, r3, #9
 80010d4:	b2d0      	uxtb	r0, r2
 80010d6:	e7cb      	b.n	8001070 <__aeabi_fsub+0xf0>
 80010d8:	0031      	movs	r1, r6
 80010da:	2020      	movs	r0, #32
 80010dc:	40d1      	lsrs	r1, r2
 80010de:	1a82      	subs	r2, r0, r2
 80010e0:	4096      	lsls	r6, r2
 80010e2:	0032      	movs	r2, r6
 80010e4:	1e50      	subs	r0, r2, #1
 80010e6:	4182      	sbcs	r2, r0
 80010e8:	430a      	orrs	r2, r1
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	015a      	lsls	r2, r3, #5
 80010ee:	d5ae      	bpl.n	800104e <__aeabi_fsub+0xce>
 80010f0:	1c6a      	adds	r2, r5, #1
 80010f2:	2dfe      	cmp	r5, #254	@ 0xfe
 80010f4:	d14a      	bne.n	800118c <__aeabi_fsub+0x20c>
 80010f6:	20ff      	movs	r0, #255	@ 0xff
 80010f8:	2300      	movs	r3, #0
 80010fa:	e7b9      	b.n	8001070 <__aeabi_fsub+0xf0>
 80010fc:	22ff      	movs	r2, #255	@ 0xff
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d14b      	bne.n	800119a <__aeabi_fsub+0x21a>
 8001102:	000c      	movs	r4, r1
 8001104:	0033      	movs	r3, r6
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	2aff      	cmp	r2, #255	@ 0xff
 800110a:	d100      	bne.n	800110e <__aeabi_fsub+0x18e>
 800110c:	e781      	b.n	8001012 <__aeabi_fsub+0x92>
 800110e:	e7df      	b.n	80010d0 <__aeabi_fsub+0x150>
 8001110:	019f      	lsls	r7, r3, #6
 8001112:	09bf      	lsrs	r7, r7, #6
 8001114:	0038      	movs	r0, r7
 8001116:	f002 f8cb 	bl	80032b0 <__clzsi2>
 800111a:	3805      	subs	r0, #5
 800111c:	4087      	lsls	r7, r0
 800111e:	4285      	cmp	r5, r0
 8001120:	dc21      	bgt.n	8001166 <__aeabi_fsub+0x1e6>
 8001122:	003b      	movs	r3, r7
 8001124:	2120      	movs	r1, #32
 8001126:	1b42      	subs	r2, r0, r5
 8001128:	3201      	adds	r2, #1
 800112a:	40d3      	lsrs	r3, r2
 800112c:	1a8a      	subs	r2, r1, r2
 800112e:	4097      	lsls	r7, r2
 8001130:	1e7a      	subs	r2, r7, #1
 8001132:	4197      	sbcs	r7, r2
 8001134:	2200      	movs	r2, #0
 8001136:	433b      	orrs	r3, r7
 8001138:	0759      	lsls	r1, r3, #29
 800113a:	d000      	beq.n	800113e <__aeabi_fsub+0x1be>
 800113c:	e78b      	b.n	8001056 <__aeabi_fsub+0xd6>
 800113e:	e78f      	b.n	8001060 <__aeabi_fsub+0xe0>
 8001140:	20fe      	movs	r0, #254	@ 0xfe
 8001142:	1c6a      	adds	r2, r5, #1
 8001144:	4210      	tst	r0, r2
 8001146:	d112      	bne.n	800116e <__aeabi_fsub+0x1ee>
 8001148:	2d00      	cmp	r5, #0
 800114a:	d152      	bne.n	80011f2 <__aeabi_fsub+0x272>
 800114c:	2b00      	cmp	r3, #0
 800114e:	d07c      	beq.n	800124a <__aeabi_fsub+0x2ca>
 8001150:	2e00      	cmp	r6, #0
 8001152:	d0bb      	beq.n	80010cc <__aeabi_fsub+0x14c>
 8001154:	1b9a      	subs	r2, r3, r6
 8001156:	0150      	lsls	r0, r2, #5
 8001158:	d400      	bmi.n	800115c <__aeabi_fsub+0x1dc>
 800115a:	e08b      	b.n	8001274 <__aeabi_fsub+0x2f4>
 800115c:	2401      	movs	r4, #1
 800115e:	2200      	movs	r2, #0
 8001160:	1af3      	subs	r3, r6, r3
 8001162:	400c      	ands	r4, r1
 8001164:	e7e8      	b.n	8001138 <__aeabi_fsub+0x1b8>
 8001166:	4b56      	ldr	r3, [pc, #344]	@ (80012c0 <__aeabi_fsub+0x340>)
 8001168:	1a2a      	subs	r2, r5, r0
 800116a:	403b      	ands	r3, r7
 800116c:	e7e4      	b.n	8001138 <__aeabi_fsub+0x1b8>
 800116e:	1b9f      	subs	r7, r3, r6
 8001170:	017a      	lsls	r2, r7, #5
 8001172:	d446      	bmi.n	8001202 <__aeabi_fsub+0x282>
 8001174:	2f00      	cmp	r7, #0
 8001176:	d1cd      	bne.n	8001114 <__aeabi_fsub+0x194>
 8001178:	2400      	movs	r4, #0
 800117a:	2000      	movs	r0, #0
 800117c:	2300      	movs	r3, #0
 800117e:	e777      	b.n	8001070 <__aeabi_fsub+0xf0>
 8001180:	199b      	adds	r3, r3, r6
 8001182:	2501      	movs	r5, #1
 8001184:	3201      	adds	r2, #1
 8001186:	0159      	lsls	r1, r3, #5
 8001188:	d400      	bmi.n	800118c <__aeabi_fsub+0x20c>
 800118a:	e760      	b.n	800104e <__aeabi_fsub+0xce>
 800118c:	2101      	movs	r1, #1
 800118e:	484d      	ldr	r0, [pc, #308]	@ (80012c4 <__aeabi_fsub+0x344>)
 8001190:	4019      	ands	r1, r3
 8001192:	085b      	lsrs	r3, r3, #1
 8001194:	4003      	ands	r3, r0
 8001196:	430b      	orrs	r3, r1
 8001198:	e7ce      	b.n	8001138 <__aeabi_fsub+0x1b8>
 800119a:	1e57      	subs	r7, r2, #1
 800119c:	2a01      	cmp	r2, #1
 800119e:	d05a      	beq.n	8001256 <__aeabi_fsub+0x2d6>
 80011a0:	000c      	movs	r4, r1
 80011a2:	2aff      	cmp	r2, #255	@ 0xff
 80011a4:	d033      	beq.n	800120e <__aeabi_fsub+0x28e>
 80011a6:	2201      	movs	r2, #1
 80011a8:	2f1b      	cmp	r7, #27
 80011aa:	dc07      	bgt.n	80011bc <__aeabi_fsub+0x23c>
 80011ac:	2120      	movs	r1, #32
 80011ae:	1bc9      	subs	r1, r1, r7
 80011b0:	001a      	movs	r2, r3
 80011b2:	408b      	lsls	r3, r1
 80011b4:	40fa      	lsrs	r2, r7
 80011b6:	1e59      	subs	r1, r3, #1
 80011b8:	418b      	sbcs	r3, r1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	0005      	movs	r5, r0
 80011be:	1ab3      	subs	r3, r6, r2
 80011c0:	e743      	b.n	800104a <__aeabi_fsub+0xca>
 80011c2:	2d00      	cmp	r5, #0
 80011c4:	d123      	bne.n	800120e <__aeabi_fsub+0x28e>
 80011c6:	22ff      	movs	r2, #255	@ 0xff
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d09b      	beq.n	8001104 <__aeabi_fsub+0x184>
 80011cc:	1e51      	subs	r1, r2, #1
 80011ce:	2a01      	cmp	r2, #1
 80011d0:	d0d6      	beq.n	8001180 <__aeabi_fsub+0x200>
 80011d2:	2aff      	cmp	r2, #255	@ 0xff
 80011d4:	d01b      	beq.n	800120e <__aeabi_fsub+0x28e>
 80011d6:	291b      	cmp	r1, #27
 80011d8:	dd2c      	ble.n	8001234 <__aeabi_fsub+0x2b4>
 80011da:	0002      	movs	r2, r0
 80011dc:	1c73      	adds	r3, r6, #1
 80011de:	e73a      	b.n	8001056 <__aeabi_fsub+0xd6>
 80011e0:	2aff      	cmp	r2, #255	@ 0xff
 80011e2:	d088      	beq.n	80010f6 <__aeabi_fsub+0x176>
 80011e4:	199b      	adds	r3, r3, r6
 80011e6:	085b      	lsrs	r3, r3, #1
 80011e8:	0759      	lsls	r1, r3, #29
 80011ea:	d000      	beq.n	80011ee <__aeabi_fsub+0x26e>
 80011ec:	e733      	b.n	8001056 <__aeabi_fsub+0xd6>
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	e76e      	b.n	80010d0 <__aeabi_fsub+0x150>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d110      	bne.n	8001218 <__aeabi_fsub+0x298>
 80011f6:	2e00      	cmp	r6, #0
 80011f8:	d043      	beq.n	8001282 <__aeabi_fsub+0x302>
 80011fa:	2401      	movs	r4, #1
 80011fc:	0033      	movs	r3, r6
 80011fe:	400c      	ands	r4, r1
 8001200:	e706      	b.n	8001010 <__aeabi_fsub+0x90>
 8001202:	2401      	movs	r4, #1
 8001204:	1af7      	subs	r7, r6, r3
 8001206:	400c      	ands	r4, r1
 8001208:	e784      	b.n	8001114 <__aeabi_fsub+0x194>
 800120a:	2b00      	cmp	r3, #0
 800120c:	d104      	bne.n	8001218 <__aeabi_fsub+0x298>
 800120e:	0033      	movs	r3, r6
 8001210:	e6fe      	b.n	8001010 <__aeabi_fsub+0x90>
 8001212:	2501      	movs	r5, #1
 8001214:	1b9b      	subs	r3, r3, r6
 8001216:	e718      	b.n	800104a <__aeabi_fsub+0xca>
 8001218:	2e00      	cmp	r6, #0
 800121a:	d100      	bne.n	800121e <__aeabi_fsub+0x29e>
 800121c:	e6f8      	b.n	8001010 <__aeabi_fsub+0x90>
 800121e:	2280      	movs	r2, #128	@ 0x80
 8001220:	03d2      	lsls	r2, r2, #15
 8001222:	4297      	cmp	r7, r2
 8001224:	d304      	bcc.n	8001230 <__aeabi_fsub+0x2b0>
 8001226:	4594      	cmp	ip, r2
 8001228:	d202      	bcs.n	8001230 <__aeabi_fsub+0x2b0>
 800122a:	2401      	movs	r4, #1
 800122c:	0033      	movs	r3, r6
 800122e:	400c      	ands	r4, r1
 8001230:	08db      	lsrs	r3, r3, #3
 8001232:	e6f1      	b.n	8001018 <__aeabi_fsub+0x98>
 8001234:	001a      	movs	r2, r3
 8001236:	2520      	movs	r5, #32
 8001238:	40ca      	lsrs	r2, r1
 800123a:	1a69      	subs	r1, r5, r1
 800123c:	408b      	lsls	r3, r1
 800123e:	1e59      	subs	r1, r3, #1
 8001240:	418b      	sbcs	r3, r1
 8001242:	4313      	orrs	r3, r2
 8001244:	0005      	movs	r5, r0
 8001246:	199b      	adds	r3, r3, r6
 8001248:	e750      	b.n	80010ec <__aeabi_fsub+0x16c>
 800124a:	2e00      	cmp	r6, #0
 800124c:	d094      	beq.n	8001178 <__aeabi_fsub+0x1f8>
 800124e:	2401      	movs	r4, #1
 8001250:	0033      	movs	r3, r6
 8001252:	400c      	ands	r4, r1
 8001254:	e73a      	b.n	80010cc <__aeabi_fsub+0x14c>
 8001256:	000c      	movs	r4, r1
 8001258:	2501      	movs	r5, #1
 800125a:	1af3      	subs	r3, r6, r3
 800125c:	e6f5      	b.n	800104a <__aeabi_fsub+0xca>
 800125e:	0033      	movs	r3, r6
 8001260:	e734      	b.n	80010cc <__aeabi_fsub+0x14c>
 8001262:	199b      	adds	r3, r3, r6
 8001264:	2200      	movs	r2, #0
 8001266:	0159      	lsls	r1, r3, #5
 8001268:	d5c1      	bpl.n	80011ee <__aeabi_fsub+0x26e>
 800126a:	4a15      	ldr	r2, [pc, #84]	@ (80012c0 <__aeabi_fsub+0x340>)
 800126c:	4013      	ands	r3, r2
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	2201      	movs	r2, #1
 8001272:	e72d      	b.n	80010d0 <__aeabi_fsub+0x150>
 8001274:	2a00      	cmp	r2, #0
 8001276:	d100      	bne.n	800127a <__aeabi_fsub+0x2fa>
 8001278:	e77e      	b.n	8001178 <__aeabi_fsub+0x1f8>
 800127a:	0013      	movs	r3, r2
 800127c:	2200      	movs	r2, #0
 800127e:	08db      	lsrs	r3, r3, #3
 8001280:	e726      	b.n	80010d0 <__aeabi_fsub+0x150>
 8001282:	2380      	movs	r3, #128	@ 0x80
 8001284:	2400      	movs	r4, #0
 8001286:	20ff      	movs	r0, #255	@ 0xff
 8001288:	03db      	lsls	r3, r3, #15
 800128a:	e6f1      	b.n	8001070 <__aeabi_fsub+0xf0>
 800128c:	2a00      	cmp	r2, #0
 800128e:	d100      	bne.n	8001292 <__aeabi_fsub+0x312>
 8001290:	e756      	b.n	8001140 <__aeabi_fsub+0x1c0>
 8001292:	1b47      	subs	r7, r0, r5
 8001294:	003a      	movs	r2, r7
 8001296:	2d00      	cmp	r5, #0
 8001298:	d100      	bne.n	800129c <__aeabi_fsub+0x31c>
 800129a:	e730      	b.n	80010fe <__aeabi_fsub+0x17e>
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	04d2      	lsls	r2, r2, #19
 80012a0:	000c      	movs	r4, r1
 80012a2:	4313      	orrs	r3, r2
 80012a4:	e77f      	b.n	80011a6 <__aeabi_fsub+0x226>
 80012a6:	2a00      	cmp	r2, #0
 80012a8:	d100      	bne.n	80012ac <__aeabi_fsub+0x32c>
 80012aa:	e701      	b.n	80010b0 <__aeabi_fsub+0x130>
 80012ac:	1b41      	subs	r1, r0, r5
 80012ae:	2d00      	cmp	r5, #0
 80012b0:	d101      	bne.n	80012b6 <__aeabi_fsub+0x336>
 80012b2:	000a      	movs	r2, r1
 80012b4:	e788      	b.n	80011c8 <__aeabi_fsub+0x248>
 80012b6:	2280      	movs	r2, #128	@ 0x80
 80012b8:	04d2      	lsls	r2, r2, #19
 80012ba:	4313      	orrs	r3, r2
 80012bc:	e78b      	b.n	80011d6 <__aeabi_fsub+0x256>
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	fbffffff 	.word	0xfbffffff
 80012c4:	7dffffff 	.word	0x7dffffff

080012c8 <__aeabi_f2iz>:
 80012c8:	0241      	lsls	r1, r0, #9
 80012ca:	0042      	lsls	r2, r0, #1
 80012cc:	0fc3      	lsrs	r3, r0, #31
 80012ce:	0a49      	lsrs	r1, r1, #9
 80012d0:	2000      	movs	r0, #0
 80012d2:	0e12      	lsrs	r2, r2, #24
 80012d4:	2a7e      	cmp	r2, #126	@ 0x7e
 80012d6:	dd03      	ble.n	80012e0 <__aeabi_f2iz+0x18>
 80012d8:	2a9d      	cmp	r2, #157	@ 0x9d
 80012da:	dd02      	ble.n	80012e2 <__aeabi_f2iz+0x1a>
 80012dc:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <__aeabi_f2iz+0x3c>)
 80012de:	1898      	adds	r0, r3, r2
 80012e0:	4770      	bx	lr
 80012e2:	2080      	movs	r0, #128	@ 0x80
 80012e4:	0400      	lsls	r0, r0, #16
 80012e6:	4301      	orrs	r1, r0
 80012e8:	2a95      	cmp	r2, #149	@ 0x95
 80012ea:	dc07      	bgt.n	80012fc <__aeabi_f2iz+0x34>
 80012ec:	2096      	movs	r0, #150	@ 0x96
 80012ee:	1a82      	subs	r2, r0, r2
 80012f0:	40d1      	lsrs	r1, r2
 80012f2:	4248      	negs	r0, r1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f3      	bne.n	80012e0 <__aeabi_f2iz+0x18>
 80012f8:	0008      	movs	r0, r1
 80012fa:	e7f1      	b.n	80012e0 <__aeabi_f2iz+0x18>
 80012fc:	3a96      	subs	r2, #150	@ 0x96
 80012fe:	4091      	lsls	r1, r2
 8001300:	e7f7      	b.n	80012f2 <__aeabi_f2iz+0x2a>
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	7fffffff 	.word	0x7fffffff

08001308 <__aeabi_i2f>:
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	2800      	cmp	r0, #0
 800130c:	d013      	beq.n	8001336 <__aeabi_i2f+0x2e>
 800130e:	17c3      	asrs	r3, r0, #31
 8001310:	18c5      	adds	r5, r0, r3
 8001312:	405d      	eors	r5, r3
 8001314:	0fc4      	lsrs	r4, r0, #31
 8001316:	0028      	movs	r0, r5
 8001318:	f001 ffca 	bl	80032b0 <__clzsi2>
 800131c:	239e      	movs	r3, #158	@ 0x9e
 800131e:	0001      	movs	r1, r0
 8001320:	1a1b      	subs	r3, r3, r0
 8001322:	2b96      	cmp	r3, #150	@ 0x96
 8001324:	dc0f      	bgt.n	8001346 <__aeabi_i2f+0x3e>
 8001326:	2808      	cmp	r0, #8
 8001328:	d034      	beq.n	8001394 <__aeabi_i2f+0x8c>
 800132a:	3908      	subs	r1, #8
 800132c:	408d      	lsls	r5, r1
 800132e:	026d      	lsls	r5, r5, #9
 8001330:	0a6d      	lsrs	r5, r5, #9
 8001332:	b2d8      	uxtb	r0, r3
 8001334:	e002      	b.n	800133c <__aeabi_i2f+0x34>
 8001336:	2400      	movs	r4, #0
 8001338:	2000      	movs	r0, #0
 800133a:	2500      	movs	r5, #0
 800133c:	05c0      	lsls	r0, r0, #23
 800133e:	4328      	orrs	r0, r5
 8001340:	07e4      	lsls	r4, r4, #31
 8001342:	4320      	orrs	r0, r4
 8001344:	bd70      	pop	{r4, r5, r6, pc}
 8001346:	2b99      	cmp	r3, #153	@ 0x99
 8001348:	dc16      	bgt.n	8001378 <__aeabi_i2f+0x70>
 800134a:	1f42      	subs	r2, r0, #5
 800134c:	2805      	cmp	r0, #5
 800134e:	d000      	beq.n	8001352 <__aeabi_i2f+0x4a>
 8001350:	4095      	lsls	r5, r2
 8001352:	002a      	movs	r2, r5
 8001354:	4811      	ldr	r0, [pc, #68]	@ (800139c <__aeabi_i2f+0x94>)
 8001356:	4002      	ands	r2, r0
 8001358:	076e      	lsls	r6, r5, #29
 800135a:	d009      	beq.n	8001370 <__aeabi_i2f+0x68>
 800135c:	260f      	movs	r6, #15
 800135e:	4035      	ands	r5, r6
 8001360:	2d04      	cmp	r5, #4
 8001362:	d005      	beq.n	8001370 <__aeabi_i2f+0x68>
 8001364:	3204      	adds	r2, #4
 8001366:	0155      	lsls	r5, r2, #5
 8001368:	d502      	bpl.n	8001370 <__aeabi_i2f+0x68>
 800136a:	239f      	movs	r3, #159	@ 0x9f
 800136c:	4002      	ands	r2, r0
 800136e:	1a5b      	subs	r3, r3, r1
 8001370:	0192      	lsls	r2, r2, #6
 8001372:	0a55      	lsrs	r5, r2, #9
 8001374:	b2d8      	uxtb	r0, r3
 8001376:	e7e1      	b.n	800133c <__aeabi_i2f+0x34>
 8001378:	2205      	movs	r2, #5
 800137a:	1a12      	subs	r2, r2, r0
 800137c:	0028      	movs	r0, r5
 800137e:	40d0      	lsrs	r0, r2
 8001380:	0002      	movs	r2, r0
 8001382:	0008      	movs	r0, r1
 8001384:	301b      	adds	r0, #27
 8001386:	4085      	lsls	r5, r0
 8001388:	0028      	movs	r0, r5
 800138a:	1e45      	subs	r5, r0, #1
 800138c:	41a8      	sbcs	r0, r5
 800138e:	4302      	orrs	r2, r0
 8001390:	0015      	movs	r5, r2
 8001392:	e7de      	b.n	8001352 <__aeabi_i2f+0x4a>
 8001394:	026d      	lsls	r5, r5, #9
 8001396:	2096      	movs	r0, #150	@ 0x96
 8001398:	0a6d      	lsrs	r5, r5, #9
 800139a:	e7cf      	b.n	800133c <__aeabi_i2f+0x34>
 800139c:	fbffffff 	.word	0xfbffffff

080013a0 <__aeabi_dadd>:
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	4657      	mov	r7, sl
 80013a4:	464e      	mov	r6, r9
 80013a6:	4645      	mov	r5, r8
 80013a8:	46de      	mov	lr, fp
 80013aa:	b5e0      	push	{r5, r6, r7, lr}
 80013ac:	b083      	sub	sp, #12
 80013ae:	9000      	str	r0, [sp, #0]
 80013b0:	9101      	str	r1, [sp, #4]
 80013b2:	030c      	lsls	r4, r1, #12
 80013b4:	004f      	lsls	r7, r1, #1
 80013b6:	0fce      	lsrs	r6, r1, #31
 80013b8:	0a61      	lsrs	r1, r4, #9
 80013ba:	9c00      	ldr	r4, [sp, #0]
 80013bc:	031d      	lsls	r5, r3, #12
 80013be:	0f64      	lsrs	r4, r4, #29
 80013c0:	430c      	orrs	r4, r1
 80013c2:	9900      	ldr	r1, [sp, #0]
 80013c4:	9200      	str	r2, [sp, #0]
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	00c8      	lsls	r0, r1, #3
 80013ca:	0059      	lsls	r1, r3, #1
 80013cc:	0d4b      	lsrs	r3, r1, #21
 80013ce:	4699      	mov	r9, r3
 80013d0:	9a00      	ldr	r2, [sp, #0]
 80013d2:	9b01      	ldr	r3, [sp, #4]
 80013d4:	0a6d      	lsrs	r5, r5, #9
 80013d6:	0fd9      	lsrs	r1, r3, #31
 80013d8:	0f53      	lsrs	r3, r2, #29
 80013da:	432b      	orrs	r3, r5
 80013dc:	469a      	mov	sl, r3
 80013de:	9b00      	ldr	r3, [sp, #0]
 80013e0:	0d7f      	lsrs	r7, r7, #21
 80013e2:	00da      	lsls	r2, r3, #3
 80013e4:	4694      	mov	ip, r2
 80013e6:	464a      	mov	r2, r9
 80013e8:	46b0      	mov	r8, r6
 80013ea:	1aba      	subs	r2, r7, r2
 80013ec:	428e      	cmp	r6, r1
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x52>
 80013f0:	e0b0      	b.n	8001554 <__aeabi_dadd+0x1b4>
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	dc00      	bgt.n	80013f8 <__aeabi_dadd+0x58>
 80013f6:	e078      	b.n	80014ea <__aeabi_dadd+0x14a>
 80013f8:	4649      	mov	r1, r9
 80013fa:	2900      	cmp	r1, #0
 80013fc:	d100      	bne.n	8001400 <__aeabi_dadd+0x60>
 80013fe:	e0e9      	b.n	80015d4 <__aeabi_dadd+0x234>
 8001400:	49c9      	ldr	r1, [pc, #804]	@ (8001728 <__aeabi_dadd+0x388>)
 8001402:	428f      	cmp	r7, r1
 8001404:	d100      	bne.n	8001408 <__aeabi_dadd+0x68>
 8001406:	e195      	b.n	8001734 <__aeabi_dadd+0x394>
 8001408:	2501      	movs	r5, #1
 800140a:	2a38      	cmp	r2, #56	@ 0x38
 800140c:	dc16      	bgt.n	800143c <__aeabi_dadd+0x9c>
 800140e:	2180      	movs	r1, #128	@ 0x80
 8001410:	4653      	mov	r3, sl
 8001412:	0409      	lsls	r1, r1, #16
 8001414:	430b      	orrs	r3, r1
 8001416:	469a      	mov	sl, r3
 8001418:	2a1f      	cmp	r2, #31
 800141a:	dd00      	ble.n	800141e <__aeabi_dadd+0x7e>
 800141c:	e1e7      	b.n	80017ee <__aeabi_dadd+0x44e>
 800141e:	2120      	movs	r1, #32
 8001420:	4655      	mov	r5, sl
 8001422:	1a8b      	subs	r3, r1, r2
 8001424:	4661      	mov	r1, ip
 8001426:	409d      	lsls	r5, r3
 8001428:	40d1      	lsrs	r1, r2
 800142a:	430d      	orrs	r5, r1
 800142c:	4661      	mov	r1, ip
 800142e:	4099      	lsls	r1, r3
 8001430:	1e4b      	subs	r3, r1, #1
 8001432:	4199      	sbcs	r1, r3
 8001434:	4653      	mov	r3, sl
 8001436:	40d3      	lsrs	r3, r2
 8001438:	430d      	orrs	r5, r1
 800143a:	1ae4      	subs	r4, r4, r3
 800143c:	1b45      	subs	r5, r0, r5
 800143e:	42a8      	cmp	r0, r5
 8001440:	4180      	sbcs	r0, r0
 8001442:	4240      	negs	r0, r0
 8001444:	1a24      	subs	r4, r4, r0
 8001446:	0223      	lsls	r3, r4, #8
 8001448:	d400      	bmi.n	800144c <__aeabi_dadd+0xac>
 800144a:	e10f      	b.n	800166c <__aeabi_dadd+0x2cc>
 800144c:	0264      	lsls	r4, r4, #9
 800144e:	0a64      	lsrs	r4, r4, #9
 8001450:	2c00      	cmp	r4, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dadd+0xb6>
 8001454:	e139      	b.n	80016ca <__aeabi_dadd+0x32a>
 8001456:	0020      	movs	r0, r4
 8001458:	f001 ff2a 	bl	80032b0 <__clzsi2>
 800145c:	0003      	movs	r3, r0
 800145e:	3b08      	subs	r3, #8
 8001460:	2120      	movs	r1, #32
 8001462:	0028      	movs	r0, r5
 8001464:	1aca      	subs	r2, r1, r3
 8001466:	40d0      	lsrs	r0, r2
 8001468:	409c      	lsls	r4, r3
 800146a:	0002      	movs	r2, r0
 800146c:	409d      	lsls	r5, r3
 800146e:	4322      	orrs	r2, r4
 8001470:	429f      	cmp	r7, r3
 8001472:	dd00      	ble.n	8001476 <__aeabi_dadd+0xd6>
 8001474:	e173      	b.n	800175e <__aeabi_dadd+0x3be>
 8001476:	1bd8      	subs	r0, r3, r7
 8001478:	3001      	adds	r0, #1
 800147a:	1a09      	subs	r1, r1, r0
 800147c:	002c      	movs	r4, r5
 800147e:	408d      	lsls	r5, r1
 8001480:	40c4      	lsrs	r4, r0
 8001482:	1e6b      	subs	r3, r5, #1
 8001484:	419d      	sbcs	r5, r3
 8001486:	0013      	movs	r3, r2
 8001488:	40c2      	lsrs	r2, r0
 800148a:	408b      	lsls	r3, r1
 800148c:	4325      	orrs	r5, r4
 800148e:	2700      	movs	r7, #0
 8001490:	0014      	movs	r4, r2
 8001492:	431d      	orrs	r5, r3
 8001494:	076b      	lsls	r3, r5, #29
 8001496:	d009      	beq.n	80014ac <__aeabi_dadd+0x10c>
 8001498:	230f      	movs	r3, #15
 800149a:	402b      	ands	r3, r5
 800149c:	2b04      	cmp	r3, #4
 800149e:	d005      	beq.n	80014ac <__aeabi_dadd+0x10c>
 80014a0:	1d2b      	adds	r3, r5, #4
 80014a2:	42ab      	cmp	r3, r5
 80014a4:	41ad      	sbcs	r5, r5
 80014a6:	426d      	negs	r5, r5
 80014a8:	1964      	adds	r4, r4, r5
 80014aa:	001d      	movs	r5, r3
 80014ac:	0223      	lsls	r3, r4, #8
 80014ae:	d400      	bmi.n	80014b2 <__aeabi_dadd+0x112>
 80014b0:	e12d      	b.n	800170e <__aeabi_dadd+0x36e>
 80014b2:	4a9d      	ldr	r2, [pc, #628]	@ (8001728 <__aeabi_dadd+0x388>)
 80014b4:	3701      	adds	r7, #1
 80014b6:	4297      	cmp	r7, r2
 80014b8:	d100      	bne.n	80014bc <__aeabi_dadd+0x11c>
 80014ba:	e0d3      	b.n	8001664 <__aeabi_dadd+0x2c4>
 80014bc:	4646      	mov	r6, r8
 80014be:	499b      	ldr	r1, [pc, #620]	@ (800172c <__aeabi_dadd+0x38c>)
 80014c0:	08ed      	lsrs	r5, r5, #3
 80014c2:	4021      	ands	r1, r4
 80014c4:	074a      	lsls	r2, r1, #29
 80014c6:	432a      	orrs	r2, r5
 80014c8:	057c      	lsls	r4, r7, #21
 80014ca:	024d      	lsls	r5, r1, #9
 80014cc:	0b2d      	lsrs	r5, r5, #12
 80014ce:	0d64      	lsrs	r4, r4, #21
 80014d0:	0524      	lsls	r4, r4, #20
 80014d2:	432c      	orrs	r4, r5
 80014d4:	07f6      	lsls	r6, r6, #31
 80014d6:	4334      	orrs	r4, r6
 80014d8:	0010      	movs	r0, r2
 80014da:	0021      	movs	r1, r4
 80014dc:	b003      	add	sp, #12
 80014de:	bcf0      	pop	{r4, r5, r6, r7}
 80014e0:	46bb      	mov	fp, r7
 80014e2:	46b2      	mov	sl, r6
 80014e4:	46a9      	mov	r9, r5
 80014e6:	46a0      	mov	r8, r4
 80014e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dadd+0x150>
 80014ee:	e084      	b.n	80015fa <__aeabi_dadd+0x25a>
 80014f0:	464a      	mov	r2, r9
 80014f2:	1bd2      	subs	r2, r2, r7
 80014f4:	2f00      	cmp	r7, #0
 80014f6:	d000      	beq.n	80014fa <__aeabi_dadd+0x15a>
 80014f8:	e16d      	b.n	80017d6 <__aeabi_dadd+0x436>
 80014fa:	0025      	movs	r5, r4
 80014fc:	4305      	orrs	r5, r0
 80014fe:	d100      	bne.n	8001502 <__aeabi_dadd+0x162>
 8001500:	e127      	b.n	8001752 <__aeabi_dadd+0x3b2>
 8001502:	1e56      	subs	r6, r2, #1
 8001504:	2a01      	cmp	r2, #1
 8001506:	d100      	bne.n	800150a <__aeabi_dadd+0x16a>
 8001508:	e23b      	b.n	8001982 <__aeabi_dadd+0x5e2>
 800150a:	4d87      	ldr	r5, [pc, #540]	@ (8001728 <__aeabi_dadd+0x388>)
 800150c:	42aa      	cmp	r2, r5
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x172>
 8001510:	e26a      	b.n	80019e8 <__aeabi_dadd+0x648>
 8001512:	2501      	movs	r5, #1
 8001514:	2e38      	cmp	r6, #56	@ 0x38
 8001516:	dc12      	bgt.n	800153e <__aeabi_dadd+0x19e>
 8001518:	0032      	movs	r2, r6
 800151a:	2a1f      	cmp	r2, #31
 800151c:	dd00      	ble.n	8001520 <__aeabi_dadd+0x180>
 800151e:	e1f8      	b.n	8001912 <__aeabi_dadd+0x572>
 8001520:	2620      	movs	r6, #32
 8001522:	0025      	movs	r5, r4
 8001524:	1ab6      	subs	r6, r6, r2
 8001526:	0007      	movs	r7, r0
 8001528:	4653      	mov	r3, sl
 800152a:	40b0      	lsls	r0, r6
 800152c:	40d4      	lsrs	r4, r2
 800152e:	40b5      	lsls	r5, r6
 8001530:	40d7      	lsrs	r7, r2
 8001532:	1e46      	subs	r6, r0, #1
 8001534:	41b0      	sbcs	r0, r6
 8001536:	1b1b      	subs	r3, r3, r4
 8001538:	469a      	mov	sl, r3
 800153a:	433d      	orrs	r5, r7
 800153c:	4305      	orrs	r5, r0
 800153e:	4662      	mov	r2, ip
 8001540:	1b55      	subs	r5, r2, r5
 8001542:	45ac      	cmp	ip, r5
 8001544:	4192      	sbcs	r2, r2
 8001546:	4653      	mov	r3, sl
 8001548:	4252      	negs	r2, r2
 800154a:	000e      	movs	r6, r1
 800154c:	464f      	mov	r7, r9
 800154e:	4688      	mov	r8, r1
 8001550:	1a9c      	subs	r4, r3, r2
 8001552:	e778      	b.n	8001446 <__aeabi_dadd+0xa6>
 8001554:	2a00      	cmp	r2, #0
 8001556:	dc00      	bgt.n	800155a <__aeabi_dadd+0x1ba>
 8001558:	e08e      	b.n	8001678 <__aeabi_dadd+0x2d8>
 800155a:	4649      	mov	r1, r9
 800155c:	2900      	cmp	r1, #0
 800155e:	d175      	bne.n	800164c <__aeabi_dadd+0x2ac>
 8001560:	4661      	mov	r1, ip
 8001562:	4653      	mov	r3, sl
 8001564:	4319      	orrs	r1, r3
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x1ca>
 8001568:	e0f6      	b.n	8001758 <__aeabi_dadd+0x3b8>
 800156a:	1e51      	subs	r1, r2, #1
 800156c:	2a01      	cmp	r2, #1
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x1d2>
 8001570:	e191      	b.n	8001896 <__aeabi_dadd+0x4f6>
 8001572:	4d6d      	ldr	r5, [pc, #436]	@ (8001728 <__aeabi_dadd+0x388>)
 8001574:	42aa      	cmp	r2, r5
 8001576:	d100      	bne.n	800157a <__aeabi_dadd+0x1da>
 8001578:	e0dc      	b.n	8001734 <__aeabi_dadd+0x394>
 800157a:	2501      	movs	r5, #1
 800157c:	2938      	cmp	r1, #56	@ 0x38
 800157e:	dc14      	bgt.n	80015aa <__aeabi_dadd+0x20a>
 8001580:	000a      	movs	r2, r1
 8001582:	2a1f      	cmp	r2, #31
 8001584:	dd00      	ble.n	8001588 <__aeabi_dadd+0x1e8>
 8001586:	e1a2      	b.n	80018ce <__aeabi_dadd+0x52e>
 8001588:	2120      	movs	r1, #32
 800158a:	4653      	mov	r3, sl
 800158c:	1a89      	subs	r1, r1, r2
 800158e:	408b      	lsls	r3, r1
 8001590:	001d      	movs	r5, r3
 8001592:	4663      	mov	r3, ip
 8001594:	40d3      	lsrs	r3, r2
 8001596:	431d      	orrs	r5, r3
 8001598:	4663      	mov	r3, ip
 800159a:	408b      	lsls	r3, r1
 800159c:	0019      	movs	r1, r3
 800159e:	1e4b      	subs	r3, r1, #1
 80015a0:	4199      	sbcs	r1, r3
 80015a2:	4653      	mov	r3, sl
 80015a4:	40d3      	lsrs	r3, r2
 80015a6:	430d      	orrs	r5, r1
 80015a8:	18e4      	adds	r4, r4, r3
 80015aa:	182d      	adds	r5, r5, r0
 80015ac:	4285      	cmp	r5, r0
 80015ae:	4180      	sbcs	r0, r0
 80015b0:	4240      	negs	r0, r0
 80015b2:	1824      	adds	r4, r4, r0
 80015b4:	0223      	lsls	r3, r4, #8
 80015b6:	d559      	bpl.n	800166c <__aeabi_dadd+0x2cc>
 80015b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001728 <__aeabi_dadd+0x388>)
 80015ba:	3701      	adds	r7, #1
 80015bc:	429f      	cmp	r7, r3
 80015be:	d051      	beq.n	8001664 <__aeabi_dadd+0x2c4>
 80015c0:	2101      	movs	r1, #1
 80015c2:	4b5a      	ldr	r3, [pc, #360]	@ (800172c <__aeabi_dadd+0x38c>)
 80015c4:	086a      	lsrs	r2, r5, #1
 80015c6:	401c      	ands	r4, r3
 80015c8:	4029      	ands	r1, r5
 80015ca:	430a      	orrs	r2, r1
 80015cc:	07e5      	lsls	r5, r4, #31
 80015ce:	4315      	orrs	r5, r2
 80015d0:	0864      	lsrs	r4, r4, #1
 80015d2:	e75f      	b.n	8001494 <__aeabi_dadd+0xf4>
 80015d4:	4661      	mov	r1, ip
 80015d6:	4653      	mov	r3, sl
 80015d8:	4319      	orrs	r1, r3
 80015da:	d100      	bne.n	80015de <__aeabi_dadd+0x23e>
 80015dc:	e0bc      	b.n	8001758 <__aeabi_dadd+0x3b8>
 80015de:	1e51      	subs	r1, r2, #1
 80015e0:	2a01      	cmp	r2, #1
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dadd+0x246>
 80015e4:	e164      	b.n	80018b0 <__aeabi_dadd+0x510>
 80015e6:	4d50      	ldr	r5, [pc, #320]	@ (8001728 <__aeabi_dadd+0x388>)
 80015e8:	42aa      	cmp	r2, r5
 80015ea:	d100      	bne.n	80015ee <__aeabi_dadd+0x24e>
 80015ec:	e16a      	b.n	80018c4 <__aeabi_dadd+0x524>
 80015ee:	2501      	movs	r5, #1
 80015f0:	2938      	cmp	r1, #56	@ 0x38
 80015f2:	dd00      	ble.n	80015f6 <__aeabi_dadd+0x256>
 80015f4:	e722      	b.n	800143c <__aeabi_dadd+0x9c>
 80015f6:	000a      	movs	r2, r1
 80015f8:	e70e      	b.n	8001418 <__aeabi_dadd+0x78>
 80015fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001730 <__aeabi_dadd+0x390>)
 80015fc:	1c7d      	adds	r5, r7, #1
 80015fe:	4215      	tst	r5, r2
 8001600:	d000      	beq.n	8001604 <__aeabi_dadd+0x264>
 8001602:	e0d0      	b.n	80017a6 <__aeabi_dadd+0x406>
 8001604:	0025      	movs	r5, r4
 8001606:	4662      	mov	r2, ip
 8001608:	4653      	mov	r3, sl
 800160a:	4305      	orrs	r5, r0
 800160c:	431a      	orrs	r2, r3
 800160e:	2f00      	cmp	r7, #0
 8001610:	d000      	beq.n	8001614 <__aeabi_dadd+0x274>
 8001612:	e137      	b.n	8001884 <__aeabi_dadd+0x4e4>
 8001614:	2d00      	cmp	r5, #0
 8001616:	d100      	bne.n	800161a <__aeabi_dadd+0x27a>
 8001618:	e1a8      	b.n	800196c <__aeabi_dadd+0x5cc>
 800161a:	2a00      	cmp	r2, #0
 800161c:	d100      	bne.n	8001620 <__aeabi_dadd+0x280>
 800161e:	e16a      	b.n	80018f6 <__aeabi_dadd+0x556>
 8001620:	4663      	mov	r3, ip
 8001622:	1ac5      	subs	r5, r0, r3
 8001624:	4653      	mov	r3, sl
 8001626:	1ae2      	subs	r2, r4, r3
 8001628:	42a8      	cmp	r0, r5
 800162a:	419b      	sbcs	r3, r3
 800162c:	425b      	negs	r3, r3
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	021a      	lsls	r2, r3, #8
 8001632:	d400      	bmi.n	8001636 <__aeabi_dadd+0x296>
 8001634:	e203      	b.n	8001a3e <__aeabi_dadd+0x69e>
 8001636:	4663      	mov	r3, ip
 8001638:	1a1d      	subs	r5, r3, r0
 800163a:	45ac      	cmp	ip, r5
 800163c:	4192      	sbcs	r2, r2
 800163e:	4653      	mov	r3, sl
 8001640:	4252      	negs	r2, r2
 8001642:	1b1c      	subs	r4, r3, r4
 8001644:	000e      	movs	r6, r1
 8001646:	4688      	mov	r8, r1
 8001648:	1aa4      	subs	r4, r4, r2
 800164a:	e723      	b.n	8001494 <__aeabi_dadd+0xf4>
 800164c:	4936      	ldr	r1, [pc, #216]	@ (8001728 <__aeabi_dadd+0x388>)
 800164e:	428f      	cmp	r7, r1
 8001650:	d070      	beq.n	8001734 <__aeabi_dadd+0x394>
 8001652:	2501      	movs	r5, #1
 8001654:	2a38      	cmp	r2, #56	@ 0x38
 8001656:	dca8      	bgt.n	80015aa <__aeabi_dadd+0x20a>
 8001658:	2180      	movs	r1, #128	@ 0x80
 800165a:	4653      	mov	r3, sl
 800165c:	0409      	lsls	r1, r1, #16
 800165e:	430b      	orrs	r3, r1
 8001660:	469a      	mov	sl, r3
 8001662:	e78e      	b.n	8001582 <__aeabi_dadd+0x1e2>
 8001664:	003c      	movs	r4, r7
 8001666:	2500      	movs	r5, #0
 8001668:	2200      	movs	r2, #0
 800166a:	e731      	b.n	80014d0 <__aeabi_dadd+0x130>
 800166c:	2307      	movs	r3, #7
 800166e:	402b      	ands	r3, r5
 8001670:	2b00      	cmp	r3, #0
 8001672:	d000      	beq.n	8001676 <__aeabi_dadd+0x2d6>
 8001674:	e710      	b.n	8001498 <__aeabi_dadd+0xf8>
 8001676:	e093      	b.n	80017a0 <__aeabi_dadd+0x400>
 8001678:	2a00      	cmp	r2, #0
 800167a:	d074      	beq.n	8001766 <__aeabi_dadd+0x3c6>
 800167c:	464a      	mov	r2, r9
 800167e:	1bd2      	subs	r2, r2, r7
 8001680:	2f00      	cmp	r7, #0
 8001682:	d100      	bne.n	8001686 <__aeabi_dadd+0x2e6>
 8001684:	e0c7      	b.n	8001816 <__aeabi_dadd+0x476>
 8001686:	4928      	ldr	r1, [pc, #160]	@ (8001728 <__aeabi_dadd+0x388>)
 8001688:	4589      	cmp	r9, r1
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x2ee>
 800168c:	e185      	b.n	800199a <__aeabi_dadd+0x5fa>
 800168e:	2501      	movs	r5, #1
 8001690:	2a38      	cmp	r2, #56	@ 0x38
 8001692:	dc12      	bgt.n	80016ba <__aeabi_dadd+0x31a>
 8001694:	2180      	movs	r1, #128	@ 0x80
 8001696:	0409      	lsls	r1, r1, #16
 8001698:	430c      	orrs	r4, r1
 800169a:	2a1f      	cmp	r2, #31
 800169c:	dd00      	ble.n	80016a0 <__aeabi_dadd+0x300>
 800169e:	e1ab      	b.n	80019f8 <__aeabi_dadd+0x658>
 80016a0:	2120      	movs	r1, #32
 80016a2:	0025      	movs	r5, r4
 80016a4:	1a89      	subs	r1, r1, r2
 80016a6:	0007      	movs	r7, r0
 80016a8:	4088      	lsls	r0, r1
 80016aa:	408d      	lsls	r5, r1
 80016ac:	40d7      	lsrs	r7, r2
 80016ae:	1e41      	subs	r1, r0, #1
 80016b0:	4188      	sbcs	r0, r1
 80016b2:	40d4      	lsrs	r4, r2
 80016b4:	433d      	orrs	r5, r7
 80016b6:	4305      	orrs	r5, r0
 80016b8:	44a2      	add	sl, r4
 80016ba:	4465      	add	r5, ip
 80016bc:	4565      	cmp	r5, ip
 80016be:	4192      	sbcs	r2, r2
 80016c0:	4252      	negs	r2, r2
 80016c2:	4452      	add	r2, sl
 80016c4:	0014      	movs	r4, r2
 80016c6:	464f      	mov	r7, r9
 80016c8:	e774      	b.n	80015b4 <__aeabi_dadd+0x214>
 80016ca:	0028      	movs	r0, r5
 80016cc:	f001 fdf0 	bl	80032b0 <__clzsi2>
 80016d0:	0003      	movs	r3, r0
 80016d2:	3318      	adds	r3, #24
 80016d4:	2b1f      	cmp	r3, #31
 80016d6:	dc00      	bgt.n	80016da <__aeabi_dadd+0x33a>
 80016d8:	e6c2      	b.n	8001460 <__aeabi_dadd+0xc0>
 80016da:	002a      	movs	r2, r5
 80016dc:	3808      	subs	r0, #8
 80016de:	4082      	lsls	r2, r0
 80016e0:	429f      	cmp	r7, r3
 80016e2:	dd00      	ble.n	80016e6 <__aeabi_dadd+0x346>
 80016e4:	e0a9      	b.n	800183a <__aeabi_dadd+0x49a>
 80016e6:	1bdb      	subs	r3, r3, r7
 80016e8:	1c58      	adds	r0, r3, #1
 80016ea:	281f      	cmp	r0, #31
 80016ec:	dc00      	bgt.n	80016f0 <__aeabi_dadd+0x350>
 80016ee:	e1ac      	b.n	8001a4a <__aeabi_dadd+0x6aa>
 80016f0:	0015      	movs	r5, r2
 80016f2:	3b1f      	subs	r3, #31
 80016f4:	40dd      	lsrs	r5, r3
 80016f6:	2820      	cmp	r0, #32
 80016f8:	d005      	beq.n	8001706 <__aeabi_dadd+0x366>
 80016fa:	2340      	movs	r3, #64	@ 0x40
 80016fc:	1a1b      	subs	r3, r3, r0
 80016fe:	409a      	lsls	r2, r3
 8001700:	1e53      	subs	r3, r2, #1
 8001702:	419a      	sbcs	r2, r3
 8001704:	4315      	orrs	r5, r2
 8001706:	2307      	movs	r3, #7
 8001708:	2700      	movs	r7, #0
 800170a:	402b      	ands	r3, r5
 800170c:	e7b0      	b.n	8001670 <__aeabi_dadd+0x2d0>
 800170e:	08ed      	lsrs	r5, r5, #3
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <__aeabi_dadd+0x388>)
 8001712:	0762      	lsls	r2, r4, #29
 8001714:	432a      	orrs	r2, r5
 8001716:	08e4      	lsrs	r4, r4, #3
 8001718:	429f      	cmp	r7, r3
 800171a:	d00f      	beq.n	800173c <__aeabi_dadd+0x39c>
 800171c:	0324      	lsls	r4, r4, #12
 800171e:	0b25      	lsrs	r5, r4, #12
 8001720:	057c      	lsls	r4, r7, #21
 8001722:	0d64      	lsrs	r4, r4, #21
 8001724:	e6d4      	b.n	80014d0 <__aeabi_dadd+0x130>
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	000007ff 	.word	0x000007ff
 800172c:	ff7fffff 	.word	0xff7fffff
 8001730:	000007fe 	.word	0x000007fe
 8001734:	08c0      	lsrs	r0, r0, #3
 8001736:	0762      	lsls	r2, r4, #29
 8001738:	4302      	orrs	r2, r0
 800173a:	08e4      	lsrs	r4, r4, #3
 800173c:	0013      	movs	r3, r2
 800173e:	4323      	orrs	r3, r4
 8001740:	d100      	bne.n	8001744 <__aeabi_dadd+0x3a4>
 8001742:	e186      	b.n	8001a52 <__aeabi_dadd+0x6b2>
 8001744:	2580      	movs	r5, #128	@ 0x80
 8001746:	032d      	lsls	r5, r5, #12
 8001748:	4325      	orrs	r5, r4
 800174a:	032d      	lsls	r5, r5, #12
 800174c:	4cc3      	ldr	r4, [pc, #780]	@ (8001a5c <__aeabi_dadd+0x6bc>)
 800174e:	0b2d      	lsrs	r5, r5, #12
 8001750:	e6be      	b.n	80014d0 <__aeabi_dadd+0x130>
 8001752:	4660      	mov	r0, ip
 8001754:	4654      	mov	r4, sl
 8001756:	000e      	movs	r6, r1
 8001758:	0017      	movs	r7, r2
 800175a:	08c5      	lsrs	r5, r0, #3
 800175c:	e7d8      	b.n	8001710 <__aeabi_dadd+0x370>
 800175e:	4cc0      	ldr	r4, [pc, #768]	@ (8001a60 <__aeabi_dadd+0x6c0>)
 8001760:	1aff      	subs	r7, r7, r3
 8001762:	4014      	ands	r4, r2
 8001764:	e696      	b.n	8001494 <__aeabi_dadd+0xf4>
 8001766:	4abf      	ldr	r2, [pc, #764]	@ (8001a64 <__aeabi_dadd+0x6c4>)
 8001768:	1c79      	adds	r1, r7, #1
 800176a:	4211      	tst	r1, r2
 800176c:	d16b      	bne.n	8001846 <__aeabi_dadd+0x4a6>
 800176e:	0022      	movs	r2, r4
 8001770:	4302      	orrs	r2, r0
 8001772:	2f00      	cmp	r7, #0
 8001774:	d000      	beq.n	8001778 <__aeabi_dadd+0x3d8>
 8001776:	e0db      	b.n	8001930 <__aeabi_dadd+0x590>
 8001778:	2a00      	cmp	r2, #0
 800177a:	d100      	bne.n	800177e <__aeabi_dadd+0x3de>
 800177c:	e12d      	b.n	80019da <__aeabi_dadd+0x63a>
 800177e:	4662      	mov	r2, ip
 8001780:	4653      	mov	r3, sl
 8001782:	431a      	orrs	r2, r3
 8001784:	d100      	bne.n	8001788 <__aeabi_dadd+0x3e8>
 8001786:	e0b6      	b.n	80018f6 <__aeabi_dadd+0x556>
 8001788:	4663      	mov	r3, ip
 800178a:	18c5      	adds	r5, r0, r3
 800178c:	4285      	cmp	r5, r0
 800178e:	4180      	sbcs	r0, r0
 8001790:	4454      	add	r4, sl
 8001792:	4240      	negs	r0, r0
 8001794:	1824      	adds	r4, r4, r0
 8001796:	0223      	lsls	r3, r4, #8
 8001798:	d502      	bpl.n	80017a0 <__aeabi_dadd+0x400>
 800179a:	000f      	movs	r7, r1
 800179c:	4bb0      	ldr	r3, [pc, #704]	@ (8001a60 <__aeabi_dadd+0x6c0>)
 800179e:	401c      	ands	r4, r3
 80017a0:	003a      	movs	r2, r7
 80017a2:	0028      	movs	r0, r5
 80017a4:	e7d8      	b.n	8001758 <__aeabi_dadd+0x3b8>
 80017a6:	4662      	mov	r2, ip
 80017a8:	1a85      	subs	r5, r0, r2
 80017aa:	42a8      	cmp	r0, r5
 80017ac:	4192      	sbcs	r2, r2
 80017ae:	4653      	mov	r3, sl
 80017b0:	4252      	negs	r2, r2
 80017b2:	4691      	mov	r9, r2
 80017b4:	1ae3      	subs	r3, r4, r3
 80017b6:	001a      	movs	r2, r3
 80017b8:	464b      	mov	r3, r9
 80017ba:	1ad2      	subs	r2, r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	4691      	mov	r9, r2
 80017c0:	021a      	lsls	r2, r3, #8
 80017c2:	d454      	bmi.n	800186e <__aeabi_dadd+0x4ce>
 80017c4:	464a      	mov	r2, r9
 80017c6:	464c      	mov	r4, r9
 80017c8:	432a      	orrs	r2, r5
 80017ca:	d000      	beq.n	80017ce <__aeabi_dadd+0x42e>
 80017cc:	e640      	b.n	8001450 <__aeabi_dadd+0xb0>
 80017ce:	2600      	movs	r6, #0
 80017d0:	2400      	movs	r4, #0
 80017d2:	2500      	movs	r5, #0
 80017d4:	e67c      	b.n	80014d0 <__aeabi_dadd+0x130>
 80017d6:	4da1      	ldr	r5, [pc, #644]	@ (8001a5c <__aeabi_dadd+0x6bc>)
 80017d8:	45a9      	cmp	r9, r5
 80017da:	d100      	bne.n	80017de <__aeabi_dadd+0x43e>
 80017dc:	e090      	b.n	8001900 <__aeabi_dadd+0x560>
 80017de:	2501      	movs	r5, #1
 80017e0:	2a38      	cmp	r2, #56	@ 0x38
 80017e2:	dd00      	ble.n	80017e6 <__aeabi_dadd+0x446>
 80017e4:	e6ab      	b.n	800153e <__aeabi_dadd+0x19e>
 80017e6:	2580      	movs	r5, #128	@ 0x80
 80017e8:	042d      	lsls	r5, r5, #16
 80017ea:	432c      	orrs	r4, r5
 80017ec:	e695      	b.n	800151a <__aeabi_dadd+0x17a>
 80017ee:	0011      	movs	r1, r2
 80017f0:	4655      	mov	r5, sl
 80017f2:	3920      	subs	r1, #32
 80017f4:	40cd      	lsrs	r5, r1
 80017f6:	46a9      	mov	r9, r5
 80017f8:	2a20      	cmp	r2, #32
 80017fa:	d006      	beq.n	800180a <__aeabi_dadd+0x46a>
 80017fc:	2140      	movs	r1, #64	@ 0x40
 80017fe:	4653      	mov	r3, sl
 8001800:	1a8a      	subs	r2, r1, r2
 8001802:	4093      	lsls	r3, r2
 8001804:	4662      	mov	r2, ip
 8001806:	431a      	orrs	r2, r3
 8001808:	4694      	mov	ip, r2
 800180a:	4665      	mov	r5, ip
 800180c:	1e6b      	subs	r3, r5, #1
 800180e:	419d      	sbcs	r5, r3
 8001810:	464b      	mov	r3, r9
 8001812:	431d      	orrs	r5, r3
 8001814:	e612      	b.n	800143c <__aeabi_dadd+0x9c>
 8001816:	0021      	movs	r1, r4
 8001818:	4301      	orrs	r1, r0
 800181a:	d100      	bne.n	800181e <__aeabi_dadd+0x47e>
 800181c:	e0c4      	b.n	80019a8 <__aeabi_dadd+0x608>
 800181e:	1e51      	subs	r1, r2, #1
 8001820:	2a01      	cmp	r2, #1
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x486>
 8001824:	e0fb      	b.n	8001a1e <__aeabi_dadd+0x67e>
 8001826:	4d8d      	ldr	r5, [pc, #564]	@ (8001a5c <__aeabi_dadd+0x6bc>)
 8001828:	42aa      	cmp	r2, r5
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x48e>
 800182c:	e0b5      	b.n	800199a <__aeabi_dadd+0x5fa>
 800182e:	2501      	movs	r5, #1
 8001830:	2938      	cmp	r1, #56	@ 0x38
 8001832:	dd00      	ble.n	8001836 <__aeabi_dadd+0x496>
 8001834:	e741      	b.n	80016ba <__aeabi_dadd+0x31a>
 8001836:	000a      	movs	r2, r1
 8001838:	e72f      	b.n	800169a <__aeabi_dadd+0x2fa>
 800183a:	4c89      	ldr	r4, [pc, #548]	@ (8001a60 <__aeabi_dadd+0x6c0>)
 800183c:	1aff      	subs	r7, r7, r3
 800183e:	4014      	ands	r4, r2
 8001840:	0762      	lsls	r2, r4, #29
 8001842:	08e4      	lsrs	r4, r4, #3
 8001844:	e76a      	b.n	800171c <__aeabi_dadd+0x37c>
 8001846:	4a85      	ldr	r2, [pc, #532]	@ (8001a5c <__aeabi_dadd+0x6bc>)
 8001848:	4291      	cmp	r1, r2
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x4ae>
 800184c:	e0e3      	b.n	8001a16 <__aeabi_dadd+0x676>
 800184e:	4663      	mov	r3, ip
 8001850:	18c2      	adds	r2, r0, r3
 8001852:	4282      	cmp	r2, r0
 8001854:	4180      	sbcs	r0, r0
 8001856:	0023      	movs	r3, r4
 8001858:	4240      	negs	r0, r0
 800185a:	4453      	add	r3, sl
 800185c:	181b      	adds	r3, r3, r0
 800185e:	07dd      	lsls	r5, r3, #31
 8001860:	085c      	lsrs	r4, r3, #1
 8001862:	2307      	movs	r3, #7
 8001864:	0852      	lsrs	r2, r2, #1
 8001866:	4315      	orrs	r5, r2
 8001868:	000f      	movs	r7, r1
 800186a:	402b      	ands	r3, r5
 800186c:	e700      	b.n	8001670 <__aeabi_dadd+0x2d0>
 800186e:	4663      	mov	r3, ip
 8001870:	1a1d      	subs	r5, r3, r0
 8001872:	45ac      	cmp	ip, r5
 8001874:	4192      	sbcs	r2, r2
 8001876:	4653      	mov	r3, sl
 8001878:	4252      	negs	r2, r2
 800187a:	1b1c      	subs	r4, r3, r4
 800187c:	000e      	movs	r6, r1
 800187e:	4688      	mov	r8, r1
 8001880:	1aa4      	subs	r4, r4, r2
 8001882:	e5e5      	b.n	8001450 <__aeabi_dadd+0xb0>
 8001884:	2d00      	cmp	r5, #0
 8001886:	d000      	beq.n	800188a <__aeabi_dadd+0x4ea>
 8001888:	e091      	b.n	80019ae <__aeabi_dadd+0x60e>
 800188a:	2a00      	cmp	r2, #0
 800188c:	d138      	bne.n	8001900 <__aeabi_dadd+0x560>
 800188e:	2480      	movs	r4, #128	@ 0x80
 8001890:	2600      	movs	r6, #0
 8001892:	0324      	lsls	r4, r4, #12
 8001894:	e756      	b.n	8001744 <__aeabi_dadd+0x3a4>
 8001896:	4663      	mov	r3, ip
 8001898:	18c5      	adds	r5, r0, r3
 800189a:	4285      	cmp	r5, r0
 800189c:	4180      	sbcs	r0, r0
 800189e:	4454      	add	r4, sl
 80018a0:	4240      	negs	r0, r0
 80018a2:	1824      	adds	r4, r4, r0
 80018a4:	2701      	movs	r7, #1
 80018a6:	0223      	lsls	r3, r4, #8
 80018a8:	d400      	bmi.n	80018ac <__aeabi_dadd+0x50c>
 80018aa:	e6df      	b.n	800166c <__aeabi_dadd+0x2cc>
 80018ac:	2702      	movs	r7, #2
 80018ae:	e687      	b.n	80015c0 <__aeabi_dadd+0x220>
 80018b0:	4663      	mov	r3, ip
 80018b2:	1ac5      	subs	r5, r0, r3
 80018b4:	42a8      	cmp	r0, r5
 80018b6:	4180      	sbcs	r0, r0
 80018b8:	4653      	mov	r3, sl
 80018ba:	4240      	negs	r0, r0
 80018bc:	1ae4      	subs	r4, r4, r3
 80018be:	2701      	movs	r7, #1
 80018c0:	1a24      	subs	r4, r4, r0
 80018c2:	e5c0      	b.n	8001446 <__aeabi_dadd+0xa6>
 80018c4:	0762      	lsls	r2, r4, #29
 80018c6:	08c0      	lsrs	r0, r0, #3
 80018c8:	4302      	orrs	r2, r0
 80018ca:	08e4      	lsrs	r4, r4, #3
 80018cc:	e736      	b.n	800173c <__aeabi_dadd+0x39c>
 80018ce:	0011      	movs	r1, r2
 80018d0:	4653      	mov	r3, sl
 80018d2:	3920      	subs	r1, #32
 80018d4:	40cb      	lsrs	r3, r1
 80018d6:	4699      	mov	r9, r3
 80018d8:	2a20      	cmp	r2, #32
 80018da:	d006      	beq.n	80018ea <__aeabi_dadd+0x54a>
 80018dc:	2140      	movs	r1, #64	@ 0x40
 80018de:	4653      	mov	r3, sl
 80018e0:	1a8a      	subs	r2, r1, r2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	4662      	mov	r2, ip
 80018e6:	431a      	orrs	r2, r3
 80018e8:	4694      	mov	ip, r2
 80018ea:	4665      	mov	r5, ip
 80018ec:	1e6b      	subs	r3, r5, #1
 80018ee:	419d      	sbcs	r5, r3
 80018f0:	464b      	mov	r3, r9
 80018f2:	431d      	orrs	r5, r3
 80018f4:	e659      	b.n	80015aa <__aeabi_dadd+0x20a>
 80018f6:	0762      	lsls	r2, r4, #29
 80018f8:	08c0      	lsrs	r0, r0, #3
 80018fa:	4302      	orrs	r2, r0
 80018fc:	08e4      	lsrs	r4, r4, #3
 80018fe:	e70d      	b.n	800171c <__aeabi_dadd+0x37c>
 8001900:	4653      	mov	r3, sl
 8001902:	075a      	lsls	r2, r3, #29
 8001904:	4663      	mov	r3, ip
 8001906:	08d8      	lsrs	r0, r3, #3
 8001908:	4653      	mov	r3, sl
 800190a:	000e      	movs	r6, r1
 800190c:	4302      	orrs	r2, r0
 800190e:	08dc      	lsrs	r4, r3, #3
 8001910:	e714      	b.n	800173c <__aeabi_dadd+0x39c>
 8001912:	0015      	movs	r5, r2
 8001914:	0026      	movs	r6, r4
 8001916:	3d20      	subs	r5, #32
 8001918:	40ee      	lsrs	r6, r5
 800191a:	2a20      	cmp	r2, #32
 800191c:	d003      	beq.n	8001926 <__aeabi_dadd+0x586>
 800191e:	2540      	movs	r5, #64	@ 0x40
 8001920:	1aaa      	subs	r2, r5, r2
 8001922:	4094      	lsls	r4, r2
 8001924:	4320      	orrs	r0, r4
 8001926:	1e42      	subs	r2, r0, #1
 8001928:	4190      	sbcs	r0, r2
 800192a:	0005      	movs	r5, r0
 800192c:	4335      	orrs	r5, r6
 800192e:	e606      	b.n	800153e <__aeabi_dadd+0x19e>
 8001930:	2a00      	cmp	r2, #0
 8001932:	d07c      	beq.n	8001a2e <__aeabi_dadd+0x68e>
 8001934:	4662      	mov	r2, ip
 8001936:	4653      	mov	r3, sl
 8001938:	08c0      	lsrs	r0, r0, #3
 800193a:	431a      	orrs	r2, r3
 800193c:	d100      	bne.n	8001940 <__aeabi_dadd+0x5a0>
 800193e:	e6fa      	b.n	8001736 <__aeabi_dadd+0x396>
 8001940:	0762      	lsls	r2, r4, #29
 8001942:	4310      	orrs	r0, r2
 8001944:	2280      	movs	r2, #128	@ 0x80
 8001946:	08e4      	lsrs	r4, r4, #3
 8001948:	0312      	lsls	r2, r2, #12
 800194a:	4214      	tst	r4, r2
 800194c:	d008      	beq.n	8001960 <__aeabi_dadd+0x5c0>
 800194e:	08d9      	lsrs	r1, r3, #3
 8001950:	4211      	tst	r1, r2
 8001952:	d105      	bne.n	8001960 <__aeabi_dadd+0x5c0>
 8001954:	4663      	mov	r3, ip
 8001956:	08d8      	lsrs	r0, r3, #3
 8001958:	4653      	mov	r3, sl
 800195a:	000c      	movs	r4, r1
 800195c:	075b      	lsls	r3, r3, #29
 800195e:	4318      	orrs	r0, r3
 8001960:	0f42      	lsrs	r2, r0, #29
 8001962:	00c0      	lsls	r0, r0, #3
 8001964:	08c0      	lsrs	r0, r0, #3
 8001966:	0752      	lsls	r2, r2, #29
 8001968:	4302      	orrs	r2, r0
 800196a:	e6e7      	b.n	800173c <__aeabi_dadd+0x39c>
 800196c:	2a00      	cmp	r2, #0
 800196e:	d100      	bne.n	8001972 <__aeabi_dadd+0x5d2>
 8001970:	e72d      	b.n	80017ce <__aeabi_dadd+0x42e>
 8001972:	4663      	mov	r3, ip
 8001974:	08d8      	lsrs	r0, r3, #3
 8001976:	4653      	mov	r3, sl
 8001978:	075a      	lsls	r2, r3, #29
 800197a:	000e      	movs	r6, r1
 800197c:	4302      	orrs	r2, r0
 800197e:	08dc      	lsrs	r4, r3, #3
 8001980:	e6cc      	b.n	800171c <__aeabi_dadd+0x37c>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	3701      	adds	r7, #1
 8001998:	e555      	b.n	8001446 <__aeabi_dadd+0xa6>
 800199a:	4663      	mov	r3, ip
 800199c:	08d9      	lsrs	r1, r3, #3
 800199e:	4653      	mov	r3, sl
 80019a0:	075a      	lsls	r2, r3, #29
 80019a2:	430a      	orrs	r2, r1
 80019a4:	08dc      	lsrs	r4, r3, #3
 80019a6:	e6c9      	b.n	800173c <__aeabi_dadd+0x39c>
 80019a8:	4660      	mov	r0, ip
 80019aa:	4654      	mov	r4, sl
 80019ac:	e6d4      	b.n	8001758 <__aeabi_dadd+0x3b8>
 80019ae:	08c0      	lsrs	r0, r0, #3
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x616>
 80019b4:	e6bf      	b.n	8001736 <__aeabi_dadd+0x396>
 80019b6:	0762      	lsls	r2, r4, #29
 80019b8:	4310      	orrs	r0, r2
 80019ba:	2280      	movs	r2, #128	@ 0x80
 80019bc:	08e4      	lsrs	r4, r4, #3
 80019be:	0312      	lsls	r2, r2, #12
 80019c0:	4214      	tst	r4, r2
 80019c2:	d0cd      	beq.n	8001960 <__aeabi_dadd+0x5c0>
 80019c4:	08dd      	lsrs	r5, r3, #3
 80019c6:	4215      	tst	r5, r2
 80019c8:	d1ca      	bne.n	8001960 <__aeabi_dadd+0x5c0>
 80019ca:	4663      	mov	r3, ip
 80019cc:	08d8      	lsrs	r0, r3, #3
 80019ce:	4653      	mov	r3, sl
 80019d0:	075b      	lsls	r3, r3, #29
 80019d2:	000e      	movs	r6, r1
 80019d4:	002c      	movs	r4, r5
 80019d6:	4318      	orrs	r0, r3
 80019d8:	e7c2      	b.n	8001960 <__aeabi_dadd+0x5c0>
 80019da:	4663      	mov	r3, ip
 80019dc:	08d9      	lsrs	r1, r3, #3
 80019de:	4653      	mov	r3, sl
 80019e0:	075a      	lsls	r2, r3, #29
 80019e2:	430a      	orrs	r2, r1
 80019e4:	08dc      	lsrs	r4, r3, #3
 80019e6:	e699      	b.n	800171c <__aeabi_dadd+0x37c>
 80019e8:	4663      	mov	r3, ip
 80019ea:	08d8      	lsrs	r0, r3, #3
 80019ec:	4653      	mov	r3, sl
 80019ee:	075a      	lsls	r2, r3, #29
 80019f0:	000e      	movs	r6, r1
 80019f2:	4302      	orrs	r2, r0
 80019f4:	08dc      	lsrs	r4, r3, #3
 80019f6:	e6a1      	b.n	800173c <__aeabi_dadd+0x39c>
 80019f8:	0011      	movs	r1, r2
 80019fa:	0027      	movs	r7, r4
 80019fc:	3920      	subs	r1, #32
 80019fe:	40cf      	lsrs	r7, r1
 8001a00:	2a20      	cmp	r2, #32
 8001a02:	d003      	beq.n	8001a0c <__aeabi_dadd+0x66c>
 8001a04:	2140      	movs	r1, #64	@ 0x40
 8001a06:	1a8a      	subs	r2, r1, r2
 8001a08:	4094      	lsls	r4, r2
 8001a0a:	4320      	orrs	r0, r4
 8001a0c:	1e42      	subs	r2, r0, #1
 8001a0e:	4190      	sbcs	r0, r2
 8001a10:	0005      	movs	r5, r0
 8001a12:	433d      	orrs	r5, r7
 8001a14:	e651      	b.n	80016ba <__aeabi_dadd+0x31a>
 8001a16:	000c      	movs	r4, r1
 8001a18:	2500      	movs	r5, #0
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	e558      	b.n	80014d0 <__aeabi_dadd+0x130>
 8001a1e:	4460      	add	r0, ip
 8001a20:	4560      	cmp	r0, ip
 8001a22:	4192      	sbcs	r2, r2
 8001a24:	4454      	add	r4, sl
 8001a26:	4252      	negs	r2, r2
 8001a28:	0005      	movs	r5, r0
 8001a2a:	18a4      	adds	r4, r4, r2
 8001a2c:	e73a      	b.n	80018a4 <__aeabi_dadd+0x504>
 8001a2e:	4653      	mov	r3, sl
 8001a30:	075a      	lsls	r2, r3, #29
 8001a32:	4663      	mov	r3, ip
 8001a34:	08d9      	lsrs	r1, r3, #3
 8001a36:	4653      	mov	r3, sl
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	08dc      	lsrs	r4, r3, #3
 8001a3c:	e67e      	b.n	800173c <__aeabi_dadd+0x39c>
 8001a3e:	001a      	movs	r2, r3
 8001a40:	001c      	movs	r4, r3
 8001a42:	432a      	orrs	r2, r5
 8001a44:	d000      	beq.n	8001a48 <__aeabi_dadd+0x6a8>
 8001a46:	e6ab      	b.n	80017a0 <__aeabi_dadd+0x400>
 8001a48:	e6c1      	b.n	80017ce <__aeabi_dadd+0x42e>
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	1a09      	subs	r1, r1, r0
 8001a50:	e519      	b.n	8001486 <__aeabi_dadd+0xe6>
 8001a52:	2200      	movs	r2, #0
 8001a54:	2500      	movs	r5, #0
 8001a56:	4c01      	ldr	r4, [pc, #4]	@ (8001a5c <__aeabi_dadd+0x6bc>)
 8001a58:	e53a      	b.n	80014d0 <__aeabi_dadd+0x130>
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	000007ff 	.word	0x000007ff
 8001a60:	ff7fffff 	.word	0xff7fffff
 8001a64:	000007fe 	.word	0x000007fe

08001a68 <__aeabi_ddiv>:
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	46de      	mov	lr, fp
 8001a6c:	4645      	mov	r5, r8
 8001a6e:	4657      	mov	r7, sl
 8001a70:	464e      	mov	r6, r9
 8001a72:	b5e0      	push	{r5, r6, r7, lr}
 8001a74:	b087      	sub	sp, #28
 8001a76:	9200      	str	r2, [sp, #0]
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	030b      	lsls	r3, r1, #12
 8001a7c:	0b1b      	lsrs	r3, r3, #12
 8001a7e:	469b      	mov	fp, r3
 8001a80:	0fca      	lsrs	r2, r1, #31
 8001a82:	004b      	lsls	r3, r1, #1
 8001a84:	0004      	movs	r4, r0
 8001a86:	4680      	mov	r8, r0
 8001a88:	0d5b      	lsrs	r3, r3, #21
 8001a8a:	9202      	str	r2, [sp, #8]
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_ddiv+0x28>
 8001a8e:	e16a      	b.n	8001d66 <__aeabi_ddiv+0x2fe>
 8001a90:	4ad4      	ldr	r2, [pc, #848]	@ (8001de4 <__aeabi_ddiv+0x37c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d100      	bne.n	8001a98 <__aeabi_ddiv+0x30>
 8001a96:	e18c      	b.n	8001db2 <__aeabi_ddiv+0x34a>
 8001a98:	4659      	mov	r1, fp
 8001a9a:	0f42      	lsrs	r2, r0, #29
 8001a9c:	00c9      	lsls	r1, r1, #3
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	2180      	movs	r1, #128	@ 0x80
 8001aa2:	0409      	lsls	r1, r1, #16
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	00c2      	lsls	r2, r0, #3
 8001aa8:	4690      	mov	r8, r2
 8001aaa:	4acf      	ldr	r2, [pc, #828]	@ (8001de8 <__aeabi_ddiv+0x380>)
 8001aac:	4689      	mov	r9, r1
 8001aae:	4692      	mov	sl, r2
 8001ab0:	449a      	add	sl, r3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	9303      	str	r3, [sp, #12]
 8001ab8:	9e00      	ldr	r6, [sp, #0]
 8001aba:	9f01      	ldr	r7, [sp, #4]
 8001abc:	033b      	lsls	r3, r7, #12
 8001abe:	0b1b      	lsrs	r3, r3, #12
 8001ac0:	469b      	mov	fp, r3
 8001ac2:	007b      	lsls	r3, r7, #1
 8001ac4:	0030      	movs	r0, r6
 8001ac6:	0d5b      	lsrs	r3, r3, #21
 8001ac8:	0ffd      	lsrs	r5, r7, #31
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_ddiv+0x68>
 8001ace:	e128      	b.n	8001d22 <__aeabi_ddiv+0x2ba>
 8001ad0:	4ac4      	ldr	r2, [pc, #784]	@ (8001de4 <__aeabi_ddiv+0x37c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_ddiv+0x70>
 8001ad6:	e177      	b.n	8001dc8 <__aeabi_ddiv+0x360>
 8001ad8:	4659      	mov	r1, fp
 8001ada:	0f72      	lsrs	r2, r6, #29
 8001adc:	00c9      	lsls	r1, r1, #3
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	0409      	lsls	r1, r1, #16
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	468b      	mov	fp, r1
 8001ae8:	49bf      	ldr	r1, [pc, #764]	@ (8001de8 <__aeabi_ddiv+0x380>)
 8001aea:	00f2      	lsls	r2, r6, #3
 8001aec:	468c      	mov	ip, r1
 8001aee:	4651      	mov	r1, sl
 8001af0:	4463      	add	r3, ip
 8001af2:	1acb      	subs	r3, r1, r3
 8001af4:	469a      	mov	sl, r3
 8001af6:	2300      	movs	r3, #0
 8001af8:	9e02      	ldr	r6, [sp, #8]
 8001afa:	406e      	eors	r6, r5
 8001afc:	2c0f      	cmp	r4, #15
 8001afe:	d827      	bhi.n	8001b50 <__aeabi_ddiv+0xe8>
 8001b00:	49ba      	ldr	r1, [pc, #744]	@ (8001dec <__aeabi_ddiv+0x384>)
 8001b02:	00a4      	lsls	r4, r4, #2
 8001b04:	5909      	ldr	r1, [r1, r4]
 8001b06:	468f      	mov	pc, r1
 8001b08:	46cb      	mov	fp, r9
 8001b0a:	4642      	mov	r2, r8
 8001b0c:	9e02      	ldr	r6, [sp, #8]
 8001b0e:	9b03      	ldr	r3, [sp, #12]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d016      	beq.n	8001b42 <__aeabi_ddiv+0xda>
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d100      	bne.n	8001b1a <__aeabi_ddiv+0xb2>
 8001b18:	e2a6      	b.n	8002068 <__aeabi_ddiv+0x600>
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d000      	beq.n	8001b20 <__aeabi_ddiv+0xb8>
 8001b1e:	e0df      	b.n	8001ce0 <__aeabi_ddiv+0x278>
 8001b20:	2200      	movs	r2, #0
 8001b22:	2300      	movs	r3, #0
 8001b24:	2400      	movs	r4, #0
 8001b26:	4690      	mov	r8, r2
 8001b28:	051b      	lsls	r3, r3, #20
 8001b2a:	4323      	orrs	r3, r4
 8001b2c:	07f6      	lsls	r6, r6, #31
 8001b2e:	4333      	orrs	r3, r6
 8001b30:	4640      	mov	r0, r8
 8001b32:	0019      	movs	r1, r3
 8001b34:	b007      	add	sp, #28
 8001b36:	bcf0      	pop	{r4, r5, r6, r7}
 8001b38:	46bb      	mov	fp, r7
 8001b3a:	46b2      	mov	sl, r6
 8001b3c:	46a9      	mov	r9, r5
 8001b3e:	46a0      	mov	r8, r4
 8001b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b42:	2200      	movs	r2, #0
 8001b44:	2400      	movs	r4, #0
 8001b46:	4690      	mov	r8, r2
 8001b48:	4ba6      	ldr	r3, [pc, #664]	@ (8001de4 <__aeabi_ddiv+0x37c>)
 8001b4a:	e7ed      	b.n	8001b28 <__aeabi_ddiv+0xc0>
 8001b4c:	002e      	movs	r6, r5
 8001b4e:	e7df      	b.n	8001b10 <__aeabi_ddiv+0xa8>
 8001b50:	45cb      	cmp	fp, r9
 8001b52:	d200      	bcs.n	8001b56 <__aeabi_ddiv+0xee>
 8001b54:	e1d4      	b.n	8001f00 <__aeabi_ddiv+0x498>
 8001b56:	d100      	bne.n	8001b5a <__aeabi_ddiv+0xf2>
 8001b58:	e1cf      	b.n	8001efa <__aeabi_ddiv+0x492>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	425b      	negs	r3, r3
 8001b5e:	469c      	mov	ip, r3
 8001b60:	4644      	mov	r4, r8
 8001b62:	4648      	mov	r0, r9
 8001b64:	2700      	movs	r7, #0
 8001b66:	44e2      	add	sl, ip
 8001b68:	465b      	mov	r3, fp
 8001b6a:	0e15      	lsrs	r5, r2, #24
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	431d      	orrs	r5, r3
 8001b70:	0c19      	lsrs	r1, r3, #16
 8001b72:	042b      	lsls	r3, r5, #16
 8001b74:	0212      	lsls	r2, r2, #8
 8001b76:	9500      	str	r5, [sp, #0]
 8001b78:	0c1d      	lsrs	r5, r3, #16
 8001b7a:	4691      	mov	r9, r2
 8001b7c:	9102      	str	r1, [sp, #8]
 8001b7e:	9503      	str	r5, [sp, #12]
 8001b80:	f7fe fb62 	bl	8000248 <__aeabi_uidivmod>
 8001b84:	0002      	movs	r2, r0
 8001b86:	436a      	muls	r2, r5
 8001b88:	040b      	lsls	r3, r1, #16
 8001b8a:	0c21      	lsrs	r1, r4, #16
 8001b8c:	4680      	mov	r8, r0
 8001b8e:	4319      	orrs	r1, r3
 8001b90:	428a      	cmp	r2, r1
 8001b92:	d909      	bls.n	8001ba8 <__aeabi_ddiv+0x140>
 8001b94:	9d00      	ldr	r5, [sp, #0]
 8001b96:	2301      	movs	r3, #1
 8001b98:	46ac      	mov	ip, r5
 8001b9a:	425b      	negs	r3, r3
 8001b9c:	4461      	add	r1, ip
 8001b9e:	469c      	mov	ip, r3
 8001ba0:	44e0      	add	r8, ip
 8001ba2:	428d      	cmp	r5, r1
 8001ba4:	d800      	bhi.n	8001ba8 <__aeabi_ddiv+0x140>
 8001ba6:	e1fb      	b.n	8001fa0 <__aeabi_ddiv+0x538>
 8001ba8:	1a88      	subs	r0, r1, r2
 8001baa:	9902      	ldr	r1, [sp, #8]
 8001bac:	f7fe fb4c 	bl	8000248 <__aeabi_uidivmod>
 8001bb0:	9a03      	ldr	r2, [sp, #12]
 8001bb2:	0424      	lsls	r4, r4, #16
 8001bb4:	4342      	muls	r2, r0
 8001bb6:	0409      	lsls	r1, r1, #16
 8001bb8:	0c24      	lsrs	r4, r4, #16
 8001bba:	0003      	movs	r3, r0
 8001bbc:	430c      	orrs	r4, r1
 8001bbe:	42a2      	cmp	r2, r4
 8001bc0:	d906      	bls.n	8001bd0 <__aeabi_ddiv+0x168>
 8001bc2:	9900      	ldr	r1, [sp, #0]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	468c      	mov	ip, r1
 8001bc8:	4464      	add	r4, ip
 8001bca:	42a1      	cmp	r1, r4
 8001bcc:	d800      	bhi.n	8001bd0 <__aeabi_ddiv+0x168>
 8001bce:	e1e1      	b.n	8001f94 <__aeabi_ddiv+0x52c>
 8001bd0:	1aa0      	subs	r0, r4, r2
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	0412      	lsls	r2, r2, #16
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	4693      	mov	fp, r2
 8001bda:	464b      	mov	r3, r9
 8001bdc:	4659      	mov	r1, fp
 8001bde:	0c1b      	lsrs	r3, r3, #16
 8001be0:	001d      	movs	r5, r3
 8001be2:	9304      	str	r3, [sp, #16]
 8001be4:	040b      	lsls	r3, r1, #16
 8001be6:	4649      	mov	r1, r9
 8001be8:	0409      	lsls	r1, r1, #16
 8001bea:	0c09      	lsrs	r1, r1, #16
 8001bec:	000c      	movs	r4, r1
 8001bee:	0c1b      	lsrs	r3, r3, #16
 8001bf0:	435c      	muls	r4, r3
 8001bf2:	0c12      	lsrs	r2, r2, #16
 8001bf4:	436b      	muls	r3, r5
 8001bf6:	4688      	mov	r8, r1
 8001bf8:	4351      	muls	r1, r2
 8001bfa:	436a      	muls	r2, r5
 8001bfc:	0c25      	lsrs	r5, r4, #16
 8001bfe:	46ac      	mov	ip, r5
 8001c00:	185b      	adds	r3, r3, r1
 8001c02:	4463      	add	r3, ip
 8001c04:	4299      	cmp	r1, r3
 8001c06:	d903      	bls.n	8001c10 <__aeabi_ddiv+0x1a8>
 8001c08:	2180      	movs	r1, #128	@ 0x80
 8001c0a:	0249      	lsls	r1, r1, #9
 8001c0c:	468c      	mov	ip, r1
 8001c0e:	4462      	add	r2, ip
 8001c10:	0c19      	lsrs	r1, r3, #16
 8001c12:	0424      	lsls	r4, r4, #16
 8001c14:	041b      	lsls	r3, r3, #16
 8001c16:	0c24      	lsrs	r4, r4, #16
 8001c18:	188a      	adds	r2, r1, r2
 8001c1a:	191c      	adds	r4, r3, r4
 8001c1c:	4290      	cmp	r0, r2
 8001c1e:	d302      	bcc.n	8001c26 <__aeabi_ddiv+0x1be>
 8001c20:	d116      	bne.n	8001c50 <__aeabi_ddiv+0x1e8>
 8001c22:	42a7      	cmp	r7, r4
 8001c24:	d214      	bcs.n	8001c50 <__aeabi_ddiv+0x1e8>
 8001c26:	465b      	mov	r3, fp
 8001c28:	9d00      	ldr	r5, [sp, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	444f      	add	r7, r9
 8001c2e:	9305      	str	r3, [sp, #20]
 8001c30:	454f      	cmp	r7, r9
 8001c32:	419b      	sbcs	r3, r3
 8001c34:	46ac      	mov	ip, r5
 8001c36:	425b      	negs	r3, r3
 8001c38:	4463      	add	r3, ip
 8001c3a:	18c0      	adds	r0, r0, r3
 8001c3c:	4285      	cmp	r5, r0
 8001c3e:	d300      	bcc.n	8001c42 <__aeabi_ddiv+0x1da>
 8001c40:	e1a1      	b.n	8001f86 <__aeabi_ddiv+0x51e>
 8001c42:	4282      	cmp	r2, r0
 8001c44:	d900      	bls.n	8001c48 <__aeabi_ddiv+0x1e0>
 8001c46:	e1f6      	b.n	8002036 <__aeabi_ddiv+0x5ce>
 8001c48:	d100      	bne.n	8001c4c <__aeabi_ddiv+0x1e4>
 8001c4a:	e1f1      	b.n	8002030 <__aeabi_ddiv+0x5c8>
 8001c4c:	9b05      	ldr	r3, [sp, #20]
 8001c4e:	469b      	mov	fp, r3
 8001c50:	1b3c      	subs	r4, r7, r4
 8001c52:	42a7      	cmp	r7, r4
 8001c54:	41bf      	sbcs	r7, r7
 8001c56:	9d00      	ldr	r5, [sp, #0]
 8001c58:	1a80      	subs	r0, r0, r2
 8001c5a:	427f      	negs	r7, r7
 8001c5c:	1bc0      	subs	r0, r0, r7
 8001c5e:	4285      	cmp	r5, r0
 8001c60:	d100      	bne.n	8001c64 <__aeabi_ddiv+0x1fc>
 8001c62:	e1d0      	b.n	8002006 <__aeabi_ddiv+0x59e>
 8001c64:	9902      	ldr	r1, [sp, #8]
 8001c66:	f7fe faef 	bl	8000248 <__aeabi_uidivmod>
 8001c6a:	9a03      	ldr	r2, [sp, #12]
 8001c6c:	040b      	lsls	r3, r1, #16
 8001c6e:	4342      	muls	r2, r0
 8001c70:	0c21      	lsrs	r1, r4, #16
 8001c72:	0007      	movs	r7, r0
 8001c74:	4319      	orrs	r1, r3
 8001c76:	428a      	cmp	r2, r1
 8001c78:	d900      	bls.n	8001c7c <__aeabi_ddiv+0x214>
 8001c7a:	e178      	b.n	8001f6e <__aeabi_ddiv+0x506>
 8001c7c:	1a88      	subs	r0, r1, r2
 8001c7e:	9902      	ldr	r1, [sp, #8]
 8001c80:	f7fe fae2 	bl	8000248 <__aeabi_uidivmod>
 8001c84:	9a03      	ldr	r2, [sp, #12]
 8001c86:	0424      	lsls	r4, r4, #16
 8001c88:	4342      	muls	r2, r0
 8001c8a:	0409      	lsls	r1, r1, #16
 8001c8c:	0c24      	lsrs	r4, r4, #16
 8001c8e:	0003      	movs	r3, r0
 8001c90:	430c      	orrs	r4, r1
 8001c92:	42a2      	cmp	r2, r4
 8001c94:	d900      	bls.n	8001c98 <__aeabi_ddiv+0x230>
 8001c96:	e15d      	b.n	8001f54 <__aeabi_ddiv+0x4ec>
 8001c98:	4641      	mov	r1, r8
 8001c9a:	1aa4      	subs	r4, r4, r2
 8001c9c:	043a      	lsls	r2, r7, #16
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	9d04      	ldr	r5, [sp, #16]
 8001ca2:	0413      	lsls	r3, r2, #16
 8001ca4:	0c1b      	lsrs	r3, r3, #16
 8001ca6:	4359      	muls	r1, r3
 8001ca8:	4647      	mov	r7, r8
 8001caa:	436b      	muls	r3, r5
 8001cac:	469c      	mov	ip, r3
 8001cae:	0c10      	lsrs	r0, r2, #16
 8001cb0:	4347      	muls	r7, r0
 8001cb2:	0c0b      	lsrs	r3, r1, #16
 8001cb4:	44bc      	add	ip, r7
 8001cb6:	4463      	add	r3, ip
 8001cb8:	4368      	muls	r0, r5
 8001cba:	429f      	cmp	r7, r3
 8001cbc:	d903      	bls.n	8001cc6 <__aeabi_ddiv+0x25e>
 8001cbe:	2580      	movs	r5, #128	@ 0x80
 8001cc0:	026d      	lsls	r5, r5, #9
 8001cc2:	46ac      	mov	ip, r5
 8001cc4:	4460      	add	r0, ip
 8001cc6:	0c1f      	lsrs	r7, r3, #16
 8001cc8:	0409      	lsls	r1, r1, #16
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	0c09      	lsrs	r1, r1, #16
 8001cce:	183f      	adds	r7, r7, r0
 8001cd0:	185b      	adds	r3, r3, r1
 8001cd2:	42bc      	cmp	r4, r7
 8001cd4:	d200      	bcs.n	8001cd8 <__aeabi_ddiv+0x270>
 8001cd6:	e102      	b.n	8001ede <__aeabi_ddiv+0x476>
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_ddiv+0x274>
 8001cda:	e0fd      	b.n	8001ed8 <__aeabi_ddiv+0x470>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	4b43      	ldr	r3, [pc, #268]	@ (8001df0 <__aeabi_ddiv+0x388>)
 8001ce2:	4453      	add	r3, sl
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	dc00      	bgt.n	8001cea <__aeabi_ddiv+0x282>
 8001ce8:	e0ae      	b.n	8001e48 <__aeabi_ddiv+0x3e0>
 8001cea:	0751      	lsls	r1, r2, #29
 8001cec:	d000      	beq.n	8001cf0 <__aeabi_ddiv+0x288>
 8001cee:	e198      	b.n	8002022 <__aeabi_ddiv+0x5ba>
 8001cf0:	4659      	mov	r1, fp
 8001cf2:	01c9      	lsls	r1, r1, #7
 8001cf4:	d506      	bpl.n	8001d04 <__aeabi_ddiv+0x29c>
 8001cf6:	4659      	mov	r1, fp
 8001cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8001df4 <__aeabi_ddiv+0x38c>)
 8001cfa:	4019      	ands	r1, r3
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	468b      	mov	fp, r1
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4453      	add	r3, sl
 8001d04:	493c      	ldr	r1, [pc, #240]	@ (8001df8 <__aeabi_ddiv+0x390>)
 8001d06:	428b      	cmp	r3, r1
 8001d08:	dd00      	ble.n	8001d0c <__aeabi_ddiv+0x2a4>
 8001d0a:	e71a      	b.n	8001b42 <__aeabi_ddiv+0xda>
 8001d0c:	4659      	mov	r1, fp
 8001d0e:	08d2      	lsrs	r2, r2, #3
 8001d10:	0749      	lsls	r1, r1, #29
 8001d12:	4311      	orrs	r1, r2
 8001d14:	465a      	mov	r2, fp
 8001d16:	055b      	lsls	r3, r3, #21
 8001d18:	0254      	lsls	r4, r2, #9
 8001d1a:	4688      	mov	r8, r1
 8001d1c:	0b24      	lsrs	r4, r4, #12
 8001d1e:	0d5b      	lsrs	r3, r3, #21
 8001d20:	e702      	b.n	8001b28 <__aeabi_ddiv+0xc0>
 8001d22:	465a      	mov	r2, fp
 8001d24:	9b00      	ldr	r3, [sp, #0]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	d100      	bne.n	8001d2c <__aeabi_ddiv+0x2c4>
 8001d2a:	e07e      	b.n	8001e2a <__aeabi_ddiv+0x3c2>
 8001d2c:	465b      	mov	r3, fp
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d100      	bne.n	8001d34 <__aeabi_ddiv+0x2cc>
 8001d32:	e100      	b.n	8001f36 <__aeabi_ddiv+0x4ce>
 8001d34:	4658      	mov	r0, fp
 8001d36:	f001 fabb 	bl	80032b0 <__clzsi2>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	3a0b      	subs	r2, #11
 8001d40:	271d      	movs	r7, #29
 8001d42:	9e00      	ldr	r6, [sp, #0]
 8001d44:	1aba      	subs	r2, r7, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	4658      	mov	r0, fp
 8001d4a:	40d6      	lsrs	r6, r2
 8001d4c:	3908      	subs	r1, #8
 8001d4e:	4088      	lsls	r0, r1
 8001d50:	0032      	movs	r2, r6
 8001d52:	4302      	orrs	r2, r0
 8001d54:	4693      	mov	fp, r2
 8001d56:	9a00      	ldr	r2, [sp, #0]
 8001d58:	408a      	lsls	r2, r1
 8001d5a:	4928      	ldr	r1, [pc, #160]	@ (8001dfc <__aeabi_ddiv+0x394>)
 8001d5c:	4453      	add	r3, sl
 8001d5e:	468a      	mov	sl, r1
 8001d60:	449a      	add	sl, r3
 8001d62:	2300      	movs	r3, #0
 8001d64:	e6c8      	b.n	8001af8 <__aeabi_ddiv+0x90>
 8001d66:	465b      	mov	r3, fp
 8001d68:	4303      	orrs	r3, r0
 8001d6a:	4699      	mov	r9, r3
 8001d6c:	d056      	beq.n	8001e1c <__aeabi_ddiv+0x3b4>
 8001d6e:	465b      	mov	r3, fp
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d100      	bne.n	8001d76 <__aeabi_ddiv+0x30e>
 8001d74:	e0cd      	b.n	8001f12 <__aeabi_ddiv+0x4aa>
 8001d76:	4658      	mov	r0, fp
 8001d78:	f001 fa9a 	bl	80032b0 <__clzsi2>
 8001d7c:	230b      	movs	r3, #11
 8001d7e:	425b      	negs	r3, r3
 8001d80:	469c      	mov	ip, r3
 8001d82:	0002      	movs	r2, r0
 8001d84:	4484      	add	ip, r0
 8001d86:	4666      	mov	r6, ip
 8001d88:	231d      	movs	r3, #29
 8001d8a:	1b9b      	subs	r3, r3, r6
 8001d8c:	0026      	movs	r6, r4
 8001d8e:	0011      	movs	r1, r2
 8001d90:	4658      	mov	r0, fp
 8001d92:	40de      	lsrs	r6, r3
 8001d94:	3908      	subs	r1, #8
 8001d96:	4088      	lsls	r0, r1
 8001d98:	0033      	movs	r3, r6
 8001d9a:	4303      	orrs	r3, r0
 8001d9c:	4699      	mov	r9, r3
 8001d9e:	0023      	movs	r3, r4
 8001da0:	408b      	lsls	r3, r1
 8001da2:	4698      	mov	r8, r3
 8001da4:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <__aeabi_ddiv+0x398>)
 8001da6:	2400      	movs	r4, #0
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	469a      	mov	sl, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9303      	str	r3, [sp, #12]
 8001db0:	e682      	b.n	8001ab8 <__aeabi_ddiv+0x50>
 8001db2:	465a      	mov	r2, fp
 8001db4:	4302      	orrs	r2, r0
 8001db6:	4691      	mov	r9, r2
 8001db8:	d12a      	bne.n	8001e10 <__aeabi_ddiv+0x3a8>
 8001dba:	2200      	movs	r2, #0
 8001dbc:	469a      	mov	sl, r3
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	4690      	mov	r8, r2
 8001dc2:	2408      	movs	r4, #8
 8001dc4:	9303      	str	r3, [sp, #12]
 8001dc6:	e677      	b.n	8001ab8 <__aeabi_ddiv+0x50>
 8001dc8:	465a      	mov	r2, fp
 8001dca:	9b00      	ldr	r3, [sp, #0]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <__aeabi_ddiv+0x39c>)
 8001dd0:	469c      	mov	ip, r3
 8001dd2:	44e2      	add	sl, ip
 8001dd4:	2a00      	cmp	r2, #0
 8001dd6:	d117      	bne.n	8001e08 <__aeabi_ddiv+0x3a0>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	431c      	orrs	r4, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	469b      	mov	fp, r3
 8001de0:	3302      	adds	r3, #2
 8001de2:	e689      	b.n	8001af8 <__aeabi_ddiv+0x90>
 8001de4:	000007ff 	.word	0x000007ff
 8001de8:	fffffc01 	.word	0xfffffc01
 8001dec:	0800d134 	.word	0x0800d134
 8001df0:	000003ff 	.word	0x000003ff
 8001df4:	feffffff 	.word	0xfeffffff
 8001df8:	000007fe 	.word	0x000007fe
 8001dfc:	000003f3 	.word	0x000003f3
 8001e00:	fffffc0d 	.word	0xfffffc0d
 8001e04:	fffff801 	.word	0xfffff801
 8001e08:	2303      	movs	r3, #3
 8001e0a:	0032      	movs	r2, r6
 8001e0c:	431c      	orrs	r4, r3
 8001e0e:	e673      	b.n	8001af8 <__aeabi_ddiv+0x90>
 8001e10:	469a      	mov	sl, r3
 8001e12:	2303      	movs	r3, #3
 8001e14:	46d9      	mov	r9, fp
 8001e16:	240c      	movs	r4, #12
 8001e18:	9303      	str	r3, [sp, #12]
 8001e1a:	e64d      	b.n	8001ab8 <__aeabi_ddiv+0x50>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	4698      	mov	r8, r3
 8001e20:	469a      	mov	sl, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	2404      	movs	r4, #4
 8001e26:	9303      	str	r3, [sp, #12]
 8001e28:	e646      	b.n	8001ab8 <__aeabi_ddiv+0x50>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	431c      	orrs	r4, r3
 8001e2e:	2300      	movs	r3, #0
 8001e30:	469b      	mov	fp, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	e660      	b.n	8001af8 <__aeabi_ddiv+0x90>
 8001e36:	2300      	movs	r3, #0
 8001e38:	2480      	movs	r4, #128	@ 0x80
 8001e3a:	4698      	mov	r8, r3
 8001e3c:	2600      	movs	r6, #0
 8001e3e:	4b92      	ldr	r3, [pc, #584]	@ (8002088 <__aeabi_ddiv+0x620>)
 8001e40:	0324      	lsls	r4, r4, #12
 8001e42:	e671      	b.n	8001b28 <__aeabi_ddiv+0xc0>
 8001e44:	2201      	movs	r2, #1
 8001e46:	4252      	negs	r2, r2
 8001e48:	2101      	movs	r1, #1
 8001e4a:	1ac9      	subs	r1, r1, r3
 8001e4c:	2938      	cmp	r1, #56	@ 0x38
 8001e4e:	dd00      	ble.n	8001e52 <__aeabi_ddiv+0x3ea>
 8001e50:	e666      	b.n	8001b20 <__aeabi_ddiv+0xb8>
 8001e52:	291f      	cmp	r1, #31
 8001e54:	dc00      	bgt.n	8001e58 <__aeabi_ddiv+0x3f0>
 8001e56:	e0ab      	b.n	8001fb0 <__aeabi_ddiv+0x548>
 8001e58:	201f      	movs	r0, #31
 8001e5a:	4240      	negs	r0, r0
 8001e5c:	1ac3      	subs	r3, r0, r3
 8001e5e:	4658      	mov	r0, fp
 8001e60:	40d8      	lsrs	r0, r3
 8001e62:	0003      	movs	r3, r0
 8001e64:	2920      	cmp	r1, #32
 8001e66:	d004      	beq.n	8001e72 <__aeabi_ddiv+0x40a>
 8001e68:	4658      	mov	r0, fp
 8001e6a:	4988      	ldr	r1, [pc, #544]	@ (800208c <__aeabi_ddiv+0x624>)
 8001e6c:	4451      	add	r1, sl
 8001e6e:	4088      	lsls	r0, r1
 8001e70:	4302      	orrs	r2, r0
 8001e72:	1e51      	subs	r1, r2, #1
 8001e74:	418a      	sbcs	r2, r1
 8001e76:	431a      	orrs	r2, r3
 8001e78:	2307      	movs	r3, #7
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	4011      	ands	r1, r2
 8001e80:	4213      	tst	r3, r2
 8001e82:	d00c      	beq.n	8001e9e <__aeabi_ddiv+0x436>
 8001e84:	230f      	movs	r3, #15
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_ddiv+0x426>
 8001e8c:	e0f9      	b.n	8002082 <__aeabi_ddiv+0x61a>
 8001e8e:	1d11      	adds	r1, r2, #4
 8001e90:	4291      	cmp	r1, r2
 8001e92:	419b      	sbcs	r3, r3
 8001e94:	000a      	movs	r2, r1
 8001e96:	425b      	negs	r3, r3
 8001e98:	0759      	lsls	r1, r3, #29
 8001e9a:	025b      	lsls	r3, r3, #9
 8001e9c:	0b1c      	lsrs	r4, r3, #12
 8001e9e:	08d2      	lsrs	r2, r2, #3
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	4690      	mov	r8, r2
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e63f      	b.n	8001b28 <__aeabi_ddiv+0xc0>
 8001ea8:	2480      	movs	r4, #128	@ 0x80
 8001eaa:	464b      	mov	r3, r9
 8001eac:	0324      	lsls	r4, r4, #12
 8001eae:	4223      	tst	r3, r4
 8001eb0:	d009      	beq.n	8001ec6 <__aeabi_ddiv+0x45e>
 8001eb2:	465b      	mov	r3, fp
 8001eb4:	4223      	tst	r3, r4
 8001eb6:	d106      	bne.n	8001ec6 <__aeabi_ddiv+0x45e>
 8001eb8:	431c      	orrs	r4, r3
 8001eba:	0324      	lsls	r4, r4, #12
 8001ebc:	002e      	movs	r6, r5
 8001ebe:	4690      	mov	r8, r2
 8001ec0:	4b71      	ldr	r3, [pc, #452]	@ (8002088 <__aeabi_ddiv+0x620>)
 8001ec2:	0b24      	lsrs	r4, r4, #12
 8001ec4:	e630      	b.n	8001b28 <__aeabi_ddiv+0xc0>
 8001ec6:	2480      	movs	r4, #128	@ 0x80
 8001ec8:	464b      	mov	r3, r9
 8001eca:	0324      	lsls	r4, r4, #12
 8001ecc:	431c      	orrs	r4, r3
 8001ece:	0324      	lsls	r4, r4, #12
 8001ed0:	9e02      	ldr	r6, [sp, #8]
 8001ed2:	4b6d      	ldr	r3, [pc, #436]	@ (8002088 <__aeabi_ddiv+0x620>)
 8001ed4:	0b24      	lsrs	r4, r4, #12
 8001ed6:	e627      	b.n	8001b28 <__aeabi_ddiv+0xc0>
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d100      	bne.n	8001ede <__aeabi_ddiv+0x476>
 8001edc:	e700      	b.n	8001ce0 <__aeabi_ddiv+0x278>
 8001ede:	9800      	ldr	r0, [sp, #0]
 8001ee0:	1e51      	subs	r1, r2, #1
 8001ee2:	4684      	mov	ip, r0
 8001ee4:	4464      	add	r4, ip
 8001ee6:	4284      	cmp	r4, r0
 8001ee8:	d200      	bcs.n	8001eec <__aeabi_ddiv+0x484>
 8001eea:	e084      	b.n	8001ff6 <__aeabi_ddiv+0x58e>
 8001eec:	42bc      	cmp	r4, r7
 8001eee:	d200      	bcs.n	8001ef2 <__aeabi_ddiv+0x48a>
 8001ef0:	e0ae      	b.n	8002050 <__aeabi_ddiv+0x5e8>
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_ddiv+0x48e>
 8001ef4:	e0c1      	b.n	800207a <__aeabi_ddiv+0x612>
 8001ef6:	000a      	movs	r2, r1
 8001ef8:	e6f0      	b.n	8001cdc <__aeabi_ddiv+0x274>
 8001efa:	4542      	cmp	r2, r8
 8001efc:	d900      	bls.n	8001f00 <__aeabi_ddiv+0x498>
 8001efe:	e62c      	b.n	8001b5a <__aeabi_ddiv+0xf2>
 8001f00:	464b      	mov	r3, r9
 8001f02:	07dc      	lsls	r4, r3, #31
 8001f04:	0858      	lsrs	r0, r3, #1
 8001f06:	4643      	mov	r3, r8
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	431c      	orrs	r4, r3
 8001f0c:	4643      	mov	r3, r8
 8001f0e:	07df      	lsls	r7, r3, #31
 8001f10:	e62a      	b.n	8001b68 <__aeabi_ddiv+0x100>
 8001f12:	f001 f9cd 	bl	80032b0 <__clzsi2>
 8001f16:	2315      	movs	r3, #21
 8001f18:	469c      	mov	ip, r3
 8001f1a:	4484      	add	ip, r0
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	4663      	mov	r3, ip
 8001f20:	3220      	adds	r2, #32
 8001f22:	2b1c      	cmp	r3, #28
 8001f24:	dc00      	bgt.n	8001f28 <__aeabi_ddiv+0x4c0>
 8001f26:	e72e      	b.n	8001d86 <__aeabi_ddiv+0x31e>
 8001f28:	0023      	movs	r3, r4
 8001f2a:	3808      	subs	r0, #8
 8001f2c:	4083      	lsls	r3, r0
 8001f2e:	4699      	mov	r9, r3
 8001f30:	2300      	movs	r3, #0
 8001f32:	4698      	mov	r8, r3
 8001f34:	e736      	b.n	8001da4 <__aeabi_ddiv+0x33c>
 8001f36:	f001 f9bb 	bl	80032b0 <__clzsi2>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	3215      	adds	r2, #21
 8001f40:	3320      	adds	r3, #32
 8001f42:	2a1c      	cmp	r2, #28
 8001f44:	dc00      	bgt.n	8001f48 <__aeabi_ddiv+0x4e0>
 8001f46:	e6fb      	b.n	8001d40 <__aeabi_ddiv+0x2d8>
 8001f48:	9900      	ldr	r1, [sp, #0]
 8001f4a:	3808      	subs	r0, #8
 8001f4c:	4081      	lsls	r1, r0
 8001f4e:	2200      	movs	r2, #0
 8001f50:	468b      	mov	fp, r1
 8001f52:	e702      	b.n	8001d5a <__aeabi_ddiv+0x2f2>
 8001f54:	9900      	ldr	r1, [sp, #0]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4464      	add	r4, ip
 8001f5c:	42a1      	cmp	r1, r4
 8001f5e:	d900      	bls.n	8001f62 <__aeabi_ddiv+0x4fa>
 8001f60:	e69a      	b.n	8001c98 <__aeabi_ddiv+0x230>
 8001f62:	42a2      	cmp	r2, r4
 8001f64:	d800      	bhi.n	8001f68 <__aeabi_ddiv+0x500>
 8001f66:	e697      	b.n	8001c98 <__aeabi_ddiv+0x230>
 8001f68:	1e83      	subs	r3, r0, #2
 8001f6a:	4464      	add	r4, ip
 8001f6c:	e694      	b.n	8001c98 <__aeabi_ddiv+0x230>
 8001f6e:	46ac      	mov	ip, r5
 8001f70:	4461      	add	r1, ip
 8001f72:	3f01      	subs	r7, #1
 8001f74:	428d      	cmp	r5, r1
 8001f76:	d900      	bls.n	8001f7a <__aeabi_ddiv+0x512>
 8001f78:	e680      	b.n	8001c7c <__aeabi_ddiv+0x214>
 8001f7a:	428a      	cmp	r2, r1
 8001f7c:	d800      	bhi.n	8001f80 <__aeabi_ddiv+0x518>
 8001f7e:	e67d      	b.n	8001c7c <__aeabi_ddiv+0x214>
 8001f80:	1e87      	subs	r7, r0, #2
 8001f82:	4461      	add	r1, ip
 8001f84:	e67a      	b.n	8001c7c <__aeabi_ddiv+0x214>
 8001f86:	4285      	cmp	r5, r0
 8001f88:	d000      	beq.n	8001f8c <__aeabi_ddiv+0x524>
 8001f8a:	e65f      	b.n	8001c4c <__aeabi_ddiv+0x1e4>
 8001f8c:	45b9      	cmp	r9, r7
 8001f8e:	d900      	bls.n	8001f92 <__aeabi_ddiv+0x52a>
 8001f90:	e65c      	b.n	8001c4c <__aeabi_ddiv+0x1e4>
 8001f92:	e656      	b.n	8001c42 <__aeabi_ddiv+0x1da>
 8001f94:	42a2      	cmp	r2, r4
 8001f96:	d800      	bhi.n	8001f9a <__aeabi_ddiv+0x532>
 8001f98:	e61a      	b.n	8001bd0 <__aeabi_ddiv+0x168>
 8001f9a:	1e83      	subs	r3, r0, #2
 8001f9c:	4464      	add	r4, ip
 8001f9e:	e617      	b.n	8001bd0 <__aeabi_ddiv+0x168>
 8001fa0:	428a      	cmp	r2, r1
 8001fa2:	d800      	bhi.n	8001fa6 <__aeabi_ddiv+0x53e>
 8001fa4:	e600      	b.n	8001ba8 <__aeabi_ddiv+0x140>
 8001fa6:	46ac      	mov	ip, r5
 8001fa8:	1e83      	subs	r3, r0, #2
 8001faa:	4698      	mov	r8, r3
 8001fac:	4461      	add	r1, ip
 8001fae:	e5fb      	b.n	8001ba8 <__aeabi_ddiv+0x140>
 8001fb0:	4837      	ldr	r0, [pc, #220]	@ (8002090 <__aeabi_ddiv+0x628>)
 8001fb2:	0014      	movs	r4, r2
 8001fb4:	4450      	add	r0, sl
 8001fb6:	4082      	lsls	r2, r0
 8001fb8:	465b      	mov	r3, fp
 8001fba:	0017      	movs	r7, r2
 8001fbc:	4083      	lsls	r3, r0
 8001fbe:	40cc      	lsrs	r4, r1
 8001fc0:	1e7a      	subs	r2, r7, #1
 8001fc2:	4197      	sbcs	r7, r2
 8001fc4:	4323      	orrs	r3, r4
 8001fc6:	433b      	orrs	r3, r7
 8001fc8:	001a      	movs	r2, r3
 8001fca:	465b      	mov	r3, fp
 8001fcc:	40cb      	lsrs	r3, r1
 8001fce:	0751      	lsls	r1, r2, #29
 8001fd0:	d009      	beq.n	8001fe6 <__aeabi_ddiv+0x57e>
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	4011      	ands	r1, r2
 8001fd6:	2904      	cmp	r1, #4
 8001fd8:	d005      	beq.n	8001fe6 <__aeabi_ddiv+0x57e>
 8001fda:	1d11      	adds	r1, r2, #4
 8001fdc:	4291      	cmp	r1, r2
 8001fde:	4192      	sbcs	r2, r2
 8001fe0:	4252      	negs	r2, r2
 8001fe2:	189b      	adds	r3, r3, r2
 8001fe4:	000a      	movs	r2, r1
 8001fe6:	0219      	lsls	r1, r3, #8
 8001fe8:	d400      	bmi.n	8001fec <__aeabi_ddiv+0x584>
 8001fea:	e755      	b.n	8001e98 <__aeabi_ddiv+0x430>
 8001fec:	2200      	movs	r2, #0
 8001fee:	2301      	movs	r3, #1
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	4690      	mov	r8, r2
 8001ff4:	e598      	b.n	8001b28 <__aeabi_ddiv+0xc0>
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	42bc      	cmp	r4, r7
 8001ffa:	d000      	beq.n	8001ffe <__aeabi_ddiv+0x596>
 8001ffc:	e66e      	b.n	8001cdc <__aeabi_ddiv+0x274>
 8001ffe:	454b      	cmp	r3, r9
 8002000:	d000      	beq.n	8002004 <__aeabi_ddiv+0x59c>
 8002002:	e66b      	b.n	8001cdc <__aeabi_ddiv+0x274>
 8002004:	e66c      	b.n	8001ce0 <__aeabi_ddiv+0x278>
 8002006:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <__aeabi_ddiv+0x62c>)
 8002008:	4a23      	ldr	r2, [pc, #140]	@ (8002098 <__aeabi_ddiv+0x630>)
 800200a:	4453      	add	r3, sl
 800200c:	4592      	cmp	sl, r2
 800200e:	da00      	bge.n	8002012 <__aeabi_ddiv+0x5aa>
 8002010:	e718      	b.n	8001e44 <__aeabi_ddiv+0x3dc>
 8002012:	2101      	movs	r1, #1
 8002014:	4249      	negs	r1, r1
 8002016:	1d0a      	adds	r2, r1, #4
 8002018:	428a      	cmp	r2, r1
 800201a:	4189      	sbcs	r1, r1
 800201c:	4249      	negs	r1, r1
 800201e:	448b      	add	fp, r1
 8002020:	e666      	b.n	8001cf0 <__aeabi_ddiv+0x288>
 8002022:	210f      	movs	r1, #15
 8002024:	4011      	ands	r1, r2
 8002026:	2904      	cmp	r1, #4
 8002028:	d100      	bne.n	800202c <__aeabi_ddiv+0x5c4>
 800202a:	e661      	b.n	8001cf0 <__aeabi_ddiv+0x288>
 800202c:	0011      	movs	r1, r2
 800202e:	e7f2      	b.n	8002016 <__aeabi_ddiv+0x5ae>
 8002030:	42bc      	cmp	r4, r7
 8002032:	d800      	bhi.n	8002036 <__aeabi_ddiv+0x5ce>
 8002034:	e60a      	b.n	8001c4c <__aeabi_ddiv+0x1e4>
 8002036:	2302      	movs	r3, #2
 8002038:	425b      	negs	r3, r3
 800203a:	469c      	mov	ip, r3
 800203c:	9900      	ldr	r1, [sp, #0]
 800203e:	444f      	add	r7, r9
 8002040:	454f      	cmp	r7, r9
 8002042:	419b      	sbcs	r3, r3
 8002044:	44e3      	add	fp, ip
 8002046:	468c      	mov	ip, r1
 8002048:	425b      	negs	r3, r3
 800204a:	4463      	add	r3, ip
 800204c:	18c0      	adds	r0, r0, r3
 800204e:	e5ff      	b.n	8001c50 <__aeabi_ddiv+0x1e8>
 8002050:	4649      	mov	r1, r9
 8002052:	9d00      	ldr	r5, [sp, #0]
 8002054:	0048      	lsls	r0, r1, #1
 8002056:	4548      	cmp	r0, r9
 8002058:	4189      	sbcs	r1, r1
 800205a:	46ac      	mov	ip, r5
 800205c:	4249      	negs	r1, r1
 800205e:	4461      	add	r1, ip
 8002060:	4681      	mov	r9, r0
 8002062:	3a02      	subs	r2, #2
 8002064:	1864      	adds	r4, r4, r1
 8002066:	e7c7      	b.n	8001ff8 <__aeabi_ddiv+0x590>
 8002068:	2480      	movs	r4, #128	@ 0x80
 800206a:	465b      	mov	r3, fp
 800206c:	0324      	lsls	r4, r4, #12
 800206e:	431c      	orrs	r4, r3
 8002070:	0324      	lsls	r4, r4, #12
 8002072:	4690      	mov	r8, r2
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <__aeabi_ddiv+0x620>)
 8002076:	0b24      	lsrs	r4, r4, #12
 8002078:	e556      	b.n	8001b28 <__aeabi_ddiv+0xc0>
 800207a:	4599      	cmp	r9, r3
 800207c:	d3e8      	bcc.n	8002050 <__aeabi_ddiv+0x5e8>
 800207e:	000a      	movs	r2, r1
 8002080:	e7bd      	b.n	8001ffe <__aeabi_ddiv+0x596>
 8002082:	2300      	movs	r3, #0
 8002084:	e708      	b.n	8001e98 <__aeabi_ddiv+0x430>
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	000007ff 	.word	0x000007ff
 800208c:	0000043e 	.word	0x0000043e
 8002090:	0000041e 	.word	0x0000041e
 8002094:	000003ff 	.word	0x000003ff
 8002098:	fffffc02 	.word	0xfffffc02

0800209c <__eqdf2>:
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	4657      	mov	r7, sl
 80020a0:	46de      	mov	lr, fp
 80020a2:	464e      	mov	r6, r9
 80020a4:	4645      	mov	r5, r8
 80020a6:	b5e0      	push	{r5, r6, r7, lr}
 80020a8:	000d      	movs	r5, r1
 80020aa:	0004      	movs	r4, r0
 80020ac:	0fe8      	lsrs	r0, r5, #31
 80020ae:	4683      	mov	fp, r0
 80020b0:	0309      	lsls	r1, r1, #12
 80020b2:	0fd8      	lsrs	r0, r3, #31
 80020b4:	0b09      	lsrs	r1, r1, #12
 80020b6:	4682      	mov	sl, r0
 80020b8:	4819      	ldr	r0, [pc, #100]	@ (8002120 <__eqdf2+0x84>)
 80020ba:	468c      	mov	ip, r1
 80020bc:	031f      	lsls	r7, r3, #12
 80020be:	0069      	lsls	r1, r5, #1
 80020c0:	005e      	lsls	r6, r3, #1
 80020c2:	0d49      	lsrs	r1, r1, #21
 80020c4:	0b3f      	lsrs	r7, r7, #12
 80020c6:	0d76      	lsrs	r6, r6, #21
 80020c8:	4281      	cmp	r1, r0
 80020ca:	d018      	beq.n	80020fe <__eqdf2+0x62>
 80020cc:	4286      	cmp	r6, r0
 80020ce:	d00f      	beq.n	80020f0 <__eqdf2+0x54>
 80020d0:	2001      	movs	r0, #1
 80020d2:	42b1      	cmp	r1, r6
 80020d4:	d10d      	bne.n	80020f2 <__eqdf2+0x56>
 80020d6:	45bc      	cmp	ip, r7
 80020d8:	d10b      	bne.n	80020f2 <__eqdf2+0x56>
 80020da:	4294      	cmp	r4, r2
 80020dc:	d109      	bne.n	80020f2 <__eqdf2+0x56>
 80020de:	45d3      	cmp	fp, sl
 80020e0:	d01c      	beq.n	800211c <__eqdf2+0x80>
 80020e2:	2900      	cmp	r1, #0
 80020e4:	d105      	bne.n	80020f2 <__eqdf2+0x56>
 80020e6:	4660      	mov	r0, ip
 80020e8:	4320      	orrs	r0, r4
 80020ea:	1e43      	subs	r3, r0, #1
 80020ec:	4198      	sbcs	r0, r3
 80020ee:	e000      	b.n	80020f2 <__eqdf2+0x56>
 80020f0:	2001      	movs	r0, #1
 80020f2:	bcf0      	pop	{r4, r5, r6, r7}
 80020f4:	46bb      	mov	fp, r7
 80020f6:	46b2      	mov	sl, r6
 80020f8:	46a9      	mov	r9, r5
 80020fa:	46a0      	mov	r8, r4
 80020fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fe:	2001      	movs	r0, #1
 8002100:	428e      	cmp	r6, r1
 8002102:	d1f6      	bne.n	80020f2 <__eqdf2+0x56>
 8002104:	4661      	mov	r1, ip
 8002106:	4339      	orrs	r1, r7
 8002108:	000f      	movs	r7, r1
 800210a:	4317      	orrs	r7, r2
 800210c:	4327      	orrs	r7, r4
 800210e:	d1f0      	bne.n	80020f2 <__eqdf2+0x56>
 8002110:	465b      	mov	r3, fp
 8002112:	4652      	mov	r2, sl
 8002114:	1a98      	subs	r0, r3, r2
 8002116:	1e43      	subs	r3, r0, #1
 8002118:	4198      	sbcs	r0, r3
 800211a:	e7ea      	b.n	80020f2 <__eqdf2+0x56>
 800211c:	2000      	movs	r0, #0
 800211e:	e7e8      	b.n	80020f2 <__eqdf2+0x56>
 8002120:	000007ff 	.word	0x000007ff

08002124 <__gedf2>:
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002126:	4657      	mov	r7, sl
 8002128:	464e      	mov	r6, r9
 800212a:	4645      	mov	r5, r8
 800212c:	46de      	mov	lr, fp
 800212e:	b5e0      	push	{r5, r6, r7, lr}
 8002130:	000d      	movs	r5, r1
 8002132:	030f      	lsls	r7, r1, #12
 8002134:	0b39      	lsrs	r1, r7, #12
 8002136:	b083      	sub	sp, #12
 8002138:	0004      	movs	r4, r0
 800213a:	4680      	mov	r8, r0
 800213c:	9101      	str	r1, [sp, #4]
 800213e:	0058      	lsls	r0, r3, #1
 8002140:	0fe9      	lsrs	r1, r5, #31
 8002142:	4f31      	ldr	r7, [pc, #196]	@ (8002208 <__gedf2+0xe4>)
 8002144:	0d40      	lsrs	r0, r0, #21
 8002146:	468c      	mov	ip, r1
 8002148:	006e      	lsls	r6, r5, #1
 800214a:	0319      	lsls	r1, r3, #12
 800214c:	4682      	mov	sl, r0
 800214e:	4691      	mov	r9, r2
 8002150:	0d76      	lsrs	r6, r6, #21
 8002152:	0b09      	lsrs	r1, r1, #12
 8002154:	0fd8      	lsrs	r0, r3, #31
 8002156:	42be      	cmp	r6, r7
 8002158:	d01f      	beq.n	800219a <__gedf2+0x76>
 800215a:	45ba      	cmp	sl, r7
 800215c:	d00f      	beq.n	800217e <__gedf2+0x5a>
 800215e:	2e00      	cmp	r6, #0
 8002160:	d12f      	bne.n	80021c2 <__gedf2+0x9e>
 8002162:	4655      	mov	r5, sl
 8002164:	9e01      	ldr	r6, [sp, #4]
 8002166:	4334      	orrs	r4, r6
 8002168:	2d00      	cmp	r5, #0
 800216a:	d127      	bne.n	80021bc <__gedf2+0x98>
 800216c:	430a      	orrs	r2, r1
 800216e:	d03a      	beq.n	80021e6 <__gedf2+0xc2>
 8002170:	2c00      	cmp	r4, #0
 8002172:	d145      	bne.n	8002200 <__gedf2+0xdc>
 8002174:	2800      	cmp	r0, #0
 8002176:	d11a      	bne.n	80021ae <__gedf2+0x8a>
 8002178:	2001      	movs	r0, #1
 800217a:	4240      	negs	r0, r0
 800217c:	e017      	b.n	80021ae <__gedf2+0x8a>
 800217e:	4311      	orrs	r1, r2
 8002180:	d13b      	bne.n	80021fa <__gedf2+0xd6>
 8002182:	2e00      	cmp	r6, #0
 8002184:	d102      	bne.n	800218c <__gedf2+0x68>
 8002186:	9f01      	ldr	r7, [sp, #4]
 8002188:	4327      	orrs	r7, r4
 800218a:	d0f3      	beq.n	8002174 <__gedf2+0x50>
 800218c:	4584      	cmp	ip, r0
 800218e:	d109      	bne.n	80021a4 <__gedf2+0x80>
 8002190:	4663      	mov	r3, ip
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <__gedf2+0x54>
 8002196:	4660      	mov	r0, ip
 8002198:	e009      	b.n	80021ae <__gedf2+0x8a>
 800219a:	9f01      	ldr	r7, [sp, #4]
 800219c:	4327      	orrs	r7, r4
 800219e:	d12c      	bne.n	80021fa <__gedf2+0xd6>
 80021a0:	45b2      	cmp	sl, r6
 80021a2:	d024      	beq.n	80021ee <__gedf2+0xca>
 80021a4:	4663      	mov	r3, ip
 80021a6:	2002      	movs	r0, #2
 80021a8:	3b01      	subs	r3, #1
 80021aa:	4018      	ands	r0, r3
 80021ac:	3801      	subs	r0, #1
 80021ae:	b003      	add	sp, #12
 80021b0:	bcf0      	pop	{r4, r5, r6, r7}
 80021b2:	46bb      	mov	fp, r7
 80021b4:	46b2      	mov	sl, r6
 80021b6:	46a9      	mov	r9, r5
 80021b8:	46a0      	mov	r8, r4
 80021ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021bc:	2c00      	cmp	r4, #0
 80021be:	d0d9      	beq.n	8002174 <__gedf2+0x50>
 80021c0:	e7e4      	b.n	800218c <__gedf2+0x68>
 80021c2:	4654      	mov	r4, sl
 80021c4:	2c00      	cmp	r4, #0
 80021c6:	d0ed      	beq.n	80021a4 <__gedf2+0x80>
 80021c8:	4584      	cmp	ip, r0
 80021ca:	d1eb      	bne.n	80021a4 <__gedf2+0x80>
 80021cc:	4556      	cmp	r6, sl
 80021ce:	dce9      	bgt.n	80021a4 <__gedf2+0x80>
 80021d0:	dbde      	blt.n	8002190 <__gedf2+0x6c>
 80021d2:	9b01      	ldr	r3, [sp, #4]
 80021d4:	428b      	cmp	r3, r1
 80021d6:	d8e5      	bhi.n	80021a4 <__gedf2+0x80>
 80021d8:	d1da      	bne.n	8002190 <__gedf2+0x6c>
 80021da:	45c8      	cmp	r8, r9
 80021dc:	d8e2      	bhi.n	80021a4 <__gedf2+0x80>
 80021de:	2000      	movs	r0, #0
 80021e0:	45c8      	cmp	r8, r9
 80021e2:	d2e4      	bcs.n	80021ae <__gedf2+0x8a>
 80021e4:	e7d4      	b.n	8002190 <__gedf2+0x6c>
 80021e6:	2000      	movs	r0, #0
 80021e8:	2c00      	cmp	r4, #0
 80021ea:	d0e0      	beq.n	80021ae <__gedf2+0x8a>
 80021ec:	e7da      	b.n	80021a4 <__gedf2+0x80>
 80021ee:	4311      	orrs	r1, r2
 80021f0:	d103      	bne.n	80021fa <__gedf2+0xd6>
 80021f2:	4584      	cmp	ip, r0
 80021f4:	d1d6      	bne.n	80021a4 <__gedf2+0x80>
 80021f6:	2000      	movs	r0, #0
 80021f8:	e7d9      	b.n	80021ae <__gedf2+0x8a>
 80021fa:	2002      	movs	r0, #2
 80021fc:	4240      	negs	r0, r0
 80021fe:	e7d6      	b.n	80021ae <__gedf2+0x8a>
 8002200:	4584      	cmp	ip, r0
 8002202:	d0e6      	beq.n	80021d2 <__gedf2+0xae>
 8002204:	e7ce      	b.n	80021a4 <__gedf2+0x80>
 8002206:	46c0      	nop			@ (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__ledf2>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4657      	mov	r7, sl
 8002210:	464e      	mov	r6, r9
 8002212:	4645      	mov	r5, r8
 8002214:	46de      	mov	lr, fp
 8002216:	b5e0      	push	{r5, r6, r7, lr}
 8002218:	000d      	movs	r5, r1
 800221a:	030f      	lsls	r7, r1, #12
 800221c:	0004      	movs	r4, r0
 800221e:	4680      	mov	r8, r0
 8002220:	0fe8      	lsrs	r0, r5, #31
 8002222:	0b39      	lsrs	r1, r7, #12
 8002224:	4684      	mov	ip, r0
 8002226:	b083      	sub	sp, #12
 8002228:	0058      	lsls	r0, r3, #1
 800222a:	4f30      	ldr	r7, [pc, #192]	@ (80022ec <__ledf2+0xe0>)
 800222c:	0d40      	lsrs	r0, r0, #21
 800222e:	9101      	str	r1, [sp, #4]
 8002230:	031e      	lsls	r6, r3, #12
 8002232:	0069      	lsls	r1, r5, #1
 8002234:	4682      	mov	sl, r0
 8002236:	4691      	mov	r9, r2
 8002238:	0d49      	lsrs	r1, r1, #21
 800223a:	0b36      	lsrs	r6, r6, #12
 800223c:	0fd8      	lsrs	r0, r3, #31
 800223e:	42b9      	cmp	r1, r7
 8002240:	d020      	beq.n	8002284 <__ledf2+0x78>
 8002242:	45ba      	cmp	sl, r7
 8002244:	d00f      	beq.n	8002266 <__ledf2+0x5a>
 8002246:	2900      	cmp	r1, #0
 8002248:	d12b      	bne.n	80022a2 <__ledf2+0x96>
 800224a:	9901      	ldr	r1, [sp, #4]
 800224c:	430c      	orrs	r4, r1
 800224e:	4651      	mov	r1, sl
 8002250:	2900      	cmp	r1, #0
 8002252:	d137      	bne.n	80022c4 <__ledf2+0xb8>
 8002254:	4332      	orrs	r2, r6
 8002256:	d038      	beq.n	80022ca <__ledf2+0xbe>
 8002258:	2c00      	cmp	r4, #0
 800225a:	d144      	bne.n	80022e6 <__ledf2+0xda>
 800225c:	2800      	cmp	r0, #0
 800225e:	d119      	bne.n	8002294 <__ledf2+0x88>
 8002260:	2001      	movs	r0, #1
 8002262:	4240      	negs	r0, r0
 8002264:	e016      	b.n	8002294 <__ledf2+0x88>
 8002266:	4316      	orrs	r6, r2
 8002268:	d113      	bne.n	8002292 <__ledf2+0x86>
 800226a:	2900      	cmp	r1, #0
 800226c:	d102      	bne.n	8002274 <__ledf2+0x68>
 800226e:	9f01      	ldr	r7, [sp, #4]
 8002270:	4327      	orrs	r7, r4
 8002272:	d0f3      	beq.n	800225c <__ledf2+0x50>
 8002274:	4584      	cmp	ip, r0
 8002276:	d020      	beq.n	80022ba <__ledf2+0xae>
 8002278:	4663      	mov	r3, ip
 800227a:	2002      	movs	r0, #2
 800227c:	3b01      	subs	r3, #1
 800227e:	4018      	ands	r0, r3
 8002280:	3801      	subs	r0, #1
 8002282:	e007      	b.n	8002294 <__ledf2+0x88>
 8002284:	9f01      	ldr	r7, [sp, #4]
 8002286:	4327      	orrs	r7, r4
 8002288:	d103      	bne.n	8002292 <__ledf2+0x86>
 800228a:	458a      	cmp	sl, r1
 800228c:	d1f4      	bne.n	8002278 <__ledf2+0x6c>
 800228e:	4316      	orrs	r6, r2
 8002290:	d01f      	beq.n	80022d2 <__ledf2+0xc6>
 8002292:	2002      	movs	r0, #2
 8002294:	b003      	add	sp, #12
 8002296:	bcf0      	pop	{r4, r5, r6, r7}
 8002298:	46bb      	mov	fp, r7
 800229a:	46b2      	mov	sl, r6
 800229c:	46a9      	mov	r9, r5
 800229e:	46a0      	mov	r8, r4
 80022a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a2:	4654      	mov	r4, sl
 80022a4:	2c00      	cmp	r4, #0
 80022a6:	d0e7      	beq.n	8002278 <__ledf2+0x6c>
 80022a8:	4584      	cmp	ip, r0
 80022aa:	d1e5      	bne.n	8002278 <__ledf2+0x6c>
 80022ac:	4551      	cmp	r1, sl
 80022ae:	dce3      	bgt.n	8002278 <__ledf2+0x6c>
 80022b0:	db03      	blt.n	80022ba <__ledf2+0xae>
 80022b2:	9b01      	ldr	r3, [sp, #4]
 80022b4:	42b3      	cmp	r3, r6
 80022b6:	d8df      	bhi.n	8002278 <__ledf2+0x6c>
 80022b8:	d00f      	beq.n	80022da <__ledf2+0xce>
 80022ba:	4663      	mov	r3, ip
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0cf      	beq.n	8002260 <__ledf2+0x54>
 80022c0:	4660      	mov	r0, ip
 80022c2:	e7e7      	b.n	8002294 <__ledf2+0x88>
 80022c4:	2c00      	cmp	r4, #0
 80022c6:	d0c9      	beq.n	800225c <__ledf2+0x50>
 80022c8:	e7d4      	b.n	8002274 <__ledf2+0x68>
 80022ca:	2000      	movs	r0, #0
 80022cc:	2c00      	cmp	r4, #0
 80022ce:	d0e1      	beq.n	8002294 <__ledf2+0x88>
 80022d0:	e7d2      	b.n	8002278 <__ledf2+0x6c>
 80022d2:	4584      	cmp	ip, r0
 80022d4:	d1d0      	bne.n	8002278 <__ledf2+0x6c>
 80022d6:	2000      	movs	r0, #0
 80022d8:	e7dc      	b.n	8002294 <__ledf2+0x88>
 80022da:	45c8      	cmp	r8, r9
 80022dc:	d8cc      	bhi.n	8002278 <__ledf2+0x6c>
 80022de:	2000      	movs	r0, #0
 80022e0:	45c8      	cmp	r8, r9
 80022e2:	d2d7      	bcs.n	8002294 <__ledf2+0x88>
 80022e4:	e7e9      	b.n	80022ba <__ledf2+0xae>
 80022e6:	4584      	cmp	ip, r0
 80022e8:	d0e3      	beq.n	80022b2 <__ledf2+0xa6>
 80022ea:	e7c5      	b.n	8002278 <__ledf2+0x6c>
 80022ec:	000007ff 	.word	0x000007ff

080022f0 <__aeabi_dmul>:
 80022f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f2:	4657      	mov	r7, sl
 80022f4:	46de      	mov	lr, fp
 80022f6:	464e      	mov	r6, r9
 80022f8:	4645      	mov	r5, r8
 80022fa:	b5e0      	push	{r5, r6, r7, lr}
 80022fc:	001f      	movs	r7, r3
 80022fe:	030b      	lsls	r3, r1, #12
 8002300:	0b1b      	lsrs	r3, r3, #12
 8002302:	0016      	movs	r6, r2
 8002304:	469a      	mov	sl, r3
 8002306:	0fca      	lsrs	r2, r1, #31
 8002308:	004b      	lsls	r3, r1, #1
 800230a:	0004      	movs	r4, r0
 800230c:	4693      	mov	fp, r2
 800230e:	b087      	sub	sp, #28
 8002310:	0d5b      	lsrs	r3, r3, #21
 8002312:	d100      	bne.n	8002316 <__aeabi_dmul+0x26>
 8002314:	e0d5      	b.n	80024c2 <__aeabi_dmul+0x1d2>
 8002316:	4abb      	ldr	r2, [pc, #748]	@ (8002604 <__aeabi_dmul+0x314>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d100      	bne.n	800231e <__aeabi_dmul+0x2e>
 800231c:	e0f8      	b.n	8002510 <__aeabi_dmul+0x220>
 800231e:	4651      	mov	r1, sl
 8002320:	0f42      	lsrs	r2, r0, #29
 8002322:	00c9      	lsls	r1, r1, #3
 8002324:	430a      	orrs	r2, r1
 8002326:	2180      	movs	r1, #128	@ 0x80
 8002328:	0409      	lsls	r1, r1, #16
 800232a:	4311      	orrs	r1, r2
 800232c:	00c2      	lsls	r2, r0, #3
 800232e:	4691      	mov	r9, r2
 8002330:	4ab5      	ldr	r2, [pc, #724]	@ (8002608 <__aeabi_dmul+0x318>)
 8002332:	468a      	mov	sl, r1
 8002334:	189d      	adds	r5, r3, r2
 8002336:	2300      	movs	r3, #0
 8002338:	4698      	mov	r8, r3
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	033c      	lsls	r4, r7, #12
 800233e:	007b      	lsls	r3, r7, #1
 8002340:	0ffa      	lsrs	r2, r7, #31
 8002342:	0030      	movs	r0, r6
 8002344:	0b24      	lsrs	r4, r4, #12
 8002346:	0d5b      	lsrs	r3, r3, #21
 8002348:	9200      	str	r2, [sp, #0]
 800234a:	d100      	bne.n	800234e <__aeabi_dmul+0x5e>
 800234c:	e096      	b.n	800247c <__aeabi_dmul+0x18c>
 800234e:	4aad      	ldr	r2, [pc, #692]	@ (8002604 <__aeabi_dmul+0x314>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d031      	beq.n	80023b8 <__aeabi_dmul+0xc8>
 8002354:	0f72      	lsrs	r2, r6, #29
 8002356:	00e4      	lsls	r4, r4, #3
 8002358:	4322      	orrs	r2, r4
 800235a:	2480      	movs	r4, #128	@ 0x80
 800235c:	0424      	lsls	r4, r4, #16
 800235e:	4314      	orrs	r4, r2
 8002360:	4aa9      	ldr	r2, [pc, #676]	@ (8002608 <__aeabi_dmul+0x318>)
 8002362:	00f0      	lsls	r0, r6, #3
 8002364:	4694      	mov	ip, r2
 8002366:	4463      	add	r3, ip
 8002368:	195b      	adds	r3, r3, r5
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	9201      	str	r2, [sp, #4]
 800236e:	4642      	mov	r2, r8
 8002370:	2600      	movs	r6, #0
 8002372:	2a0a      	cmp	r2, #10
 8002374:	dc42      	bgt.n	80023fc <__aeabi_dmul+0x10c>
 8002376:	465a      	mov	r2, fp
 8002378:	9900      	ldr	r1, [sp, #0]
 800237a:	404a      	eors	r2, r1
 800237c:	4693      	mov	fp, r2
 800237e:	4642      	mov	r2, r8
 8002380:	2a02      	cmp	r2, #2
 8002382:	dc32      	bgt.n	80023ea <__aeabi_dmul+0xfa>
 8002384:	3a01      	subs	r2, #1
 8002386:	2a01      	cmp	r2, #1
 8002388:	d900      	bls.n	800238c <__aeabi_dmul+0x9c>
 800238a:	e149      	b.n	8002620 <__aeabi_dmul+0x330>
 800238c:	2e02      	cmp	r6, #2
 800238e:	d100      	bne.n	8002392 <__aeabi_dmul+0xa2>
 8002390:	e0ca      	b.n	8002528 <__aeabi_dmul+0x238>
 8002392:	2e01      	cmp	r6, #1
 8002394:	d13d      	bne.n	8002412 <__aeabi_dmul+0x122>
 8002396:	2300      	movs	r3, #0
 8002398:	2400      	movs	r4, #0
 800239a:	2200      	movs	r2, #0
 800239c:	0010      	movs	r0, r2
 800239e:	465a      	mov	r2, fp
 80023a0:	051b      	lsls	r3, r3, #20
 80023a2:	4323      	orrs	r3, r4
 80023a4:	07d2      	lsls	r2, r2, #31
 80023a6:	4313      	orrs	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	b007      	add	sp, #28
 80023ac:	bcf0      	pop	{r4, r5, r6, r7}
 80023ae:	46bb      	mov	fp, r7
 80023b0:	46b2      	mov	sl, r6
 80023b2:	46a9      	mov	r9, r5
 80023b4:	46a0      	mov	r8, r4
 80023b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b8:	4b92      	ldr	r3, [pc, #584]	@ (8002604 <__aeabi_dmul+0x314>)
 80023ba:	4326      	orrs	r6, r4
 80023bc:	18eb      	adds	r3, r5, r3
 80023be:	2e00      	cmp	r6, #0
 80023c0:	d100      	bne.n	80023c4 <__aeabi_dmul+0xd4>
 80023c2:	e0bb      	b.n	800253c <__aeabi_dmul+0x24c>
 80023c4:	2203      	movs	r2, #3
 80023c6:	4641      	mov	r1, r8
 80023c8:	4311      	orrs	r1, r2
 80023ca:	465a      	mov	r2, fp
 80023cc:	4688      	mov	r8, r1
 80023ce:	9900      	ldr	r1, [sp, #0]
 80023d0:	404a      	eors	r2, r1
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	0109      	lsls	r1, r1, #4
 80023d6:	468c      	mov	ip, r1
 80023d8:	0029      	movs	r1, r5
 80023da:	4461      	add	r1, ip
 80023dc:	9101      	str	r1, [sp, #4]
 80023de:	4641      	mov	r1, r8
 80023e0:	290a      	cmp	r1, #10
 80023e2:	dd00      	ble.n	80023e6 <__aeabi_dmul+0xf6>
 80023e4:	e233      	b.n	800284e <__aeabi_dmul+0x55e>
 80023e6:	4693      	mov	fp, r2
 80023e8:	2603      	movs	r6, #3
 80023ea:	4642      	mov	r2, r8
 80023ec:	2701      	movs	r7, #1
 80023ee:	4097      	lsls	r7, r2
 80023f0:	21a6      	movs	r1, #166	@ 0xa6
 80023f2:	003a      	movs	r2, r7
 80023f4:	00c9      	lsls	r1, r1, #3
 80023f6:	400a      	ands	r2, r1
 80023f8:	420f      	tst	r7, r1
 80023fa:	d031      	beq.n	8002460 <__aeabi_dmul+0x170>
 80023fc:	9e02      	ldr	r6, [sp, #8]
 80023fe:	2e02      	cmp	r6, #2
 8002400:	d100      	bne.n	8002404 <__aeabi_dmul+0x114>
 8002402:	e235      	b.n	8002870 <__aeabi_dmul+0x580>
 8002404:	2e03      	cmp	r6, #3
 8002406:	d100      	bne.n	800240a <__aeabi_dmul+0x11a>
 8002408:	e1d2      	b.n	80027b0 <__aeabi_dmul+0x4c0>
 800240a:	4654      	mov	r4, sl
 800240c:	4648      	mov	r0, r9
 800240e:	2e01      	cmp	r6, #1
 8002410:	d0c1      	beq.n	8002396 <__aeabi_dmul+0xa6>
 8002412:	9a01      	ldr	r2, [sp, #4]
 8002414:	4b7d      	ldr	r3, [pc, #500]	@ (800260c <__aeabi_dmul+0x31c>)
 8002416:	4694      	mov	ip, r2
 8002418:	4463      	add	r3, ip
 800241a:	2b00      	cmp	r3, #0
 800241c:	dc00      	bgt.n	8002420 <__aeabi_dmul+0x130>
 800241e:	e0c0      	b.n	80025a2 <__aeabi_dmul+0x2b2>
 8002420:	0742      	lsls	r2, r0, #29
 8002422:	d009      	beq.n	8002438 <__aeabi_dmul+0x148>
 8002424:	220f      	movs	r2, #15
 8002426:	4002      	ands	r2, r0
 8002428:	2a04      	cmp	r2, #4
 800242a:	d005      	beq.n	8002438 <__aeabi_dmul+0x148>
 800242c:	1d02      	adds	r2, r0, #4
 800242e:	4282      	cmp	r2, r0
 8002430:	4180      	sbcs	r0, r0
 8002432:	4240      	negs	r0, r0
 8002434:	1824      	adds	r4, r4, r0
 8002436:	0010      	movs	r0, r2
 8002438:	01e2      	lsls	r2, r4, #7
 800243a:	d506      	bpl.n	800244a <__aeabi_dmul+0x15a>
 800243c:	4b74      	ldr	r3, [pc, #464]	@ (8002610 <__aeabi_dmul+0x320>)
 800243e:	9a01      	ldr	r2, [sp, #4]
 8002440:	401c      	ands	r4, r3
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	4694      	mov	ip, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4463      	add	r3, ip
 800244a:	4a72      	ldr	r2, [pc, #456]	@ (8002614 <__aeabi_dmul+0x324>)
 800244c:	4293      	cmp	r3, r2
 800244e:	dc6b      	bgt.n	8002528 <__aeabi_dmul+0x238>
 8002450:	0762      	lsls	r2, r4, #29
 8002452:	08c0      	lsrs	r0, r0, #3
 8002454:	0264      	lsls	r4, r4, #9
 8002456:	055b      	lsls	r3, r3, #21
 8002458:	4302      	orrs	r2, r0
 800245a:	0b24      	lsrs	r4, r4, #12
 800245c:	0d5b      	lsrs	r3, r3, #21
 800245e:	e79d      	b.n	800239c <__aeabi_dmul+0xac>
 8002460:	2190      	movs	r1, #144	@ 0x90
 8002462:	0089      	lsls	r1, r1, #2
 8002464:	420f      	tst	r7, r1
 8002466:	d163      	bne.n	8002530 <__aeabi_dmul+0x240>
 8002468:	2288      	movs	r2, #136	@ 0x88
 800246a:	423a      	tst	r2, r7
 800246c:	d100      	bne.n	8002470 <__aeabi_dmul+0x180>
 800246e:	e0d7      	b.n	8002620 <__aeabi_dmul+0x330>
 8002470:	9b00      	ldr	r3, [sp, #0]
 8002472:	46a2      	mov	sl, r4
 8002474:	469b      	mov	fp, r3
 8002476:	4681      	mov	r9, r0
 8002478:	9602      	str	r6, [sp, #8]
 800247a:	e7bf      	b.n	80023fc <__aeabi_dmul+0x10c>
 800247c:	0023      	movs	r3, r4
 800247e:	4333      	orrs	r3, r6
 8002480:	d100      	bne.n	8002484 <__aeabi_dmul+0x194>
 8002482:	e07f      	b.n	8002584 <__aeabi_dmul+0x294>
 8002484:	2c00      	cmp	r4, #0
 8002486:	d100      	bne.n	800248a <__aeabi_dmul+0x19a>
 8002488:	e1ad      	b.n	80027e6 <__aeabi_dmul+0x4f6>
 800248a:	0020      	movs	r0, r4
 800248c:	f000 ff10 	bl	80032b0 <__clzsi2>
 8002490:	0002      	movs	r2, r0
 8002492:	0003      	movs	r3, r0
 8002494:	3a0b      	subs	r2, #11
 8002496:	201d      	movs	r0, #29
 8002498:	0019      	movs	r1, r3
 800249a:	1a82      	subs	r2, r0, r2
 800249c:	0030      	movs	r0, r6
 800249e:	3908      	subs	r1, #8
 80024a0:	40d0      	lsrs	r0, r2
 80024a2:	408c      	lsls	r4, r1
 80024a4:	4304      	orrs	r4, r0
 80024a6:	0030      	movs	r0, r6
 80024a8:	4088      	lsls	r0, r1
 80024aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002618 <__aeabi_dmul+0x328>)
 80024ac:	1aeb      	subs	r3, r5, r3
 80024ae:	4694      	mov	ip, r2
 80024b0:	4463      	add	r3, ip
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	9201      	str	r2, [sp, #4]
 80024b6:	4642      	mov	r2, r8
 80024b8:	2600      	movs	r6, #0
 80024ba:	2a0a      	cmp	r2, #10
 80024bc:	dc00      	bgt.n	80024c0 <__aeabi_dmul+0x1d0>
 80024be:	e75a      	b.n	8002376 <__aeabi_dmul+0x86>
 80024c0:	e79c      	b.n	80023fc <__aeabi_dmul+0x10c>
 80024c2:	4653      	mov	r3, sl
 80024c4:	4303      	orrs	r3, r0
 80024c6:	4699      	mov	r9, r3
 80024c8:	d054      	beq.n	8002574 <__aeabi_dmul+0x284>
 80024ca:	4653      	mov	r3, sl
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d100      	bne.n	80024d2 <__aeabi_dmul+0x1e2>
 80024d0:	e177      	b.n	80027c2 <__aeabi_dmul+0x4d2>
 80024d2:	4650      	mov	r0, sl
 80024d4:	f000 feec 	bl	80032b0 <__clzsi2>
 80024d8:	230b      	movs	r3, #11
 80024da:	425b      	negs	r3, r3
 80024dc:	469c      	mov	ip, r3
 80024de:	0002      	movs	r2, r0
 80024e0:	4484      	add	ip, r0
 80024e2:	0011      	movs	r1, r2
 80024e4:	4650      	mov	r0, sl
 80024e6:	3908      	subs	r1, #8
 80024e8:	4088      	lsls	r0, r1
 80024ea:	231d      	movs	r3, #29
 80024ec:	4680      	mov	r8, r0
 80024ee:	4660      	mov	r0, ip
 80024f0:	1a1b      	subs	r3, r3, r0
 80024f2:	0020      	movs	r0, r4
 80024f4:	40d8      	lsrs	r0, r3
 80024f6:	0003      	movs	r3, r0
 80024f8:	4640      	mov	r0, r8
 80024fa:	4303      	orrs	r3, r0
 80024fc:	469a      	mov	sl, r3
 80024fe:	0023      	movs	r3, r4
 8002500:	408b      	lsls	r3, r1
 8002502:	4699      	mov	r9, r3
 8002504:	2300      	movs	r3, #0
 8002506:	4d44      	ldr	r5, [pc, #272]	@ (8002618 <__aeabi_dmul+0x328>)
 8002508:	4698      	mov	r8, r3
 800250a:	1aad      	subs	r5, r5, r2
 800250c:	9302      	str	r3, [sp, #8]
 800250e:	e715      	b.n	800233c <__aeabi_dmul+0x4c>
 8002510:	4652      	mov	r2, sl
 8002512:	4302      	orrs	r2, r0
 8002514:	4691      	mov	r9, r2
 8002516:	d126      	bne.n	8002566 <__aeabi_dmul+0x276>
 8002518:	2200      	movs	r2, #0
 800251a:	001d      	movs	r5, r3
 800251c:	2302      	movs	r3, #2
 800251e:	4692      	mov	sl, r2
 8002520:	3208      	adds	r2, #8
 8002522:	4690      	mov	r8, r2
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	e709      	b.n	800233c <__aeabi_dmul+0x4c>
 8002528:	2400      	movs	r4, #0
 800252a:	2200      	movs	r2, #0
 800252c:	4b35      	ldr	r3, [pc, #212]	@ (8002604 <__aeabi_dmul+0x314>)
 800252e:	e735      	b.n	800239c <__aeabi_dmul+0xac>
 8002530:	2300      	movs	r3, #0
 8002532:	2480      	movs	r4, #128	@ 0x80
 8002534:	469b      	mov	fp, r3
 8002536:	0324      	lsls	r4, r4, #12
 8002538:	4b32      	ldr	r3, [pc, #200]	@ (8002604 <__aeabi_dmul+0x314>)
 800253a:	e72f      	b.n	800239c <__aeabi_dmul+0xac>
 800253c:	2202      	movs	r2, #2
 800253e:	4641      	mov	r1, r8
 8002540:	4311      	orrs	r1, r2
 8002542:	2280      	movs	r2, #128	@ 0x80
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	4694      	mov	ip, r2
 8002548:	002a      	movs	r2, r5
 800254a:	4462      	add	r2, ip
 800254c:	4688      	mov	r8, r1
 800254e:	9201      	str	r2, [sp, #4]
 8002550:	290a      	cmp	r1, #10
 8002552:	dd00      	ble.n	8002556 <__aeabi_dmul+0x266>
 8002554:	e752      	b.n	80023fc <__aeabi_dmul+0x10c>
 8002556:	465a      	mov	r2, fp
 8002558:	2000      	movs	r0, #0
 800255a:	9900      	ldr	r1, [sp, #0]
 800255c:	0004      	movs	r4, r0
 800255e:	404a      	eors	r2, r1
 8002560:	4693      	mov	fp, r2
 8002562:	2602      	movs	r6, #2
 8002564:	e70b      	b.n	800237e <__aeabi_dmul+0x8e>
 8002566:	220c      	movs	r2, #12
 8002568:	001d      	movs	r5, r3
 800256a:	2303      	movs	r3, #3
 800256c:	4681      	mov	r9, r0
 800256e:	4690      	mov	r8, r2
 8002570:	9302      	str	r3, [sp, #8]
 8002572:	e6e3      	b.n	800233c <__aeabi_dmul+0x4c>
 8002574:	2300      	movs	r3, #0
 8002576:	469a      	mov	sl, r3
 8002578:	3304      	adds	r3, #4
 800257a:	4698      	mov	r8, r3
 800257c:	3b03      	subs	r3, #3
 800257e:	2500      	movs	r5, #0
 8002580:	9302      	str	r3, [sp, #8]
 8002582:	e6db      	b.n	800233c <__aeabi_dmul+0x4c>
 8002584:	4642      	mov	r2, r8
 8002586:	3301      	adds	r3, #1
 8002588:	431a      	orrs	r2, r3
 800258a:	002b      	movs	r3, r5
 800258c:	4690      	mov	r8, r2
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	9201      	str	r2, [sp, #4]
 8002592:	4642      	mov	r2, r8
 8002594:	2400      	movs	r4, #0
 8002596:	2000      	movs	r0, #0
 8002598:	2601      	movs	r6, #1
 800259a:	2a0a      	cmp	r2, #10
 800259c:	dc00      	bgt.n	80025a0 <__aeabi_dmul+0x2b0>
 800259e:	e6ea      	b.n	8002376 <__aeabi_dmul+0x86>
 80025a0:	e72c      	b.n	80023fc <__aeabi_dmul+0x10c>
 80025a2:	2201      	movs	r2, #1
 80025a4:	1ad2      	subs	r2, r2, r3
 80025a6:	2a38      	cmp	r2, #56	@ 0x38
 80025a8:	dd00      	ble.n	80025ac <__aeabi_dmul+0x2bc>
 80025aa:	e6f4      	b.n	8002396 <__aeabi_dmul+0xa6>
 80025ac:	2a1f      	cmp	r2, #31
 80025ae:	dc00      	bgt.n	80025b2 <__aeabi_dmul+0x2c2>
 80025b0:	e12a      	b.n	8002808 <__aeabi_dmul+0x518>
 80025b2:	211f      	movs	r1, #31
 80025b4:	4249      	negs	r1, r1
 80025b6:	1acb      	subs	r3, r1, r3
 80025b8:	0021      	movs	r1, r4
 80025ba:	40d9      	lsrs	r1, r3
 80025bc:	000b      	movs	r3, r1
 80025be:	2a20      	cmp	r2, #32
 80025c0:	d005      	beq.n	80025ce <__aeabi_dmul+0x2de>
 80025c2:	4a16      	ldr	r2, [pc, #88]	@ (800261c <__aeabi_dmul+0x32c>)
 80025c4:	9d01      	ldr	r5, [sp, #4]
 80025c6:	4694      	mov	ip, r2
 80025c8:	4465      	add	r5, ip
 80025ca:	40ac      	lsls	r4, r5
 80025cc:	4320      	orrs	r0, r4
 80025ce:	1e42      	subs	r2, r0, #1
 80025d0:	4190      	sbcs	r0, r2
 80025d2:	4318      	orrs	r0, r3
 80025d4:	2307      	movs	r3, #7
 80025d6:	0019      	movs	r1, r3
 80025d8:	2400      	movs	r4, #0
 80025da:	4001      	ands	r1, r0
 80025dc:	4203      	tst	r3, r0
 80025de:	d00c      	beq.n	80025fa <__aeabi_dmul+0x30a>
 80025e0:	230f      	movs	r3, #15
 80025e2:	4003      	ands	r3, r0
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d100      	bne.n	80025ea <__aeabi_dmul+0x2fa>
 80025e8:	e140      	b.n	800286c <__aeabi_dmul+0x57c>
 80025ea:	1d03      	adds	r3, r0, #4
 80025ec:	4283      	cmp	r3, r0
 80025ee:	41a4      	sbcs	r4, r4
 80025f0:	0018      	movs	r0, r3
 80025f2:	4264      	negs	r4, r4
 80025f4:	0761      	lsls	r1, r4, #29
 80025f6:	0264      	lsls	r4, r4, #9
 80025f8:	0b24      	lsrs	r4, r4, #12
 80025fa:	08c2      	lsrs	r2, r0, #3
 80025fc:	2300      	movs	r3, #0
 80025fe:	430a      	orrs	r2, r1
 8002600:	e6cc      	b.n	800239c <__aeabi_dmul+0xac>
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	000007ff 	.word	0x000007ff
 8002608:	fffffc01 	.word	0xfffffc01
 800260c:	000003ff 	.word	0x000003ff
 8002610:	feffffff 	.word	0xfeffffff
 8002614:	000007fe 	.word	0x000007fe
 8002618:	fffffc0d 	.word	0xfffffc0d
 800261c:	0000043e 	.word	0x0000043e
 8002620:	4649      	mov	r1, r9
 8002622:	464a      	mov	r2, r9
 8002624:	0409      	lsls	r1, r1, #16
 8002626:	0c09      	lsrs	r1, r1, #16
 8002628:	000d      	movs	r5, r1
 800262a:	0c16      	lsrs	r6, r2, #16
 800262c:	0c02      	lsrs	r2, r0, #16
 800262e:	0400      	lsls	r0, r0, #16
 8002630:	0c00      	lsrs	r0, r0, #16
 8002632:	4345      	muls	r5, r0
 8002634:	46ac      	mov	ip, r5
 8002636:	0005      	movs	r5, r0
 8002638:	4375      	muls	r5, r6
 800263a:	46a8      	mov	r8, r5
 800263c:	0015      	movs	r5, r2
 800263e:	000f      	movs	r7, r1
 8002640:	4375      	muls	r5, r6
 8002642:	9200      	str	r2, [sp, #0]
 8002644:	9502      	str	r5, [sp, #8]
 8002646:	002a      	movs	r2, r5
 8002648:	9d00      	ldr	r5, [sp, #0]
 800264a:	436f      	muls	r7, r5
 800264c:	4665      	mov	r5, ip
 800264e:	0c2d      	lsrs	r5, r5, #16
 8002650:	46a9      	mov	r9, r5
 8002652:	4447      	add	r7, r8
 8002654:	444f      	add	r7, r9
 8002656:	45b8      	cmp	r8, r7
 8002658:	d905      	bls.n	8002666 <__aeabi_dmul+0x376>
 800265a:	0015      	movs	r5, r2
 800265c:	2280      	movs	r2, #128	@ 0x80
 800265e:	0252      	lsls	r2, r2, #9
 8002660:	4690      	mov	r8, r2
 8002662:	4445      	add	r5, r8
 8002664:	9502      	str	r5, [sp, #8]
 8002666:	0c3d      	lsrs	r5, r7, #16
 8002668:	9503      	str	r5, [sp, #12]
 800266a:	4665      	mov	r5, ip
 800266c:	042d      	lsls	r5, r5, #16
 800266e:	043f      	lsls	r7, r7, #16
 8002670:	0c2d      	lsrs	r5, r5, #16
 8002672:	46ac      	mov	ip, r5
 8002674:	003d      	movs	r5, r7
 8002676:	4465      	add	r5, ip
 8002678:	9504      	str	r5, [sp, #16]
 800267a:	0c25      	lsrs	r5, r4, #16
 800267c:	0424      	lsls	r4, r4, #16
 800267e:	0c24      	lsrs	r4, r4, #16
 8002680:	46ac      	mov	ip, r5
 8002682:	0025      	movs	r5, r4
 8002684:	4375      	muls	r5, r6
 8002686:	46a8      	mov	r8, r5
 8002688:	4665      	mov	r5, ip
 800268a:	000f      	movs	r7, r1
 800268c:	4369      	muls	r1, r5
 800268e:	4441      	add	r1, r8
 8002690:	4689      	mov	r9, r1
 8002692:	4367      	muls	r7, r4
 8002694:	0c39      	lsrs	r1, r7, #16
 8002696:	4449      	add	r1, r9
 8002698:	436e      	muls	r6, r5
 800269a:	4588      	cmp	r8, r1
 800269c:	d903      	bls.n	80026a6 <__aeabi_dmul+0x3b6>
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	0252      	lsls	r2, r2, #9
 80026a2:	4690      	mov	r8, r2
 80026a4:	4446      	add	r6, r8
 80026a6:	0c0d      	lsrs	r5, r1, #16
 80026a8:	46a8      	mov	r8, r5
 80026aa:	0035      	movs	r5, r6
 80026ac:	4445      	add	r5, r8
 80026ae:	9505      	str	r5, [sp, #20]
 80026b0:	9d03      	ldr	r5, [sp, #12]
 80026b2:	043f      	lsls	r7, r7, #16
 80026b4:	46a8      	mov	r8, r5
 80026b6:	0c3f      	lsrs	r7, r7, #16
 80026b8:	0409      	lsls	r1, r1, #16
 80026ba:	19c9      	adds	r1, r1, r7
 80026bc:	4488      	add	r8, r1
 80026be:	4645      	mov	r5, r8
 80026c0:	9503      	str	r5, [sp, #12]
 80026c2:	4655      	mov	r5, sl
 80026c4:	042e      	lsls	r6, r5, #16
 80026c6:	0c36      	lsrs	r6, r6, #16
 80026c8:	0c2f      	lsrs	r7, r5, #16
 80026ca:	0035      	movs	r5, r6
 80026cc:	4345      	muls	r5, r0
 80026ce:	4378      	muls	r0, r7
 80026d0:	4681      	mov	r9, r0
 80026d2:	0038      	movs	r0, r7
 80026d4:	46a8      	mov	r8, r5
 80026d6:	0c2d      	lsrs	r5, r5, #16
 80026d8:	46aa      	mov	sl, r5
 80026da:	9a00      	ldr	r2, [sp, #0]
 80026dc:	4350      	muls	r0, r2
 80026de:	4372      	muls	r2, r6
 80026e0:	444a      	add	r2, r9
 80026e2:	4452      	add	r2, sl
 80026e4:	4591      	cmp	r9, r2
 80026e6:	d903      	bls.n	80026f0 <__aeabi_dmul+0x400>
 80026e8:	2580      	movs	r5, #128	@ 0x80
 80026ea:	026d      	lsls	r5, r5, #9
 80026ec:	46a9      	mov	r9, r5
 80026ee:	4448      	add	r0, r9
 80026f0:	0c15      	lsrs	r5, r2, #16
 80026f2:	46a9      	mov	r9, r5
 80026f4:	4645      	mov	r5, r8
 80026f6:	042d      	lsls	r5, r5, #16
 80026f8:	0c2d      	lsrs	r5, r5, #16
 80026fa:	46a8      	mov	r8, r5
 80026fc:	4665      	mov	r5, ip
 80026fe:	437d      	muls	r5, r7
 8002700:	0412      	lsls	r2, r2, #16
 8002702:	4448      	add	r0, r9
 8002704:	4490      	add	r8, r2
 8002706:	46a9      	mov	r9, r5
 8002708:	0032      	movs	r2, r6
 800270a:	4665      	mov	r5, ip
 800270c:	4362      	muls	r2, r4
 800270e:	436e      	muls	r6, r5
 8002710:	437c      	muls	r4, r7
 8002712:	0c17      	lsrs	r7, r2, #16
 8002714:	1936      	adds	r6, r6, r4
 8002716:	19bf      	adds	r7, r7, r6
 8002718:	42bc      	cmp	r4, r7
 800271a:	d903      	bls.n	8002724 <__aeabi_dmul+0x434>
 800271c:	2480      	movs	r4, #128	@ 0x80
 800271e:	0264      	lsls	r4, r4, #9
 8002720:	46a4      	mov	ip, r4
 8002722:	44e1      	add	r9, ip
 8002724:	9c02      	ldr	r4, [sp, #8]
 8002726:	9e03      	ldr	r6, [sp, #12]
 8002728:	46a4      	mov	ip, r4
 800272a:	9d05      	ldr	r5, [sp, #20]
 800272c:	4466      	add	r6, ip
 800272e:	428e      	cmp	r6, r1
 8002730:	4189      	sbcs	r1, r1
 8002732:	46ac      	mov	ip, r5
 8002734:	0412      	lsls	r2, r2, #16
 8002736:	043c      	lsls	r4, r7, #16
 8002738:	0c12      	lsrs	r2, r2, #16
 800273a:	18a2      	adds	r2, r4, r2
 800273c:	4462      	add	r2, ip
 800273e:	4249      	negs	r1, r1
 8002740:	1854      	adds	r4, r2, r1
 8002742:	4446      	add	r6, r8
 8002744:	46a4      	mov	ip, r4
 8002746:	4546      	cmp	r6, r8
 8002748:	41a4      	sbcs	r4, r4
 800274a:	4682      	mov	sl, r0
 800274c:	4264      	negs	r4, r4
 800274e:	46a0      	mov	r8, r4
 8002750:	42aa      	cmp	r2, r5
 8002752:	4192      	sbcs	r2, r2
 8002754:	458c      	cmp	ip, r1
 8002756:	4189      	sbcs	r1, r1
 8002758:	44e2      	add	sl, ip
 800275a:	44d0      	add	r8, sl
 800275c:	4249      	negs	r1, r1
 800275e:	4252      	negs	r2, r2
 8002760:	430a      	orrs	r2, r1
 8002762:	45a0      	cmp	r8, r4
 8002764:	41a4      	sbcs	r4, r4
 8002766:	4582      	cmp	sl, r0
 8002768:	4189      	sbcs	r1, r1
 800276a:	4264      	negs	r4, r4
 800276c:	4249      	negs	r1, r1
 800276e:	430c      	orrs	r4, r1
 8002770:	4641      	mov	r1, r8
 8002772:	0c3f      	lsrs	r7, r7, #16
 8002774:	19d2      	adds	r2, r2, r7
 8002776:	1912      	adds	r2, r2, r4
 8002778:	0dcc      	lsrs	r4, r1, #23
 800277a:	9904      	ldr	r1, [sp, #16]
 800277c:	0270      	lsls	r0, r6, #9
 800277e:	4308      	orrs	r0, r1
 8002780:	1e41      	subs	r1, r0, #1
 8002782:	4188      	sbcs	r0, r1
 8002784:	4641      	mov	r1, r8
 8002786:	444a      	add	r2, r9
 8002788:	0df6      	lsrs	r6, r6, #23
 800278a:	0252      	lsls	r2, r2, #9
 800278c:	4330      	orrs	r0, r6
 800278e:	0249      	lsls	r1, r1, #9
 8002790:	4314      	orrs	r4, r2
 8002792:	4308      	orrs	r0, r1
 8002794:	01d2      	lsls	r2, r2, #7
 8002796:	d535      	bpl.n	8002804 <__aeabi_dmul+0x514>
 8002798:	2201      	movs	r2, #1
 800279a:	0843      	lsrs	r3, r0, #1
 800279c:	4002      	ands	r2, r0
 800279e:	4313      	orrs	r3, r2
 80027a0:	07e0      	lsls	r0, r4, #31
 80027a2:	4318      	orrs	r0, r3
 80027a4:	0864      	lsrs	r4, r4, #1
 80027a6:	e634      	b.n	8002412 <__aeabi_dmul+0x122>
 80027a8:	9b00      	ldr	r3, [sp, #0]
 80027aa:	46a2      	mov	sl, r4
 80027ac:	469b      	mov	fp, r3
 80027ae:	4681      	mov	r9, r0
 80027b0:	2480      	movs	r4, #128	@ 0x80
 80027b2:	4653      	mov	r3, sl
 80027b4:	0324      	lsls	r4, r4, #12
 80027b6:	431c      	orrs	r4, r3
 80027b8:	0324      	lsls	r4, r4, #12
 80027ba:	464a      	mov	r2, r9
 80027bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002878 <__aeabi_dmul+0x588>)
 80027be:	0b24      	lsrs	r4, r4, #12
 80027c0:	e5ec      	b.n	800239c <__aeabi_dmul+0xac>
 80027c2:	f000 fd75 	bl	80032b0 <__clzsi2>
 80027c6:	2315      	movs	r3, #21
 80027c8:	469c      	mov	ip, r3
 80027ca:	4484      	add	ip, r0
 80027cc:	0002      	movs	r2, r0
 80027ce:	4663      	mov	r3, ip
 80027d0:	3220      	adds	r2, #32
 80027d2:	2b1c      	cmp	r3, #28
 80027d4:	dc00      	bgt.n	80027d8 <__aeabi_dmul+0x4e8>
 80027d6:	e684      	b.n	80024e2 <__aeabi_dmul+0x1f2>
 80027d8:	2300      	movs	r3, #0
 80027da:	4699      	mov	r9, r3
 80027dc:	0023      	movs	r3, r4
 80027de:	3808      	subs	r0, #8
 80027e0:	4083      	lsls	r3, r0
 80027e2:	469a      	mov	sl, r3
 80027e4:	e68e      	b.n	8002504 <__aeabi_dmul+0x214>
 80027e6:	f000 fd63 	bl	80032b0 <__clzsi2>
 80027ea:	0002      	movs	r2, r0
 80027ec:	0003      	movs	r3, r0
 80027ee:	3215      	adds	r2, #21
 80027f0:	3320      	adds	r3, #32
 80027f2:	2a1c      	cmp	r2, #28
 80027f4:	dc00      	bgt.n	80027f8 <__aeabi_dmul+0x508>
 80027f6:	e64e      	b.n	8002496 <__aeabi_dmul+0x1a6>
 80027f8:	0002      	movs	r2, r0
 80027fa:	0034      	movs	r4, r6
 80027fc:	3a08      	subs	r2, #8
 80027fe:	2000      	movs	r0, #0
 8002800:	4094      	lsls	r4, r2
 8002802:	e652      	b.n	80024aa <__aeabi_dmul+0x1ba>
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	e604      	b.n	8002412 <__aeabi_dmul+0x122>
 8002808:	4b1c      	ldr	r3, [pc, #112]	@ (800287c <__aeabi_dmul+0x58c>)
 800280a:	0021      	movs	r1, r4
 800280c:	469c      	mov	ip, r3
 800280e:	0003      	movs	r3, r0
 8002810:	9d01      	ldr	r5, [sp, #4]
 8002812:	40d3      	lsrs	r3, r2
 8002814:	4465      	add	r5, ip
 8002816:	40a9      	lsls	r1, r5
 8002818:	4319      	orrs	r1, r3
 800281a:	0003      	movs	r3, r0
 800281c:	40ab      	lsls	r3, r5
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	4183      	sbcs	r3, r0
 8002822:	4319      	orrs	r1, r3
 8002824:	0008      	movs	r0, r1
 8002826:	40d4      	lsrs	r4, r2
 8002828:	074b      	lsls	r3, r1, #29
 800282a:	d009      	beq.n	8002840 <__aeabi_dmul+0x550>
 800282c:	230f      	movs	r3, #15
 800282e:	400b      	ands	r3, r1
 8002830:	2b04      	cmp	r3, #4
 8002832:	d005      	beq.n	8002840 <__aeabi_dmul+0x550>
 8002834:	1d0b      	adds	r3, r1, #4
 8002836:	428b      	cmp	r3, r1
 8002838:	4180      	sbcs	r0, r0
 800283a:	4240      	negs	r0, r0
 800283c:	1824      	adds	r4, r4, r0
 800283e:	0018      	movs	r0, r3
 8002840:	0223      	lsls	r3, r4, #8
 8002842:	d400      	bmi.n	8002846 <__aeabi_dmul+0x556>
 8002844:	e6d6      	b.n	80025f4 <__aeabi_dmul+0x304>
 8002846:	2301      	movs	r3, #1
 8002848:	2400      	movs	r4, #0
 800284a:	2200      	movs	r2, #0
 800284c:	e5a6      	b.n	800239c <__aeabi_dmul+0xac>
 800284e:	290f      	cmp	r1, #15
 8002850:	d1aa      	bne.n	80027a8 <__aeabi_dmul+0x4b8>
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	4652      	mov	r2, sl
 8002856:	031b      	lsls	r3, r3, #12
 8002858:	421a      	tst	r2, r3
 800285a:	d0a9      	beq.n	80027b0 <__aeabi_dmul+0x4c0>
 800285c:	421c      	tst	r4, r3
 800285e:	d1a7      	bne.n	80027b0 <__aeabi_dmul+0x4c0>
 8002860:	431c      	orrs	r4, r3
 8002862:	9b00      	ldr	r3, [sp, #0]
 8002864:	0002      	movs	r2, r0
 8002866:	469b      	mov	fp, r3
 8002868:	4b03      	ldr	r3, [pc, #12]	@ (8002878 <__aeabi_dmul+0x588>)
 800286a:	e597      	b.n	800239c <__aeabi_dmul+0xac>
 800286c:	2400      	movs	r4, #0
 800286e:	e6c1      	b.n	80025f4 <__aeabi_dmul+0x304>
 8002870:	2400      	movs	r4, #0
 8002872:	4b01      	ldr	r3, [pc, #4]	@ (8002878 <__aeabi_dmul+0x588>)
 8002874:	0022      	movs	r2, r4
 8002876:	e591      	b.n	800239c <__aeabi_dmul+0xac>
 8002878:	000007ff 	.word	0x000007ff
 800287c:	0000041e 	.word	0x0000041e

08002880 <__aeabi_dsub>:
 8002880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002882:	464e      	mov	r6, r9
 8002884:	4645      	mov	r5, r8
 8002886:	46de      	mov	lr, fp
 8002888:	4657      	mov	r7, sl
 800288a:	b5e0      	push	{r5, r6, r7, lr}
 800288c:	b085      	sub	sp, #20
 800288e:	9000      	str	r0, [sp, #0]
 8002890:	9101      	str	r1, [sp, #4]
 8002892:	030c      	lsls	r4, r1, #12
 8002894:	004f      	lsls	r7, r1, #1
 8002896:	0fce      	lsrs	r6, r1, #31
 8002898:	0a61      	lsrs	r1, r4, #9
 800289a:	9c00      	ldr	r4, [sp, #0]
 800289c:	46b0      	mov	r8, r6
 800289e:	0f64      	lsrs	r4, r4, #29
 80028a0:	430c      	orrs	r4, r1
 80028a2:	9900      	ldr	r1, [sp, #0]
 80028a4:	0d7f      	lsrs	r7, r7, #21
 80028a6:	00c8      	lsls	r0, r1, #3
 80028a8:	0011      	movs	r1, r2
 80028aa:	001a      	movs	r2, r3
 80028ac:	031b      	lsls	r3, r3, #12
 80028ae:	469c      	mov	ip, r3
 80028b0:	9100      	str	r1, [sp, #0]
 80028b2:	9201      	str	r2, [sp, #4]
 80028b4:	0051      	lsls	r1, r2, #1
 80028b6:	0d4b      	lsrs	r3, r1, #21
 80028b8:	4699      	mov	r9, r3
 80028ba:	9b01      	ldr	r3, [sp, #4]
 80028bc:	9d00      	ldr	r5, [sp, #0]
 80028be:	0fd9      	lsrs	r1, r3, #31
 80028c0:	4663      	mov	r3, ip
 80028c2:	0f6a      	lsrs	r2, r5, #29
 80028c4:	0a5b      	lsrs	r3, r3, #9
 80028c6:	4313      	orrs	r3, r2
 80028c8:	00ea      	lsls	r2, r5, #3
 80028ca:	4694      	mov	ip, r2
 80028cc:	4693      	mov	fp, r2
 80028ce:	4ac1      	ldr	r2, [pc, #772]	@ (8002bd4 <__aeabi_dsub+0x354>)
 80028d0:	9003      	str	r0, [sp, #12]
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	4591      	cmp	r9, r2
 80028d6:	d100      	bne.n	80028da <__aeabi_dsub+0x5a>
 80028d8:	e0cd      	b.n	8002a76 <__aeabi_dsub+0x1f6>
 80028da:	2501      	movs	r5, #1
 80028dc:	4069      	eors	r1, r5
 80028de:	464d      	mov	r5, r9
 80028e0:	1b7d      	subs	r5, r7, r5
 80028e2:	46aa      	mov	sl, r5
 80028e4:	428e      	cmp	r6, r1
 80028e6:	d100      	bne.n	80028ea <__aeabi_dsub+0x6a>
 80028e8:	e080      	b.n	80029ec <__aeabi_dsub+0x16c>
 80028ea:	2d00      	cmp	r5, #0
 80028ec:	dc00      	bgt.n	80028f0 <__aeabi_dsub+0x70>
 80028ee:	e335      	b.n	8002f5c <__aeabi_dsub+0x6dc>
 80028f0:	4649      	mov	r1, r9
 80028f2:	2900      	cmp	r1, #0
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dsub+0x78>
 80028f6:	e0df      	b.n	8002ab8 <__aeabi_dsub+0x238>
 80028f8:	4297      	cmp	r7, r2
 80028fa:	d100      	bne.n	80028fe <__aeabi_dsub+0x7e>
 80028fc:	e194      	b.n	8002c28 <__aeabi_dsub+0x3a8>
 80028fe:	4652      	mov	r2, sl
 8002900:	2501      	movs	r5, #1
 8002902:	2a38      	cmp	r2, #56	@ 0x38
 8002904:	dc19      	bgt.n	800293a <__aeabi_dsub+0xba>
 8002906:	2280      	movs	r2, #128	@ 0x80
 8002908:	9b02      	ldr	r3, [sp, #8]
 800290a:	0412      	lsls	r2, r2, #16
 800290c:	4313      	orrs	r3, r2
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	4652      	mov	r2, sl
 8002912:	2a1f      	cmp	r2, #31
 8002914:	dd00      	ble.n	8002918 <__aeabi_dsub+0x98>
 8002916:	e1e3      	b.n	8002ce0 <__aeabi_dsub+0x460>
 8002918:	4653      	mov	r3, sl
 800291a:	2220      	movs	r2, #32
 800291c:	4661      	mov	r1, ip
 800291e:	9d02      	ldr	r5, [sp, #8]
 8002920:	1ad2      	subs	r2, r2, r3
 8002922:	4095      	lsls	r5, r2
 8002924:	40d9      	lsrs	r1, r3
 8002926:	430d      	orrs	r5, r1
 8002928:	4661      	mov	r1, ip
 800292a:	4091      	lsls	r1, r2
 800292c:	000a      	movs	r2, r1
 800292e:	1e51      	subs	r1, r2, #1
 8002930:	418a      	sbcs	r2, r1
 8002932:	4315      	orrs	r5, r2
 8002934:	9a02      	ldr	r2, [sp, #8]
 8002936:	40da      	lsrs	r2, r3
 8002938:	1aa4      	subs	r4, r4, r2
 800293a:	1b45      	subs	r5, r0, r5
 800293c:	42a8      	cmp	r0, r5
 800293e:	4180      	sbcs	r0, r0
 8002940:	4240      	negs	r0, r0
 8002942:	1a24      	subs	r4, r4, r0
 8002944:	0223      	lsls	r3, r4, #8
 8002946:	d400      	bmi.n	800294a <__aeabi_dsub+0xca>
 8002948:	e13d      	b.n	8002bc6 <__aeabi_dsub+0x346>
 800294a:	0264      	lsls	r4, r4, #9
 800294c:	0a64      	lsrs	r4, r4, #9
 800294e:	2c00      	cmp	r4, #0
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0xd4>
 8002952:	e147      	b.n	8002be4 <__aeabi_dsub+0x364>
 8002954:	0020      	movs	r0, r4
 8002956:	f000 fcab 	bl	80032b0 <__clzsi2>
 800295a:	0003      	movs	r3, r0
 800295c:	3b08      	subs	r3, #8
 800295e:	2120      	movs	r1, #32
 8002960:	0028      	movs	r0, r5
 8002962:	1aca      	subs	r2, r1, r3
 8002964:	40d0      	lsrs	r0, r2
 8002966:	409c      	lsls	r4, r3
 8002968:	0002      	movs	r2, r0
 800296a:	409d      	lsls	r5, r3
 800296c:	4322      	orrs	r2, r4
 800296e:	429f      	cmp	r7, r3
 8002970:	dd00      	ble.n	8002974 <__aeabi_dsub+0xf4>
 8002972:	e177      	b.n	8002c64 <__aeabi_dsub+0x3e4>
 8002974:	1bd8      	subs	r0, r3, r7
 8002976:	3001      	adds	r0, #1
 8002978:	1a09      	subs	r1, r1, r0
 800297a:	002c      	movs	r4, r5
 800297c:	408d      	lsls	r5, r1
 800297e:	40c4      	lsrs	r4, r0
 8002980:	1e6b      	subs	r3, r5, #1
 8002982:	419d      	sbcs	r5, r3
 8002984:	0013      	movs	r3, r2
 8002986:	40c2      	lsrs	r2, r0
 8002988:	408b      	lsls	r3, r1
 800298a:	4325      	orrs	r5, r4
 800298c:	2700      	movs	r7, #0
 800298e:	0014      	movs	r4, r2
 8002990:	431d      	orrs	r5, r3
 8002992:	076b      	lsls	r3, r5, #29
 8002994:	d009      	beq.n	80029aa <__aeabi_dsub+0x12a>
 8002996:	230f      	movs	r3, #15
 8002998:	402b      	ands	r3, r5
 800299a:	2b04      	cmp	r3, #4
 800299c:	d005      	beq.n	80029aa <__aeabi_dsub+0x12a>
 800299e:	1d2b      	adds	r3, r5, #4
 80029a0:	42ab      	cmp	r3, r5
 80029a2:	41ad      	sbcs	r5, r5
 80029a4:	426d      	negs	r5, r5
 80029a6:	1964      	adds	r4, r4, r5
 80029a8:	001d      	movs	r5, r3
 80029aa:	0223      	lsls	r3, r4, #8
 80029ac:	d400      	bmi.n	80029b0 <__aeabi_dsub+0x130>
 80029ae:	e140      	b.n	8002c32 <__aeabi_dsub+0x3b2>
 80029b0:	4a88      	ldr	r2, [pc, #544]	@ (8002bd4 <__aeabi_dsub+0x354>)
 80029b2:	3701      	adds	r7, #1
 80029b4:	4297      	cmp	r7, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dsub+0x13a>
 80029b8:	e101      	b.n	8002bbe <__aeabi_dsub+0x33e>
 80029ba:	2601      	movs	r6, #1
 80029bc:	4643      	mov	r3, r8
 80029be:	4986      	ldr	r1, [pc, #536]	@ (8002bd8 <__aeabi_dsub+0x358>)
 80029c0:	08ed      	lsrs	r5, r5, #3
 80029c2:	4021      	ands	r1, r4
 80029c4:	074a      	lsls	r2, r1, #29
 80029c6:	432a      	orrs	r2, r5
 80029c8:	057c      	lsls	r4, r7, #21
 80029ca:	024d      	lsls	r5, r1, #9
 80029cc:	0b2d      	lsrs	r5, r5, #12
 80029ce:	0d64      	lsrs	r4, r4, #21
 80029d0:	401e      	ands	r6, r3
 80029d2:	0524      	lsls	r4, r4, #20
 80029d4:	432c      	orrs	r4, r5
 80029d6:	07f6      	lsls	r6, r6, #31
 80029d8:	4334      	orrs	r4, r6
 80029da:	0010      	movs	r0, r2
 80029dc:	0021      	movs	r1, r4
 80029de:	b005      	add	sp, #20
 80029e0:	bcf0      	pop	{r4, r5, r6, r7}
 80029e2:	46bb      	mov	fp, r7
 80029e4:	46b2      	mov	sl, r6
 80029e6:	46a9      	mov	r9, r5
 80029e8:	46a0      	mov	r8, r4
 80029ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ec:	2d00      	cmp	r5, #0
 80029ee:	dc00      	bgt.n	80029f2 <__aeabi_dsub+0x172>
 80029f0:	e2d0      	b.n	8002f94 <__aeabi_dsub+0x714>
 80029f2:	4649      	mov	r1, r9
 80029f4:	2900      	cmp	r1, #0
 80029f6:	d000      	beq.n	80029fa <__aeabi_dsub+0x17a>
 80029f8:	e0d4      	b.n	8002ba4 <__aeabi_dsub+0x324>
 80029fa:	4661      	mov	r1, ip
 80029fc:	9b02      	ldr	r3, [sp, #8]
 80029fe:	4319      	orrs	r1, r3
 8002a00:	d100      	bne.n	8002a04 <__aeabi_dsub+0x184>
 8002a02:	e12b      	b.n	8002c5c <__aeabi_dsub+0x3dc>
 8002a04:	1e69      	subs	r1, r5, #1
 8002a06:	2d01      	cmp	r5, #1
 8002a08:	d100      	bne.n	8002a0c <__aeabi_dsub+0x18c>
 8002a0a:	e1d9      	b.n	8002dc0 <__aeabi_dsub+0x540>
 8002a0c:	4295      	cmp	r5, r2
 8002a0e:	d100      	bne.n	8002a12 <__aeabi_dsub+0x192>
 8002a10:	e10a      	b.n	8002c28 <__aeabi_dsub+0x3a8>
 8002a12:	2501      	movs	r5, #1
 8002a14:	2938      	cmp	r1, #56	@ 0x38
 8002a16:	dc17      	bgt.n	8002a48 <__aeabi_dsub+0x1c8>
 8002a18:	468a      	mov	sl, r1
 8002a1a:	4653      	mov	r3, sl
 8002a1c:	2b1f      	cmp	r3, #31
 8002a1e:	dd00      	ble.n	8002a22 <__aeabi_dsub+0x1a2>
 8002a20:	e1e7      	b.n	8002df2 <__aeabi_dsub+0x572>
 8002a22:	2220      	movs	r2, #32
 8002a24:	1ad2      	subs	r2, r2, r3
 8002a26:	9b02      	ldr	r3, [sp, #8]
 8002a28:	4661      	mov	r1, ip
 8002a2a:	4093      	lsls	r3, r2
 8002a2c:	001d      	movs	r5, r3
 8002a2e:	4653      	mov	r3, sl
 8002a30:	40d9      	lsrs	r1, r3
 8002a32:	4663      	mov	r3, ip
 8002a34:	4093      	lsls	r3, r2
 8002a36:	001a      	movs	r2, r3
 8002a38:	430d      	orrs	r5, r1
 8002a3a:	1e51      	subs	r1, r2, #1
 8002a3c:	418a      	sbcs	r2, r1
 8002a3e:	4653      	mov	r3, sl
 8002a40:	4315      	orrs	r5, r2
 8002a42:	9a02      	ldr	r2, [sp, #8]
 8002a44:	40da      	lsrs	r2, r3
 8002a46:	18a4      	adds	r4, r4, r2
 8002a48:	182d      	adds	r5, r5, r0
 8002a4a:	4285      	cmp	r5, r0
 8002a4c:	4180      	sbcs	r0, r0
 8002a4e:	4240      	negs	r0, r0
 8002a50:	1824      	adds	r4, r4, r0
 8002a52:	0223      	lsls	r3, r4, #8
 8002a54:	d400      	bmi.n	8002a58 <__aeabi_dsub+0x1d8>
 8002a56:	e0b6      	b.n	8002bc6 <__aeabi_dsub+0x346>
 8002a58:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd4 <__aeabi_dsub+0x354>)
 8002a5a:	3701      	adds	r7, #1
 8002a5c:	429f      	cmp	r7, r3
 8002a5e:	d100      	bne.n	8002a62 <__aeabi_dsub+0x1e2>
 8002a60:	e0ad      	b.n	8002bbe <__aeabi_dsub+0x33e>
 8002a62:	2101      	movs	r1, #1
 8002a64:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd8 <__aeabi_dsub+0x358>)
 8002a66:	086a      	lsrs	r2, r5, #1
 8002a68:	401c      	ands	r4, r3
 8002a6a:	4029      	ands	r1, r5
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	07e5      	lsls	r5, r4, #31
 8002a70:	4315      	orrs	r5, r2
 8002a72:	0864      	lsrs	r4, r4, #1
 8002a74:	e78d      	b.n	8002992 <__aeabi_dsub+0x112>
 8002a76:	4a59      	ldr	r2, [pc, #356]	@ (8002bdc <__aeabi_dsub+0x35c>)
 8002a78:	9b02      	ldr	r3, [sp, #8]
 8002a7a:	4692      	mov	sl, r2
 8002a7c:	4662      	mov	r2, ip
 8002a7e:	44ba      	add	sl, r7
 8002a80:	431a      	orrs	r2, r3
 8002a82:	d02c      	beq.n	8002ade <__aeabi_dsub+0x25e>
 8002a84:	428e      	cmp	r6, r1
 8002a86:	d02e      	beq.n	8002ae6 <__aeabi_dsub+0x266>
 8002a88:	4652      	mov	r2, sl
 8002a8a:	2a00      	cmp	r2, #0
 8002a8c:	d060      	beq.n	8002b50 <__aeabi_dsub+0x2d0>
 8002a8e:	2f00      	cmp	r7, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x214>
 8002a92:	e0db      	b.n	8002c4c <__aeabi_dsub+0x3cc>
 8002a94:	4663      	mov	r3, ip
 8002a96:	000e      	movs	r6, r1
 8002a98:	9c02      	ldr	r4, [sp, #8]
 8002a9a:	08d8      	lsrs	r0, r3, #3
 8002a9c:	0762      	lsls	r2, r4, #29
 8002a9e:	4302      	orrs	r2, r0
 8002aa0:	08e4      	lsrs	r4, r4, #3
 8002aa2:	0013      	movs	r3, r2
 8002aa4:	4323      	orrs	r3, r4
 8002aa6:	d100      	bne.n	8002aaa <__aeabi_dsub+0x22a>
 8002aa8:	e254      	b.n	8002f54 <__aeabi_dsub+0x6d4>
 8002aaa:	2580      	movs	r5, #128	@ 0x80
 8002aac:	032d      	lsls	r5, r5, #12
 8002aae:	4325      	orrs	r5, r4
 8002ab0:	032d      	lsls	r5, r5, #12
 8002ab2:	4c48      	ldr	r4, [pc, #288]	@ (8002bd4 <__aeabi_dsub+0x354>)
 8002ab4:	0b2d      	lsrs	r5, r5, #12
 8002ab6:	e78c      	b.n	80029d2 <__aeabi_dsub+0x152>
 8002ab8:	4661      	mov	r1, ip
 8002aba:	9b02      	ldr	r3, [sp, #8]
 8002abc:	4319      	orrs	r1, r3
 8002abe:	d100      	bne.n	8002ac2 <__aeabi_dsub+0x242>
 8002ac0:	e0cc      	b.n	8002c5c <__aeabi_dsub+0x3dc>
 8002ac2:	0029      	movs	r1, r5
 8002ac4:	3901      	subs	r1, #1
 8002ac6:	2d01      	cmp	r5, #1
 8002ac8:	d100      	bne.n	8002acc <__aeabi_dsub+0x24c>
 8002aca:	e188      	b.n	8002dde <__aeabi_dsub+0x55e>
 8002acc:	4295      	cmp	r5, r2
 8002ace:	d100      	bne.n	8002ad2 <__aeabi_dsub+0x252>
 8002ad0:	e0aa      	b.n	8002c28 <__aeabi_dsub+0x3a8>
 8002ad2:	2501      	movs	r5, #1
 8002ad4:	2938      	cmp	r1, #56	@ 0x38
 8002ad6:	dd00      	ble.n	8002ada <__aeabi_dsub+0x25a>
 8002ad8:	e72f      	b.n	800293a <__aeabi_dsub+0xba>
 8002ada:	468a      	mov	sl, r1
 8002adc:	e718      	b.n	8002910 <__aeabi_dsub+0x90>
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4051      	eors	r1, r2
 8002ae2:	428e      	cmp	r6, r1
 8002ae4:	d1d0      	bne.n	8002a88 <__aeabi_dsub+0x208>
 8002ae6:	4653      	mov	r3, sl
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dsub+0x26e>
 8002aec:	e0be      	b.n	8002c6c <__aeabi_dsub+0x3ec>
 8002aee:	2f00      	cmp	r7, #0
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x274>
 8002af2:	e138      	b.n	8002d66 <__aeabi_dsub+0x4e6>
 8002af4:	46ca      	mov	sl, r9
 8002af6:	0022      	movs	r2, r4
 8002af8:	4302      	orrs	r2, r0
 8002afa:	d100      	bne.n	8002afe <__aeabi_dsub+0x27e>
 8002afc:	e1e2      	b.n	8002ec4 <__aeabi_dsub+0x644>
 8002afe:	4653      	mov	r3, sl
 8002b00:	1e59      	subs	r1, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x288>
 8002b06:	e20d      	b.n	8002f24 <__aeabi_dsub+0x6a4>
 8002b08:	4a32      	ldr	r2, [pc, #200]	@ (8002bd4 <__aeabi_dsub+0x354>)
 8002b0a:	4592      	cmp	sl, r2
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dsub+0x290>
 8002b0e:	e1d2      	b.n	8002eb6 <__aeabi_dsub+0x636>
 8002b10:	2701      	movs	r7, #1
 8002b12:	2938      	cmp	r1, #56	@ 0x38
 8002b14:	dc13      	bgt.n	8002b3e <__aeabi_dsub+0x2be>
 8002b16:	291f      	cmp	r1, #31
 8002b18:	dd00      	ble.n	8002b1c <__aeabi_dsub+0x29c>
 8002b1a:	e1ee      	b.n	8002efa <__aeabi_dsub+0x67a>
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	9b02      	ldr	r3, [sp, #8]
 8002b20:	1a52      	subs	r2, r2, r1
 8002b22:	0025      	movs	r5, r4
 8002b24:	0007      	movs	r7, r0
 8002b26:	469a      	mov	sl, r3
 8002b28:	40cc      	lsrs	r4, r1
 8002b2a:	4090      	lsls	r0, r2
 8002b2c:	4095      	lsls	r5, r2
 8002b2e:	40cf      	lsrs	r7, r1
 8002b30:	44a2      	add	sl, r4
 8002b32:	1e42      	subs	r2, r0, #1
 8002b34:	4190      	sbcs	r0, r2
 8002b36:	4653      	mov	r3, sl
 8002b38:	432f      	orrs	r7, r5
 8002b3a:	4307      	orrs	r7, r0
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	003d      	movs	r5, r7
 8002b40:	4465      	add	r5, ip
 8002b42:	4565      	cmp	r5, ip
 8002b44:	4192      	sbcs	r2, r2
 8002b46:	9b02      	ldr	r3, [sp, #8]
 8002b48:	4252      	negs	r2, r2
 8002b4a:	464f      	mov	r7, r9
 8002b4c:	18d4      	adds	r4, r2, r3
 8002b4e:	e780      	b.n	8002a52 <__aeabi_dsub+0x1d2>
 8002b50:	4a23      	ldr	r2, [pc, #140]	@ (8002be0 <__aeabi_dsub+0x360>)
 8002b52:	1c7d      	adds	r5, r7, #1
 8002b54:	4215      	tst	r5, r2
 8002b56:	d000      	beq.n	8002b5a <__aeabi_dsub+0x2da>
 8002b58:	e0aa      	b.n	8002cb0 <__aeabi_dsub+0x430>
 8002b5a:	4662      	mov	r2, ip
 8002b5c:	0025      	movs	r5, r4
 8002b5e:	9b02      	ldr	r3, [sp, #8]
 8002b60:	4305      	orrs	r5, r0
 8002b62:	431a      	orrs	r2, r3
 8002b64:	2f00      	cmp	r7, #0
 8002b66:	d000      	beq.n	8002b6a <__aeabi_dsub+0x2ea>
 8002b68:	e0f5      	b.n	8002d56 <__aeabi_dsub+0x4d6>
 8002b6a:	2d00      	cmp	r5, #0
 8002b6c:	d100      	bne.n	8002b70 <__aeabi_dsub+0x2f0>
 8002b6e:	e16b      	b.n	8002e48 <__aeabi_dsub+0x5c8>
 8002b70:	2a00      	cmp	r2, #0
 8002b72:	d100      	bne.n	8002b76 <__aeabi_dsub+0x2f6>
 8002b74:	e152      	b.n	8002e1c <__aeabi_dsub+0x59c>
 8002b76:	4663      	mov	r3, ip
 8002b78:	1ac5      	subs	r5, r0, r3
 8002b7a:	9b02      	ldr	r3, [sp, #8]
 8002b7c:	1ae2      	subs	r2, r4, r3
 8002b7e:	42a8      	cmp	r0, r5
 8002b80:	419b      	sbcs	r3, r3
 8002b82:	425b      	negs	r3, r3
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	021a      	lsls	r2, r3, #8
 8002b88:	d400      	bmi.n	8002b8c <__aeabi_dsub+0x30c>
 8002b8a:	e1d5      	b.n	8002f38 <__aeabi_dsub+0x6b8>
 8002b8c:	4663      	mov	r3, ip
 8002b8e:	1a1d      	subs	r5, r3, r0
 8002b90:	45ac      	cmp	ip, r5
 8002b92:	4192      	sbcs	r2, r2
 8002b94:	2601      	movs	r6, #1
 8002b96:	9b02      	ldr	r3, [sp, #8]
 8002b98:	4252      	negs	r2, r2
 8002b9a:	1b1c      	subs	r4, r3, r4
 8002b9c:	4688      	mov	r8, r1
 8002b9e:	1aa4      	subs	r4, r4, r2
 8002ba0:	400e      	ands	r6, r1
 8002ba2:	e6f6      	b.n	8002992 <__aeabi_dsub+0x112>
 8002ba4:	4297      	cmp	r7, r2
 8002ba6:	d03f      	beq.n	8002c28 <__aeabi_dsub+0x3a8>
 8002ba8:	4652      	mov	r2, sl
 8002baa:	2501      	movs	r5, #1
 8002bac:	2a38      	cmp	r2, #56	@ 0x38
 8002bae:	dd00      	ble.n	8002bb2 <__aeabi_dsub+0x332>
 8002bb0:	e74a      	b.n	8002a48 <__aeabi_dsub+0x1c8>
 8002bb2:	2280      	movs	r2, #128	@ 0x80
 8002bb4:	9b02      	ldr	r3, [sp, #8]
 8002bb6:	0412      	lsls	r2, r2, #16
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	9302      	str	r3, [sp, #8]
 8002bbc:	e72d      	b.n	8002a1a <__aeabi_dsub+0x19a>
 8002bbe:	003c      	movs	r4, r7
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	e705      	b.n	80029d2 <__aeabi_dsub+0x152>
 8002bc6:	2307      	movs	r3, #7
 8002bc8:	402b      	ands	r3, r5
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d000      	beq.n	8002bd0 <__aeabi_dsub+0x350>
 8002bce:	e6e2      	b.n	8002996 <__aeabi_dsub+0x116>
 8002bd0:	e06b      	b.n	8002caa <__aeabi_dsub+0x42a>
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	000007ff 	.word	0x000007ff
 8002bd8:	ff7fffff 	.word	0xff7fffff
 8002bdc:	fffff801 	.word	0xfffff801
 8002be0:	000007fe 	.word	0x000007fe
 8002be4:	0028      	movs	r0, r5
 8002be6:	f000 fb63 	bl	80032b0 <__clzsi2>
 8002bea:	0003      	movs	r3, r0
 8002bec:	3318      	adds	r3, #24
 8002bee:	2b1f      	cmp	r3, #31
 8002bf0:	dc00      	bgt.n	8002bf4 <__aeabi_dsub+0x374>
 8002bf2:	e6b4      	b.n	800295e <__aeabi_dsub+0xde>
 8002bf4:	002a      	movs	r2, r5
 8002bf6:	3808      	subs	r0, #8
 8002bf8:	4082      	lsls	r2, r0
 8002bfa:	429f      	cmp	r7, r3
 8002bfc:	dd00      	ble.n	8002c00 <__aeabi_dsub+0x380>
 8002bfe:	e0b9      	b.n	8002d74 <__aeabi_dsub+0x4f4>
 8002c00:	1bdb      	subs	r3, r3, r7
 8002c02:	1c58      	adds	r0, r3, #1
 8002c04:	281f      	cmp	r0, #31
 8002c06:	dc00      	bgt.n	8002c0a <__aeabi_dsub+0x38a>
 8002c08:	e1a0      	b.n	8002f4c <__aeabi_dsub+0x6cc>
 8002c0a:	0015      	movs	r5, r2
 8002c0c:	3b1f      	subs	r3, #31
 8002c0e:	40dd      	lsrs	r5, r3
 8002c10:	2820      	cmp	r0, #32
 8002c12:	d005      	beq.n	8002c20 <__aeabi_dsub+0x3a0>
 8002c14:	2340      	movs	r3, #64	@ 0x40
 8002c16:	1a1b      	subs	r3, r3, r0
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	1e53      	subs	r3, r2, #1
 8002c1c:	419a      	sbcs	r2, r3
 8002c1e:	4315      	orrs	r5, r2
 8002c20:	2307      	movs	r3, #7
 8002c22:	2700      	movs	r7, #0
 8002c24:	402b      	ands	r3, r5
 8002c26:	e7d0      	b.n	8002bca <__aeabi_dsub+0x34a>
 8002c28:	08c0      	lsrs	r0, r0, #3
 8002c2a:	0762      	lsls	r2, r4, #29
 8002c2c:	4302      	orrs	r2, r0
 8002c2e:	08e4      	lsrs	r4, r4, #3
 8002c30:	e737      	b.n	8002aa2 <__aeabi_dsub+0x222>
 8002c32:	08ea      	lsrs	r2, r5, #3
 8002c34:	0763      	lsls	r3, r4, #29
 8002c36:	431a      	orrs	r2, r3
 8002c38:	4bd3      	ldr	r3, [pc, #844]	@ (8002f88 <__aeabi_dsub+0x708>)
 8002c3a:	08e4      	lsrs	r4, r4, #3
 8002c3c:	429f      	cmp	r7, r3
 8002c3e:	d100      	bne.n	8002c42 <__aeabi_dsub+0x3c2>
 8002c40:	e72f      	b.n	8002aa2 <__aeabi_dsub+0x222>
 8002c42:	0324      	lsls	r4, r4, #12
 8002c44:	0b25      	lsrs	r5, r4, #12
 8002c46:	057c      	lsls	r4, r7, #21
 8002c48:	0d64      	lsrs	r4, r4, #21
 8002c4a:	e6c2      	b.n	80029d2 <__aeabi_dsub+0x152>
 8002c4c:	46ca      	mov	sl, r9
 8002c4e:	0022      	movs	r2, r4
 8002c50:	4302      	orrs	r2, r0
 8002c52:	d158      	bne.n	8002d06 <__aeabi_dsub+0x486>
 8002c54:	4663      	mov	r3, ip
 8002c56:	000e      	movs	r6, r1
 8002c58:	9c02      	ldr	r4, [sp, #8]
 8002c5a:	9303      	str	r3, [sp, #12]
 8002c5c:	9b03      	ldr	r3, [sp, #12]
 8002c5e:	4657      	mov	r7, sl
 8002c60:	08da      	lsrs	r2, r3, #3
 8002c62:	e7e7      	b.n	8002c34 <__aeabi_dsub+0x3b4>
 8002c64:	4cc9      	ldr	r4, [pc, #804]	@ (8002f8c <__aeabi_dsub+0x70c>)
 8002c66:	1aff      	subs	r7, r7, r3
 8002c68:	4014      	ands	r4, r2
 8002c6a:	e692      	b.n	8002992 <__aeabi_dsub+0x112>
 8002c6c:	4dc8      	ldr	r5, [pc, #800]	@ (8002f90 <__aeabi_dsub+0x710>)
 8002c6e:	1c7a      	adds	r2, r7, #1
 8002c70:	422a      	tst	r2, r5
 8002c72:	d000      	beq.n	8002c76 <__aeabi_dsub+0x3f6>
 8002c74:	e084      	b.n	8002d80 <__aeabi_dsub+0x500>
 8002c76:	0022      	movs	r2, r4
 8002c78:	4302      	orrs	r2, r0
 8002c7a:	2f00      	cmp	r7, #0
 8002c7c:	d000      	beq.n	8002c80 <__aeabi_dsub+0x400>
 8002c7e:	e0ef      	b.n	8002e60 <__aeabi_dsub+0x5e0>
 8002c80:	2a00      	cmp	r2, #0
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x406>
 8002c84:	e0e5      	b.n	8002e52 <__aeabi_dsub+0x5d2>
 8002c86:	4662      	mov	r2, ip
 8002c88:	9902      	ldr	r1, [sp, #8]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	d100      	bne.n	8002c90 <__aeabi_dsub+0x410>
 8002c8e:	e0c5      	b.n	8002e1c <__aeabi_dsub+0x59c>
 8002c90:	4663      	mov	r3, ip
 8002c92:	18c5      	adds	r5, r0, r3
 8002c94:	468c      	mov	ip, r1
 8002c96:	4285      	cmp	r5, r0
 8002c98:	4180      	sbcs	r0, r0
 8002c9a:	4464      	add	r4, ip
 8002c9c:	4240      	negs	r0, r0
 8002c9e:	1824      	adds	r4, r4, r0
 8002ca0:	0223      	lsls	r3, r4, #8
 8002ca2:	d502      	bpl.n	8002caa <__aeabi_dsub+0x42a>
 8002ca4:	4bb9      	ldr	r3, [pc, #740]	@ (8002f8c <__aeabi_dsub+0x70c>)
 8002ca6:	3701      	adds	r7, #1
 8002ca8:	401c      	ands	r4, r3
 8002caa:	46ba      	mov	sl, r7
 8002cac:	9503      	str	r5, [sp, #12]
 8002cae:	e7d5      	b.n	8002c5c <__aeabi_dsub+0x3dc>
 8002cb0:	4662      	mov	r2, ip
 8002cb2:	1a85      	subs	r5, r0, r2
 8002cb4:	42a8      	cmp	r0, r5
 8002cb6:	4192      	sbcs	r2, r2
 8002cb8:	4252      	negs	r2, r2
 8002cba:	4691      	mov	r9, r2
 8002cbc:	9b02      	ldr	r3, [sp, #8]
 8002cbe:	1ae3      	subs	r3, r4, r3
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	1ad2      	subs	r2, r2, r3
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	4691      	mov	r9, r2
 8002cca:	021a      	lsls	r2, r3, #8
 8002ccc:	d46c      	bmi.n	8002da8 <__aeabi_dsub+0x528>
 8002cce:	464a      	mov	r2, r9
 8002cd0:	464c      	mov	r4, r9
 8002cd2:	432a      	orrs	r2, r5
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x458>
 8002cd6:	e63a      	b.n	800294e <__aeabi_dsub+0xce>
 8002cd8:	2600      	movs	r6, #0
 8002cda:	2400      	movs	r4, #0
 8002cdc:	2500      	movs	r5, #0
 8002cde:	e678      	b.n	80029d2 <__aeabi_dsub+0x152>
 8002ce0:	9902      	ldr	r1, [sp, #8]
 8002ce2:	4653      	mov	r3, sl
 8002ce4:	000d      	movs	r5, r1
 8002ce6:	3a20      	subs	r2, #32
 8002ce8:	40d5      	lsrs	r5, r2
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d006      	beq.n	8002cfc <__aeabi_dsub+0x47c>
 8002cee:	2240      	movs	r2, #64	@ 0x40
 8002cf0:	1ad2      	subs	r2, r2, r3
 8002cf2:	000b      	movs	r3, r1
 8002cf4:	4093      	lsls	r3, r2
 8002cf6:	4662      	mov	r2, ip
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	4693      	mov	fp, r2
 8002cfc:	465b      	mov	r3, fp
 8002cfe:	1e5a      	subs	r2, r3, #1
 8002d00:	4193      	sbcs	r3, r2
 8002d02:	431d      	orrs	r5, r3
 8002d04:	e619      	b.n	800293a <__aeabi_dsub+0xba>
 8002d06:	4653      	mov	r3, sl
 8002d08:	1e5a      	subs	r2, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d100      	bne.n	8002d10 <__aeabi_dsub+0x490>
 8002d0e:	e0c6      	b.n	8002e9e <__aeabi_dsub+0x61e>
 8002d10:	4e9d      	ldr	r6, [pc, #628]	@ (8002f88 <__aeabi_dsub+0x708>)
 8002d12:	45b2      	cmp	sl, r6
 8002d14:	d100      	bne.n	8002d18 <__aeabi_dsub+0x498>
 8002d16:	e6bd      	b.n	8002a94 <__aeabi_dsub+0x214>
 8002d18:	4688      	mov	r8, r1
 8002d1a:	000e      	movs	r6, r1
 8002d1c:	2501      	movs	r5, #1
 8002d1e:	2a38      	cmp	r2, #56	@ 0x38
 8002d20:	dc10      	bgt.n	8002d44 <__aeabi_dsub+0x4c4>
 8002d22:	2a1f      	cmp	r2, #31
 8002d24:	dc7f      	bgt.n	8002e26 <__aeabi_dsub+0x5a6>
 8002d26:	2120      	movs	r1, #32
 8002d28:	0025      	movs	r5, r4
 8002d2a:	1a89      	subs	r1, r1, r2
 8002d2c:	0007      	movs	r7, r0
 8002d2e:	4088      	lsls	r0, r1
 8002d30:	408d      	lsls	r5, r1
 8002d32:	40d7      	lsrs	r7, r2
 8002d34:	40d4      	lsrs	r4, r2
 8002d36:	1e41      	subs	r1, r0, #1
 8002d38:	4188      	sbcs	r0, r1
 8002d3a:	9b02      	ldr	r3, [sp, #8]
 8002d3c:	433d      	orrs	r5, r7
 8002d3e:	1b1b      	subs	r3, r3, r4
 8002d40:	4305      	orrs	r5, r0
 8002d42:	9302      	str	r3, [sp, #8]
 8002d44:	4662      	mov	r2, ip
 8002d46:	1b55      	subs	r5, r2, r5
 8002d48:	45ac      	cmp	ip, r5
 8002d4a:	4192      	sbcs	r2, r2
 8002d4c:	9b02      	ldr	r3, [sp, #8]
 8002d4e:	4252      	negs	r2, r2
 8002d50:	464f      	mov	r7, r9
 8002d52:	1a9c      	subs	r4, r3, r2
 8002d54:	e5f6      	b.n	8002944 <__aeabi_dsub+0xc4>
 8002d56:	2d00      	cmp	r5, #0
 8002d58:	d000      	beq.n	8002d5c <__aeabi_dsub+0x4dc>
 8002d5a:	e0b7      	b.n	8002ecc <__aeabi_dsub+0x64c>
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	d100      	bne.n	8002d62 <__aeabi_dsub+0x4e2>
 8002d60:	e0f0      	b.n	8002f44 <__aeabi_dsub+0x6c4>
 8002d62:	2601      	movs	r6, #1
 8002d64:	400e      	ands	r6, r1
 8002d66:	4663      	mov	r3, ip
 8002d68:	9802      	ldr	r0, [sp, #8]
 8002d6a:	08d9      	lsrs	r1, r3, #3
 8002d6c:	0742      	lsls	r2, r0, #29
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	08c4      	lsrs	r4, r0, #3
 8002d72:	e696      	b.n	8002aa2 <__aeabi_dsub+0x222>
 8002d74:	4c85      	ldr	r4, [pc, #532]	@ (8002f8c <__aeabi_dsub+0x70c>)
 8002d76:	1aff      	subs	r7, r7, r3
 8002d78:	4014      	ands	r4, r2
 8002d7a:	0762      	lsls	r2, r4, #29
 8002d7c:	08e4      	lsrs	r4, r4, #3
 8002d7e:	e760      	b.n	8002c42 <__aeabi_dsub+0x3c2>
 8002d80:	4981      	ldr	r1, [pc, #516]	@ (8002f88 <__aeabi_dsub+0x708>)
 8002d82:	428a      	cmp	r2, r1
 8002d84:	d100      	bne.n	8002d88 <__aeabi_dsub+0x508>
 8002d86:	e0c9      	b.n	8002f1c <__aeabi_dsub+0x69c>
 8002d88:	4663      	mov	r3, ip
 8002d8a:	18c1      	adds	r1, r0, r3
 8002d8c:	4281      	cmp	r1, r0
 8002d8e:	4180      	sbcs	r0, r0
 8002d90:	9b02      	ldr	r3, [sp, #8]
 8002d92:	4240      	negs	r0, r0
 8002d94:	18e3      	adds	r3, r4, r3
 8002d96:	181b      	adds	r3, r3, r0
 8002d98:	07dd      	lsls	r5, r3, #31
 8002d9a:	085c      	lsrs	r4, r3, #1
 8002d9c:	2307      	movs	r3, #7
 8002d9e:	0849      	lsrs	r1, r1, #1
 8002da0:	430d      	orrs	r5, r1
 8002da2:	0017      	movs	r7, r2
 8002da4:	402b      	ands	r3, r5
 8002da6:	e710      	b.n	8002bca <__aeabi_dsub+0x34a>
 8002da8:	4663      	mov	r3, ip
 8002daa:	1a1d      	subs	r5, r3, r0
 8002dac:	45ac      	cmp	ip, r5
 8002dae:	4192      	sbcs	r2, r2
 8002db0:	2601      	movs	r6, #1
 8002db2:	9b02      	ldr	r3, [sp, #8]
 8002db4:	4252      	negs	r2, r2
 8002db6:	1b1c      	subs	r4, r3, r4
 8002db8:	4688      	mov	r8, r1
 8002dba:	1aa4      	subs	r4, r4, r2
 8002dbc:	400e      	ands	r6, r1
 8002dbe:	e5c6      	b.n	800294e <__aeabi_dsub+0xce>
 8002dc0:	4663      	mov	r3, ip
 8002dc2:	18c5      	adds	r5, r0, r3
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4285      	cmp	r5, r0
 8002dc8:	4180      	sbcs	r0, r0
 8002dca:	469c      	mov	ip, r3
 8002dcc:	4240      	negs	r0, r0
 8002dce:	4464      	add	r4, ip
 8002dd0:	1824      	adds	r4, r4, r0
 8002dd2:	2701      	movs	r7, #1
 8002dd4:	0223      	lsls	r3, r4, #8
 8002dd6:	d400      	bmi.n	8002dda <__aeabi_dsub+0x55a>
 8002dd8:	e6f5      	b.n	8002bc6 <__aeabi_dsub+0x346>
 8002dda:	2702      	movs	r7, #2
 8002ddc:	e641      	b.n	8002a62 <__aeabi_dsub+0x1e2>
 8002dde:	4663      	mov	r3, ip
 8002de0:	1ac5      	subs	r5, r0, r3
 8002de2:	42a8      	cmp	r0, r5
 8002de4:	4180      	sbcs	r0, r0
 8002de6:	9b02      	ldr	r3, [sp, #8]
 8002de8:	4240      	negs	r0, r0
 8002dea:	1ae4      	subs	r4, r4, r3
 8002dec:	2701      	movs	r7, #1
 8002dee:	1a24      	subs	r4, r4, r0
 8002df0:	e5a8      	b.n	8002944 <__aeabi_dsub+0xc4>
 8002df2:	9d02      	ldr	r5, [sp, #8]
 8002df4:	4652      	mov	r2, sl
 8002df6:	002b      	movs	r3, r5
 8002df8:	3a20      	subs	r2, #32
 8002dfa:	40d3      	lsrs	r3, r2
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	4653      	mov	r3, sl
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d006      	beq.n	8002e12 <__aeabi_dsub+0x592>
 8002e04:	2240      	movs	r2, #64	@ 0x40
 8002e06:	1ad2      	subs	r2, r2, r3
 8002e08:	002b      	movs	r3, r5
 8002e0a:	4093      	lsls	r3, r2
 8002e0c:	4662      	mov	r2, ip
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	4693      	mov	fp, r2
 8002e12:	465d      	mov	r5, fp
 8002e14:	1e6b      	subs	r3, r5, #1
 8002e16:	419d      	sbcs	r5, r3
 8002e18:	430d      	orrs	r5, r1
 8002e1a:	e615      	b.n	8002a48 <__aeabi_dsub+0x1c8>
 8002e1c:	0762      	lsls	r2, r4, #29
 8002e1e:	08c0      	lsrs	r0, r0, #3
 8002e20:	4302      	orrs	r2, r0
 8002e22:	08e4      	lsrs	r4, r4, #3
 8002e24:	e70d      	b.n	8002c42 <__aeabi_dsub+0x3c2>
 8002e26:	0011      	movs	r1, r2
 8002e28:	0027      	movs	r7, r4
 8002e2a:	3920      	subs	r1, #32
 8002e2c:	40cf      	lsrs	r7, r1
 8002e2e:	2a20      	cmp	r2, #32
 8002e30:	d005      	beq.n	8002e3e <__aeabi_dsub+0x5be>
 8002e32:	2140      	movs	r1, #64	@ 0x40
 8002e34:	1a8a      	subs	r2, r1, r2
 8002e36:	4094      	lsls	r4, r2
 8002e38:	0025      	movs	r5, r4
 8002e3a:	4305      	orrs	r5, r0
 8002e3c:	9503      	str	r5, [sp, #12]
 8002e3e:	9d03      	ldr	r5, [sp, #12]
 8002e40:	1e6a      	subs	r2, r5, #1
 8002e42:	4195      	sbcs	r5, r2
 8002e44:	433d      	orrs	r5, r7
 8002e46:	e77d      	b.n	8002d44 <__aeabi_dsub+0x4c4>
 8002e48:	2a00      	cmp	r2, #0
 8002e4a:	d100      	bne.n	8002e4e <__aeabi_dsub+0x5ce>
 8002e4c:	e744      	b.n	8002cd8 <__aeabi_dsub+0x458>
 8002e4e:	2601      	movs	r6, #1
 8002e50:	400e      	ands	r6, r1
 8002e52:	4663      	mov	r3, ip
 8002e54:	08d9      	lsrs	r1, r3, #3
 8002e56:	9b02      	ldr	r3, [sp, #8]
 8002e58:	075a      	lsls	r2, r3, #29
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	08dc      	lsrs	r4, r3, #3
 8002e5e:	e6f0      	b.n	8002c42 <__aeabi_dsub+0x3c2>
 8002e60:	2a00      	cmp	r2, #0
 8002e62:	d028      	beq.n	8002eb6 <__aeabi_dsub+0x636>
 8002e64:	4662      	mov	r2, ip
 8002e66:	9f02      	ldr	r7, [sp, #8]
 8002e68:	08c0      	lsrs	r0, r0, #3
 8002e6a:	433a      	orrs	r2, r7
 8002e6c:	d100      	bne.n	8002e70 <__aeabi_dsub+0x5f0>
 8002e6e:	e6dc      	b.n	8002c2a <__aeabi_dsub+0x3aa>
 8002e70:	0762      	lsls	r2, r4, #29
 8002e72:	4310      	orrs	r0, r2
 8002e74:	2280      	movs	r2, #128	@ 0x80
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	0312      	lsls	r2, r2, #12
 8002e7a:	4214      	tst	r4, r2
 8002e7c:	d009      	beq.n	8002e92 <__aeabi_dsub+0x612>
 8002e7e:	08fd      	lsrs	r5, r7, #3
 8002e80:	4215      	tst	r5, r2
 8002e82:	d106      	bne.n	8002e92 <__aeabi_dsub+0x612>
 8002e84:	4663      	mov	r3, ip
 8002e86:	2601      	movs	r6, #1
 8002e88:	002c      	movs	r4, r5
 8002e8a:	08d8      	lsrs	r0, r3, #3
 8002e8c:	077b      	lsls	r3, r7, #29
 8002e8e:	4318      	orrs	r0, r3
 8002e90:	400e      	ands	r6, r1
 8002e92:	0f42      	lsrs	r2, r0, #29
 8002e94:	00c0      	lsls	r0, r0, #3
 8002e96:	08c0      	lsrs	r0, r0, #3
 8002e98:	0752      	lsls	r2, r2, #29
 8002e9a:	4302      	orrs	r2, r0
 8002e9c:	e601      	b.n	8002aa2 <__aeabi_dsub+0x222>
 8002e9e:	4663      	mov	r3, ip
 8002ea0:	1a1d      	subs	r5, r3, r0
 8002ea2:	45ac      	cmp	ip, r5
 8002ea4:	4192      	sbcs	r2, r2
 8002ea6:	9b02      	ldr	r3, [sp, #8]
 8002ea8:	4252      	negs	r2, r2
 8002eaa:	1b1c      	subs	r4, r3, r4
 8002eac:	000e      	movs	r6, r1
 8002eae:	4688      	mov	r8, r1
 8002eb0:	2701      	movs	r7, #1
 8002eb2:	1aa4      	subs	r4, r4, r2
 8002eb4:	e546      	b.n	8002944 <__aeabi_dsub+0xc4>
 8002eb6:	4663      	mov	r3, ip
 8002eb8:	08d9      	lsrs	r1, r3, #3
 8002eba:	9b02      	ldr	r3, [sp, #8]
 8002ebc:	075a      	lsls	r2, r3, #29
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	08dc      	lsrs	r4, r3, #3
 8002ec2:	e5ee      	b.n	8002aa2 <__aeabi_dsub+0x222>
 8002ec4:	4663      	mov	r3, ip
 8002ec6:	9c02      	ldr	r4, [sp, #8]
 8002ec8:	9303      	str	r3, [sp, #12]
 8002eca:	e6c7      	b.n	8002c5c <__aeabi_dsub+0x3dc>
 8002ecc:	08c0      	lsrs	r0, r0, #3
 8002ece:	2a00      	cmp	r2, #0
 8002ed0:	d100      	bne.n	8002ed4 <__aeabi_dsub+0x654>
 8002ed2:	e6aa      	b.n	8002c2a <__aeabi_dsub+0x3aa>
 8002ed4:	0762      	lsls	r2, r4, #29
 8002ed6:	4310      	orrs	r0, r2
 8002ed8:	2280      	movs	r2, #128	@ 0x80
 8002eda:	08e4      	lsrs	r4, r4, #3
 8002edc:	0312      	lsls	r2, r2, #12
 8002ede:	4214      	tst	r4, r2
 8002ee0:	d0d7      	beq.n	8002e92 <__aeabi_dsub+0x612>
 8002ee2:	9f02      	ldr	r7, [sp, #8]
 8002ee4:	08fd      	lsrs	r5, r7, #3
 8002ee6:	4215      	tst	r5, r2
 8002ee8:	d1d3      	bne.n	8002e92 <__aeabi_dsub+0x612>
 8002eea:	4663      	mov	r3, ip
 8002eec:	2601      	movs	r6, #1
 8002eee:	08d8      	lsrs	r0, r3, #3
 8002ef0:	077b      	lsls	r3, r7, #29
 8002ef2:	002c      	movs	r4, r5
 8002ef4:	4318      	orrs	r0, r3
 8002ef6:	400e      	ands	r6, r1
 8002ef8:	e7cb      	b.n	8002e92 <__aeabi_dsub+0x612>
 8002efa:	000a      	movs	r2, r1
 8002efc:	0027      	movs	r7, r4
 8002efe:	3a20      	subs	r2, #32
 8002f00:	40d7      	lsrs	r7, r2
 8002f02:	2920      	cmp	r1, #32
 8002f04:	d005      	beq.n	8002f12 <__aeabi_dsub+0x692>
 8002f06:	2240      	movs	r2, #64	@ 0x40
 8002f08:	1a52      	subs	r2, r2, r1
 8002f0a:	4094      	lsls	r4, r2
 8002f0c:	0025      	movs	r5, r4
 8002f0e:	4305      	orrs	r5, r0
 8002f10:	9503      	str	r5, [sp, #12]
 8002f12:	9d03      	ldr	r5, [sp, #12]
 8002f14:	1e6a      	subs	r2, r5, #1
 8002f16:	4195      	sbcs	r5, r2
 8002f18:	432f      	orrs	r7, r5
 8002f1a:	e610      	b.n	8002b3e <__aeabi_dsub+0x2be>
 8002f1c:	0014      	movs	r4, r2
 8002f1e:	2500      	movs	r5, #0
 8002f20:	2200      	movs	r2, #0
 8002f22:	e556      	b.n	80029d2 <__aeabi_dsub+0x152>
 8002f24:	9b02      	ldr	r3, [sp, #8]
 8002f26:	4460      	add	r0, ip
 8002f28:	4699      	mov	r9, r3
 8002f2a:	4560      	cmp	r0, ip
 8002f2c:	4192      	sbcs	r2, r2
 8002f2e:	444c      	add	r4, r9
 8002f30:	4252      	negs	r2, r2
 8002f32:	0005      	movs	r5, r0
 8002f34:	18a4      	adds	r4, r4, r2
 8002f36:	e74c      	b.n	8002dd2 <__aeabi_dsub+0x552>
 8002f38:	001a      	movs	r2, r3
 8002f3a:	001c      	movs	r4, r3
 8002f3c:	432a      	orrs	r2, r5
 8002f3e:	d000      	beq.n	8002f42 <__aeabi_dsub+0x6c2>
 8002f40:	e6b3      	b.n	8002caa <__aeabi_dsub+0x42a>
 8002f42:	e6c9      	b.n	8002cd8 <__aeabi_dsub+0x458>
 8002f44:	2480      	movs	r4, #128	@ 0x80
 8002f46:	2600      	movs	r6, #0
 8002f48:	0324      	lsls	r4, r4, #12
 8002f4a:	e5ae      	b.n	8002aaa <__aeabi_dsub+0x22a>
 8002f4c:	2120      	movs	r1, #32
 8002f4e:	2500      	movs	r5, #0
 8002f50:	1a09      	subs	r1, r1, r0
 8002f52:	e517      	b.n	8002984 <__aeabi_dsub+0x104>
 8002f54:	2200      	movs	r2, #0
 8002f56:	2500      	movs	r5, #0
 8002f58:	4c0b      	ldr	r4, [pc, #44]	@ (8002f88 <__aeabi_dsub+0x708>)
 8002f5a:	e53a      	b.n	80029d2 <__aeabi_dsub+0x152>
 8002f5c:	2d00      	cmp	r5, #0
 8002f5e:	d100      	bne.n	8002f62 <__aeabi_dsub+0x6e2>
 8002f60:	e5f6      	b.n	8002b50 <__aeabi_dsub+0x2d0>
 8002f62:	464b      	mov	r3, r9
 8002f64:	1bda      	subs	r2, r3, r7
 8002f66:	4692      	mov	sl, r2
 8002f68:	2f00      	cmp	r7, #0
 8002f6a:	d100      	bne.n	8002f6e <__aeabi_dsub+0x6ee>
 8002f6c:	e66f      	b.n	8002c4e <__aeabi_dsub+0x3ce>
 8002f6e:	2a38      	cmp	r2, #56	@ 0x38
 8002f70:	dc05      	bgt.n	8002f7e <__aeabi_dsub+0x6fe>
 8002f72:	2680      	movs	r6, #128	@ 0x80
 8002f74:	0436      	lsls	r6, r6, #16
 8002f76:	4334      	orrs	r4, r6
 8002f78:	4688      	mov	r8, r1
 8002f7a:	000e      	movs	r6, r1
 8002f7c:	e6d1      	b.n	8002d22 <__aeabi_dsub+0x4a2>
 8002f7e:	4688      	mov	r8, r1
 8002f80:	000e      	movs	r6, r1
 8002f82:	2501      	movs	r5, #1
 8002f84:	e6de      	b.n	8002d44 <__aeabi_dsub+0x4c4>
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	000007ff 	.word	0x000007ff
 8002f8c:	ff7fffff 	.word	0xff7fffff
 8002f90:	000007fe 	.word	0x000007fe
 8002f94:	2d00      	cmp	r5, #0
 8002f96:	d100      	bne.n	8002f9a <__aeabi_dsub+0x71a>
 8002f98:	e668      	b.n	8002c6c <__aeabi_dsub+0x3ec>
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	1bd9      	subs	r1, r3, r7
 8002f9e:	2f00      	cmp	r7, #0
 8002fa0:	d101      	bne.n	8002fa6 <__aeabi_dsub+0x726>
 8002fa2:	468a      	mov	sl, r1
 8002fa4:	e5a7      	b.n	8002af6 <__aeabi_dsub+0x276>
 8002fa6:	2701      	movs	r7, #1
 8002fa8:	2938      	cmp	r1, #56	@ 0x38
 8002faa:	dd00      	ble.n	8002fae <__aeabi_dsub+0x72e>
 8002fac:	e5c7      	b.n	8002b3e <__aeabi_dsub+0x2be>
 8002fae:	2280      	movs	r2, #128	@ 0x80
 8002fb0:	0412      	lsls	r2, r2, #16
 8002fb2:	4314      	orrs	r4, r2
 8002fb4:	e5af      	b.n	8002b16 <__aeabi_dsub+0x296>
 8002fb6:	46c0      	nop			@ (mov r8, r8)

08002fb8 <__aeabi_dcmpun>:
 8002fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fba:	46c6      	mov	lr, r8
 8002fbc:	031e      	lsls	r6, r3, #12
 8002fbe:	0b36      	lsrs	r6, r6, #12
 8002fc0:	46b0      	mov	r8, r6
 8002fc2:	4e0d      	ldr	r6, [pc, #52]	@ (8002ff8 <__aeabi_dcmpun+0x40>)
 8002fc4:	030c      	lsls	r4, r1, #12
 8002fc6:	004d      	lsls	r5, r1, #1
 8002fc8:	005f      	lsls	r7, r3, #1
 8002fca:	b500      	push	{lr}
 8002fcc:	0b24      	lsrs	r4, r4, #12
 8002fce:	0d6d      	lsrs	r5, r5, #21
 8002fd0:	0d7f      	lsrs	r7, r7, #21
 8002fd2:	42b5      	cmp	r5, r6
 8002fd4:	d00b      	beq.n	8002fee <__aeabi_dcmpun+0x36>
 8002fd6:	4908      	ldr	r1, [pc, #32]	@ (8002ff8 <__aeabi_dcmpun+0x40>)
 8002fd8:	2000      	movs	r0, #0
 8002fda:	428f      	cmp	r7, r1
 8002fdc:	d104      	bne.n	8002fe8 <__aeabi_dcmpun+0x30>
 8002fde:	4646      	mov	r6, r8
 8002fe0:	4316      	orrs	r6, r2
 8002fe2:	0030      	movs	r0, r6
 8002fe4:	1e43      	subs	r3, r0, #1
 8002fe6:	4198      	sbcs	r0, r3
 8002fe8:	bc80      	pop	{r7}
 8002fea:	46b8      	mov	r8, r7
 8002fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fee:	4304      	orrs	r4, r0
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	2c00      	cmp	r4, #0
 8002ff4:	d1f8      	bne.n	8002fe8 <__aeabi_dcmpun+0x30>
 8002ff6:	e7ee      	b.n	8002fd6 <__aeabi_dcmpun+0x1e>
 8002ff8:	000007ff 	.word	0x000007ff

08002ffc <__aeabi_d2iz>:
 8002ffc:	000b      	movs	r3, r1
 8002ffe:	0002      	movs	r2, r0
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	4d16      	ldr	r5, [pc, #88]	@ (800305c <__aeabi_d2iz+0x60>)
 8003004:	030c      	lsls	r4, r1, #12
 8003006:	b082      	sub	sp, #8
 8003008:	0049      	lsls	r1, r1, #1
 800300a:	2000      	movs	r0, #0
 800300c:	9200      	str	r2, [sp, #0]
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	0b24      	lsrs	r4, r4, #12
 8003012:	0d49      	lsrs	r1, r1, #21
 8003014:	0fde      	lsrs	r6, r3, #31
 8003016:	42a9      	cmp	r1, r5
 8003018:	dd04      	ble.n	8003024 <__aeabi_d2iz+0x28>
 800301a:	4811      	ldr	r0, [pc, #68]	@ (8003060 <__aeabi_d2iz+0x64>)
 800301c:	4281      	cmp	r1, r0
 800301e:	dd03      	ble.n	8003028 <__aeabi_d2iz+0x2c>
 8003020:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <__aeabi_d2iz+0x68>)
 8003022:	18f0      	adds	r0, r6, r3
 8003024:	b002      	add	sp, #8
 8003026:	bd70      	pop	{r4, r5, r6, pc}
 8003028:	2080      	movs	r0, #128	@ 0x80
 800302a:	0340      	lsls	r0, r0, #13
 800302c:	4320      	orrs	r0, r4
 800302e:	4c0e      	ldr	r4, [pc, #56]	@ (8003068 <__aeabi_d2iz+0x6c>)
 8003030:	1a64      	subs	r4, r4, r1
 8003032:	2c1f      	cmp	r4, #31
 8003034:	dd08      	ble.n	8003048 <__aeabi_d2iz+0x4c>
 8003036:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <__aeabi_d2iz+0x70>)
 8003038:	1a5b      	subs	r3, r3, r1
 800303a:	40d8      	lsrs	r0, r3
 800303c:	0003      	movs	r3, r0
 800303e:	4258      	negs	r0, r3
 8003040:	2e00      	cmp	r6, #0
 8003042:	d1ef      	bne.n	8003024 <__aeabi_d2iz+0x28>
 8003044:	0018      	movs	r0, r3
 8003046:	e7ed      	b.n	8003024 <__aeabi_d2iz+0x28>
 8003048:	4b09      	ldr	r3, [pc, #36]	@ (8003070 <__aeabi_d2iz+0x74>)
 800304a:	9a00      	ldr	r2, [sp, #0]
 800304c:	469c      	mov	ip, r3
 800304e:	0003      	movs	r3, r0
 8003050:	4461      	add	r1, ip
 8003052:	408b      	lsls	r3, r1
 8003054:	40e2      	lsrs	r2, r4
 8003056:	4313      	orrs	r3, r2
 8003058:	e7f1      	b.n	800303e <__aeabi_d2iz+0x42>
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	000003fe 	.word	0x000003fe
 8003060:	0000041d 	.word	0x0000041d
 8003064:	7fffffff 	.word	0x7fffffff
 8003068:	00000433 	.word	0x00000433
 800306c:	00000413 	.word	0x00000413
 8003070:	fffffbed 	.word	0xfffffbed

08003074 <__aeabi_i2d>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	2800      	cmp	r0, #0
 8003078:	d016      	beq.n	80030a8 <__aeabi_i2d+0x34>
 800307a:	17c3      	asrs	r3, r0, #31
 800307c:	18c5      	adds	r5, r0, r3
 800307e:	405d      	eors	r5, r3
 8003080:	0fc4      	lsrs	r4, r0, #31
 8003082:	0028      	movs	r0, r5
 8003084:	f000 f914 	bl	80032b0 <__clzsi2>
 8003088:	4b10      	ldr	r3, [pc, #64]	@ (80030cc <__aeabi_i2d+0x58>)
 800308a:	1a1b      	subs	r3, r3, r0
 800308c:	055b      	lsls	r3, r3, #21
 800308e:	0d5b      	lsrs	r3, r3, #21
 8003090:	280a      	cmp	r0, #10
 8003092:	dc14      	bgt.n	80030be <__aeabi_i2d+0x4a>
 8003094:	0002      	movs	r2, r0
 8003096:	002e      	movs	r6, r5
 8003098:	3215      	adds	r2, #21
 800309a:	4096      	lsls	r6, r2
 800309c:	220b      	movs	r2, #11
 800309e:	1a12      	subs	r2, r2, r0
 80030a0:	40d5      	lsrs	r5, r2
 80030a2:	032d      	lsls	r5, r5, #12
 80030a4:	0b2d      	lsrs	r5, r5, #12
 80030a6:	e003      	b.n	80030b0 <__aeabi_i2d+0x3c>
 80030a8:	2400      	movs	r4, #0
 80030aa:	2300      	movs	r3, #0
 80030ac:	2500      	movs	r5, #0
 80030ae:	2600      	movs	r6, #0
 80030b0:	051b      	lsls	r3, r3, #20
 80030b2:	432b      	orrs	r3, r5
 80030b4:	07e4      	lsls	r4, r4, #31
 80030b6:	4323      	orrs	r3, r4
 80030b8:	0030      	movs	r0, r6
 80030ba:	0019      	movs	r1, r3
 80030bc:	bd70      	pop	{r4, r5, r6, pc}
 80030be:	380b      	subs	r0, #11
 80030c0:	4085      	lsls	r5, r0
 80030c2:	032d      	lsls	r5, r5, #12
 80030c4:	2600      	movs	r6, #0
 80030c6:	0b2d      	lsrs	r5, r5, #12
 80030c8:	e7f2      	b.n	80030b0 <__aeabi_i2d+0x3c>
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	0000041e 	.word	0x0000041e

080030d0 <__aeabi_ui2d>:
 80030d0:	b510      	push	{r4, lr}
 80030d2:	1e04      	subs	r4, r0, #0
 80030d4:	d010      	beq.n	80030f8 <__aeabi_ui2d+0x28>
 80030d6:	f000 f8eb 	bl	80032b0 <__clzsi2>
 80030da:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <__aeabi_ui2d+0x44>)
 80030dc:	1a1b      	subs	r3, r3, r0
 80030de:	055b      	lsls	r3, r3, #21
 80030e0:	0d5b      	lsrs	r3, r3, #21
 80030e2:	280a      	cmp	r0, #10
 80030e4:	dc0f      	bgt.n	8003106 <__aeabi_ui2d+0x36>
 80030e6:	220b      	movs	r2, #11
 80030e8:	0021      	movs	r1, r4
 80030ea:	1a12      	subs	r2, r2, r0
 80030ec:	40d1      	lsrs	r1, r2
 80030ee:	3015      	adds	r0, #21
 80030f0:	030a      	lsls	r2, r1, #12
 80030f2:	4084      	lsls	r4, r0
 80030f4:	0b12      	lsrs	r2, r2, #12
 80030f6:	e001      	b.n	80030fc <__aeabi_ui2d+0x2c>
 80030f8:	2300      	movs	r3, #0
 80030fa:	2200      	movs	r2, #0
 80030fc:	051b      	lsls	r3, r3, #20
 80030fe:	4313      	orrs	r3, r2
 8003100:	0020      	movs	r0, r4
 8003102:	0019      	movs	r1, r3
 8003104:	bd10      	pop	{r4, pc}
 8003106:	0022      	movs	r2, r4
 8003108:	380b      	subs	r0, #11
 800310a:	4082      	lsls	r2, r0
 800310c:	0312      	lsls	r2, r2, #12
 800310e:	2400      	movs	r4, #0
 8003110:	0b12      	lsrs	r2, r2, #12
 8003112:	e7f3      	b.n	80030fc <__aeabi_ui2d+0x2c>
 8003114:	0000041e 	.word	0x0000041e

08003118 <__aeabi_f2d>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	0242      	lsls	r2, r0, #9
 800311c:	0043      	lsls	r3, r0, #1
 800311e:	0fc4      	lsrs	r4, r0, #31
 8003120:	20fe      	movs	r0, #254	@ 0xfe
 8003122:	0e1b      	lsrs	r3, r3, #24
 8003124:	1c59      	adds	r1, r3, #1
 8003126:	0a55      	lsrs	r5, r2, #9
 8003128:	4208      	tst	r0, r1
 800312a:	d00c      	beq.n	8003146 <__aeabi_f2d+0x2e>
 800312c:	21e0      	movs	r1, #224	@ 0xe0
 800312e:	0089      	lsls	r1, r1, #2
 8003130:	468c      	mov	ip, r1
 8003132:	076d      	lsls	r5, r5, #29
 8003134:	0b12      	lsrs	r2, r2, #12
 8003136:	4463      	add	r3, ip
 8003138:	051b      	lsls	r3, r3, #20
 800313a:	4313      	orrs	r3, r2
 800313c:	07e4      	lsls	r4, r4, #31
 800313e:	4323      	orrs	r3, r4
 8003140:	0028      	movs	r0, r5
 8003142:	0019      	movs	r1, r3
 8003144:	bd70      	pop	{r4, r5, r6, pc}
 8003146:	2b00      	cmp	r3, #0
 8003148:	d114      	bne.n	8003174 <__aeabi_f2d+0x5c>
 800314a:	2d00      	cmp	r5, #0
 800314c:	d01b      	beq.n	8003186 <__aeabi_f2d+0x6e>
 800314e:	0028      	movs	r0, r5
 8003150:	f000 f8ae 	bl	80032b0 <__clzsi2>
 8003154:	280a      	cmp	r0, #10
 8003156:	dc1c      	bgt.n	8003192 <__aeabi_f2d+0x7a>
 8003158:	230b      	movs	r3, #11
 800315a:	002a      	movs	r2, r5
 800315c:	1a1b      	subs	r3, r3, r0
 800315e:	40da      	lsrs	r2, r3
 8003160:	0003      	movs	r3, r0
 8003162:	3315      	adds	r3, #21
 8003164:	409d      	lsls	r5, r3
 8003166:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <__aeabi_f2d+0x88>)
 8003168:	0312      	lsls	r2, r2, #12
 800316a:	1a1b      	subs	r3, r3, r0
 800316c:	055b      	lsls	r3, r3, #21
 800316e:	0b12      	lsrs	r2, r2, #12
 8003170:	0d5b      	lsrs	r3, r3, #21
 8003172:	e7e1      	b.n	8003138 <__aeabi_f2d+0x20>
 8003174:	2d00      	cmp	r5, #0
 8003176:	d009      	beq.n	800318c <__aeabi_f2d+0x74>
 8003178:	0b13      	lsrs	r3, r2, #12
 800317a:	2280      	movs	r2, #128	@ 0x80
 800317c:	0312      	lsls	r2, r2, #12
 800317e:	431a      	orrs	r2, r3
 8003180:	076d      	lsls	r5, r5, #29
 8003182:	4b08      	ldr	r3, [pc, #32]	@ (80031a4 <__aeabi_f2d+0x8c>)
 8003184:	e7d8      	b.n	8003138 <__aeabi_f2d+0x20>
 8003186:	2300      	movs	r3, #0
 8003188:	2200      	movs	r2, #0
 800318a:	e7d5      	b.n	8003138 <__aeabi_f2d+0x20>
 800318c:	2200      	movs	r2, #0
 800318e:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <__aeabi_f2d+0x8c>)
 8003190:	e7d2      	b.n	8003138 <__aeabi_f2d+0x20>
 8003192:	0003      	movs	r3, r0
 8003194:	002a      	movs	r2, r5
 8003196:	3b0b      	subs	r3, #11
 8003198:	409a      	lsls	r2, r3
 800319a:	2500      	movs	r5, #0
 800319c:	e7e3      	b.n	8003166 <__aeabi_f2d+0x4e>
 800319e:	46c0      	nop			@ (mov r8, r8)
 80031a0:	00000389 	.word	0x00000389
 80031a4:	000007ff 	.word	0x000007ff

080031a8 <__aeabi_d2f>:
 80031a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031aa:	004b      	lsls	r3, r1, #1
 80031ac:	030f      	lsls	r7, r1, #12
 80031ae:	0d5b      	lsrs	r3, r3, #21
 80031b0:	4c3b      	ldr	r4, [pc, #236]	@ (80032a0 <__aeabi_d2f+0xf8>)
 80031b2:	0f45      	lsrs	r5, r0, #29
 80031b4:	b083      	sub	sp, #12
 80031b6:	0a7f      	lsrs	r7, r7, #9
 80031b8:	1c5e      	adds	r6, r3, #1
 80031ba:	432f      	orrs	r7, r5
 80031bc:	9000      	str	r0, [sp, #0]
 80031be:	9101      	str	r1, [sp, #4]
 80031c0:	0fca      	lsrs	r2, r1, #31
 80031c2:	00c5      	lsls	r5, r0, #3
 80031c4:	4226      	tst	r6, r4
 80031c6:	d00b      	beq.n	80031e0 <__aeabi_d2f+0x38>
 80031c8:	4936      	ldr	r1, [pc, #216]	@ (80032a4 <__aeabi_d2f+0xfc>)
 80031ca:	185c      	adds	r4, r3, r1
 80031cc:	2cfe      	cmp	r4, #254	@ 0xfe
 80031ce:	dd13      	ble.n	80031f8 <__aeabi_d2f+0x50>
 80031d0:	20ff      	movs	r0, #255	@ 0xff
 80031d2:	2300      	movs	r3, #0
 80031d4:	05c0      	lsls	r0, r0, #23
 80031d6:	4318      	orrs	r0, r3
 80031d8:	07d2      	lsls	r2, r2, #31
 80031da:	4310      	orrs	r0, r2
 80031dc:	b003      	add	sp, #12
 80031de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <__aeabi_d2f+0x42>
 80031e4:	2000      	movs	r0, #0
 80031e6:	2300      	movs	r3, #0
 80031e8:	e7f4      	b.n	80031d4 <__aeabi_d2f+0x2c>
 80031ea:	433d      	orrs	r5, r7
 80031ec:	d0f0      	beq.n	80031d0 <__aeabi_d2f+0x28>
 80031ee:	2380      	movs	r3, #128	@ 0x80
 80031f0:	03db      	lsls	r3, r3, #15
 80031f2:	20ff      	movs	r0, #255	@ 0xff
 80031f4:	433b      	orrs	r3, r7
 80031f6:	e7ed      	b.n	80031d4 <__aeabi_d2f+0x2c>
 80031f8:	2c00      	cmp	r4, #0
 80031fa:	dd14      	ble.n	8003226 <__aeabi_d2f+0x7e>
 80031fc:	9b00      	ldr	r3, [sp, #0]
 80031fe:	00ff      	lsls	r7, r7, #3
 8003200:	019b      	lsls	r3, r3, #6
 8003202:	1e58      	subs	r0, r3, #1
 8003204:	4183      	sbcs	r3, r0
 8003206:	0f69      	lsrs	r1, r5, #29
 8003208:	433b      	orrs	r3, r7
 800320a:	430b      	orrs	r3, r1
 800320c:	0759      	lsls	r1, r3, #29
 800320e:	d041      	beq.n	8003294 <__aeabi_d2f+0xec>
 8003210:	210f      	movs	r1, #15
 8003212:	4019      	ands	r1, r3
 8003214:	2904      	cmp	r1, #4
 8003216:	d028      	beq.n	800326a <__aeabi_d2f+0xc2>
 8003218:	3304      	adds	r3, #4
 800321a:	0159      	lsls	r1, r3, #5
 800321c:	d525      	bpl.n	800326a <__aeabi_d2f+0xc2>
 800321e:	3401      	adds	r4, #1
 8003220:	2300      	movs	r3, #0
 8003222:	b2e0      	uxtb	r0, r4
 8003224:	e7d6      	b.n	80031d4 <__aeabi_d2f+0x2c>
 8003226:	0021      	movs	r1, r4
 8003228:	3117      	adds	r1, #23
 800322a:	dbdb      	blt.n	80031e4 <__aeabi_d2f+0x3c>
 800322c:	2180      	movs	r1, #128	@ 0x80
 800322e:	201e      	movs	r0, #30
 8003230:	0409      	lsls	r1, r1, #16
 8003232:	4339      	orrs	r1, r7
 8003234:	1b00      	subs	r0, r0, r4
 8003236:	281f      	cmp	r0, #31
 8003238:	dd1b      	ble.n	8003272 <__aeabi_d2f+0xca>
 800323a:	2602      	movs	r6, #2
 800323c:	4276      	negs	r6, r6
 800323e:	1b34      	subs	r4, r6, r4
 8003240:	000e      	movs	r6, r1
 8003242:	40e6      	lsrs	r6, r4
 8003244:	0034      	movs	r4, r6
 8003246:	2820      	cmp	r0, #32
 8003248:	d004      	beq.n	8003254 <__aeabi_d2f+0xac>
 800324a:	4817      	ldr	r0, [pc, #92]	@ (80032a8 <__aeabi_d2f+0x100>)
 800324c:	4684      	mov	ip, r0
 800324e:	4463      	add	r3, ip
 8003250:	4099      	lsls	r1, r3
 8003252:	430d      	orrs	r5, r1
 8003254:	002b      	movs	r3, r5
 8003256:	1e59      	subs	r1, r3, #1
 8003258:	418b      	sbcs	r3, r1
 800325a:	4323      	orrs	r3, r4
 800325c:	0759      	lsls	r1, r3, #29
 800325e:	d015      	beq.n	800328c <__aeabi_d2f+0xe4>
 8003260:	210f      	movs	r1, #15
 8003262:	2400      	movs	r4, #0
 8003264:	4019      	ands	r1, r3
 8003266:	2904      	cmp	r1, #4
 8003268:	d117      	bne.n	800329a <__aeabi_d2f+0xf2>
 800326a:	019b      	lsls	r3, r3, #6
 800326c:	0a5b      	lsrs	r3, r3, #9
 800326e:	b2e0      	uxtb	r0, r4
 8003270:	e7b0      	b.n	80031d4 <__aeabi_d2f+0x2c>
 8003272:	4c0e      	ldr	r4, [pc, #56]	@ (80032ac <__aeabi_d2f+0x104>)
 8003274:	191c      	adds	r4, r3, r4
 8003276:	002b      	movs	r3, r5
 8003278:	40a5      	lsls	r5, r4
 800327a:	40c3      	lsrs	r3, r0
 800327c:	40a1      	lsls	r1, r4
 800327e:	1e68      	subs	r0, r5, #1
 8003280:	4185      	sbcs	r5, r0
 8003282:	4329      	orrs	r1, r5
 8003284:	430b      	orrs	r3, r1
 8003286:	2400      	movs	r4, #0
 8003288:	0759      	lsls	r1, r3, #29
 800328a:	d1c1      	bne.n	8003210 <__aeabi_d2f+0x68>
 800328c:	019b      	lsls	r3, r3, #6
 800328e:	2000      	movs	r0, #0
 8003290:	0a5b      	lsrs	r3, r3, #9
 8003292:	e79f      	b.n	80031d4 <__aeabi_d2f+0x2c>
 8003294:	08db      	lsrs	r3, r3, #3
 8003296:	b2e0      	uxtb	r0, r4
 8003298:	e79c      	b.n	80031d4 <__aeabi_d2f+0x2c>
 800329a:	3304      	adds	r3, #4
 800329c:	e7e5      	b.n	800326a <__aeabi_d2f+0xc2>
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	000007fe 	.word	0x000007fe
 80032a4:	fffffc80 	.word	0xfffffc80
 80032a8:	fffffca2 	.word	0xfffffca2
 80032ac:	fffffc82 	.word	0xfffffc82

080032b0 <__clzsi2>:
 80032b0:	211c      	movs	r1, #28
 80032b2:	2301      	movs	r3, #1
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	4298      	cmp	r0, r3
 80032b8:	d301      	bcc.n	80032be <__clzsi2+0xe>
 80032ba:	0c00      	lsrs	r0, r0, #16
 80032bc:	3910      	subs	r1, #16
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	4298      	cmp	r0, r3
 80032c2:	d301      	bcc.n	80032c8 <__clzsi2+0x18>
 80032c4:	0a00      	lsrs	r0, r0, #8
 80032c6:	3908      	subs	r1, #8
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	4298      	cmp	r0, r3
 80032cc:	d301      	bcc.n	80032d2 <__clzsi2+0x22>
 80032ce:	0900      	lsrs	r0, r0, #4
 80032d0:	3904      	subs	r1, #4
 80032d2:	a202      	add	r2, pc, #8	@ (adr r2, 80032dc <__clzsi2+0x2c>)
 80032d4:	5c10      	ldrb	r0, [r2, r0]
 80032d6:	1840      	adds	r0, r0, r1
 80032d8:	4770      	bx	lr
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	02020304 	.word	0x02020304
 80032e0:	01010101 	.word	0x01010101
	...

080032ec <clearDisplay>:
{
	us *= (SystemCoreClock / 1000000);
	while (us--);
}
void clearDisplay(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af02      	add	r7, sp, #8
	ILI9341_DrawFilledRectangleCoord(0, 0, ILI9341_SCREEN_WIDTH, ILI9341_SCREEN_HEIGHT, BLACK);
 80032f2:	23a0      	movs	r3, #160	@ 0xa0
 80032f4:	005a      	lsls	r2, r3, #1
 80032f6:	2300      	movs	r3, #0
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	23f0      	movs	r3, #240	@ 0xf0
 80032fc:	2100      	movs	r1, #0
 80032fe:	2000      	movs	r0, #0
 8003300:	f000 f803 	bl	800330a <ILI9341_DrawFilledRectangleCoord>
}
 8003304:	46c0      	nop			@ (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <ILI9341_DrawFilledRectangleCoord>:
		ILI9341_DrawPixel(X1, Y1, color);
	}
}

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 800330a:	b5b0      	push	{r4, r5, r7, lr}
 800330c:	b088      	sub	sp, #32
 800330e:	af02      	add	r7, sp, #8
 8003310:	0005      	movs	r5, r0
 8003312:	000c      	movs	r4, r1
 8003314:	0010      	movs	r0, r2
 8003316:	0019      	movs	r1, r3
 8003318:	1dbb      	adds	r3, r7, #6
 800331a:	1c2a      	adds	r2, r5, #0
 800331c:	801a      	strh	r2, [r3, #0]
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	1c22      	adds	r2, r4, #0
 8003322:	801a      	strh	r2, [r3, #0]
 8003324:	1cbb      	adds	r3, r7, #2
 8003326:	1c02      	adds	r2, r0, #0
 8003328:	801a      	strh	r2, [r3, #0]
 800332a:	003b      	movs	r3, r7
 800332c:	1c0a      	adds	r2, r1, #0
 800332e:	801a      	strh	r2, [r3, #0]
	uint16_t xLen = 0;
 8003330:	2316      	movs	r3, #22
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2200      	movs	r2, #0
 8003336:	801a      	strh	r2, [r3, #0]
	uint16_t yLen = 0;
 8003338:	2314      	movs	r3, #20
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	2200      	movs	r2, #0
 800333e:	801a      	strh	r2, [r3, #0]
	uint8_t negX = 0;
 8003340:	2113      	movs	r1, #19
 8003342:	187b      	adds	r3, r7, r1
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
	uint8_t negY = 0;
 8003348:	2312      	movs	r3, #18
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
	int32_t negCalc = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 8003354:	2310      	movs	r3, #16
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	2200      	movs	r2, #0
 800335a:	801a      	strh	r2, [r3, #0]
	uint16_t Y0True = 0;
 800335c:	230e      	movs	r3, #14
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	2200      	movs	r2, #0
 8003362:	801a      	strh	r2, [r3, #0]

	negCalc = X1 - X0;
 8003364:	1cbb      	adds	r3, r7, #2
 8003366:	881a      	ldrh	r2, [r3, #0]
 8003368:	1dbb      	adds	r3, r7, #6
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	da02      	bge.n	800337c <ILI9341_DrawFilledRectangleCoord+0x72>
 8003376:	187b      	adds	r3, r7, r1
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
	negCalc = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 8003380:	003b      	movs	r3, r7
 8003382:	881a      	ldrh	r2, [r3, #0]
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	da03      	bge.n	800339a <ILI9341_DrawFilledRectangleCoord+0x90>
 8003392:	2312      	movs	r3, #18
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]

	if(!negX)
 800339a:	2313      	movs	r3, #19
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <ILI9341_DrawFilledRectangleCoord+0xb6>
	{
		xLen = X1 - X0;
 80033a4:	2316      	movs	r3, #22
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	1cb9      	adds	r1, r7, #2
 80033aa:	1dba      	adds	r2, r7, #6
 80033ac:	8809      	ldrh	r1, [r1, #0]
 80033ae:	8812      	ldrh	r2, [r2, #0]
 80033b0:	1a8a      	subs	r2, r1, r2
 80033b2:	801a      	strh	r2, [r3, #0]
		X0True = X0;
 80033b4:	2310      	movs	r3, #16
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	1dba      	adds	r2, r7, #6
 80033ba:	8812      	ldrh	r2, [r2, #0]
 80033bc:	801a      	strh	r2, [r3, #0]
 80033be:	e00c      	b.n	80033da <ILI9341_DrawFilledRectangleCoord+0xd0>
	}
	else
	{
		xLen = X0 - X1;
 80033c0:	2316      	movs	r3, #22
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	1db9      	adds	r1, r7, #6
 80033c6:	1cba      	adds	r2, r7, #2
 80033c8:	8809      	ldrh	r1, [r1, #0]
 80033ca:	8812      	ldrh	r2, [r2, #0]
 80033cc:	1a8a      	subs	r2, r1, r2
 80033ce:	801a      	strh	r2, [r3, #0]
		X0True = X1;
 80033d0:	2310      	movs	r3, #16
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	1cba      	adds	r2, r7, #2
 80033d6:	8812      	ldrh	r2, [r2, #0]
 80033d8:	801a      	strh	r2, [r3, #0]
	}

	if(!negY)
 80033da:	2312      	movs	r3, #18
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <ILI9341_DrawFilledRectangleCoord+0xf6>
	{
		yLen = Y1 - Y0;
 80033e4:	2314      	movs	r3, #20
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	0039      	movs	r1, r7
 80033ea:	1d3a      	adds	r2, r7, #4
 80033ec:	8809      	ldrh	r1, [r1, #0]
 80033ee:	8812      	ldrh	r2, [r2, #0]
 80033f0:	1a8a      	subs	r2, r1, r2
 80033f2:	801a      	strh	r2, [r3, #0]
		Y0True = Y0;
 80033f4:	230e      	movs	r3, #14
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	1d3a      	adds	r2, r7, #4
 80033fa:	8812      	ldrh	r2, [r2, #0]
 80033fc:	801a      	strh	r2, [r3, #0]
 80033fe:	e00c      	b.n	800341a <ILI9341_DrawFilledRectangleCoord+0x110>
	}
	else
	{
		yLen = Y0 - Y1;
 8003400:	2314      	movs	r3, #20
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	1d39      	adds	r1, r7, #4
 8003406:	003a      	movs	r2, r7
 8003408:	8809      	ldrh	r1, [r1, #0]
 800340a:	8812      	ldrh	r2, [r2, #0]
 800340c:	1a8a      	subs	r2, r1, r2
 800340e:	801a      	strh	r2, [r3, #0]
		Y0True = Y1;
 8003410:	230e      	movs	r3, #14
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	003a      	movs	r2, r7
 8003416:	8812      	ldrh	r2, [r2, #0]
 8003418:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 800341a:	2314      	movs	r3, #20
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	881c      	ldrh	r4, [r3, #0]
 8003420:	2316      	movs	r3, #22
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	881a      	ldrh	r2, [r3, #0]
 8003426:	230e      	movs	r3, #14
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	8819      	ldrh	r1, [r3, #0]
 800342c:	2310      	movs	r3, #16
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	8818      	ldrh	r0, [r3, #0]
 8003432:	2328      	movs	r3, #40	@ 0x28
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	0023      	movs	r3, r4
 800343c:	f000 fddc 	bl	8003ff8 <ILI9341_DrawRectangle>
}
 8003440:	46c0      	nop			@ (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b006      	add	sp, #24
 8003446:	bdb0      	pop	{r4, r5, r7, pc}

08003448 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8003448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344a:	b08d      	sub	sp, #52	@ 0x34
 800344c:	af02      	add	r7, sp, #8
 800344e:	0004      	movs	r4, r0
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	0010      	movs	r0, r2
 8003454:	0019      	movs	r1, r3
 8003456:	250f      	movs	r5, #15
 8003458:	197b      	adds	r3, r7, r5
 800345a:	1c22      	adds	r2, r4, #0
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	260c      	movs	r6, #12
 8003460:	19bb      	adds	r3, r7, r6
 8003462:	1c02      	adds	r2, r0, #0
 8003464:	801a      	strh	r2, [r3, #0]
 8003466:	1dbb      	adds	r3, r7, #6
 8003468:	1c0a      	adds	r2, r1, #0
 800346a:	801a      	strh	r2, [r3, #0]
	if ((ch < 31) || (ch > 127)) return;
 800346c:	0029      	movs	r1, r5
 800346e:	187b      	adds	r3, r7, r1
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b1e      	cmp	r3, #30
 8003474:	d800      	bhi.n	8003478 <ILI9341_DrawChar+0x30>
 8003476:	e088      	b.n	800358a <ILI9341_DrawChar+0x142>
 8003478:	187b      	adds	r3, r7, r1
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	b25b      	sxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	da00      	bge.n	8003484 <ILI9341_DrawChar+0x3c>
 8003482:	e082      	b.n	800358a <ILI9341_DrawChar+0x142>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8003484:	201f      	movs	r0, #31
 8003486:	183b      	adds	r3, r7, r0
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	701a      	strb	r2, [r3, #0]
	fWidth = font[1];
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	241e      	movs	r4, #30
 8003494:	193b      	adds	r3, r7, r4
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	701a      	strb	r2, [r3, #0]
	fHeight = font[2];
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	1c9a      	adds	r2, r3, #2
 800349e:	251d      	movs	r5, #29
 80034a0:	197b      	adds	r3, r7, r5
 80034a2:	7812      	ldrb	r2, [r2, #0]
 80034a4:	701a      	strb	r2, [r3, #0]
	fBPL = font[3];
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	1cda      	adds	r2, r3, #3
 80034aa:	231c      	movs	r3, #28
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	701a      	strb	r2, [r3, #0]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	3b20      	subs	r3, #32
 80034b8:	183a      	adds	r2, r7, r0
 80034ba:	7812      	ldrb	r2, [r2, #0]
 80034bc:	4353      	muls	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	18d3      	adds	r3, r2, r3
 80034c4:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80034c6:	193b      	adds	r3, r7, r4
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	197b      	adds	r3, r7, r5
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b29c      	uxth	r4, r3
 80034d2:	1dbb      	adds	r3, r7, #6
 80034d4:	8819      	ldrh	r1, [r3, #0]
 80034d6:	19bb      	adds	r3, r7, r6
 80034d8:	8818      	ldrh	r0, [r3, #0]
 80034da:	233c      	movs	r3, #60	@ 0x3c
 80034dc:	2508      	movs	r5, #8
 80034de:	195b      	adds	r3, r3, r5
 80034e0:	19db      	adds	r3, r3, r7
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	0023      	movs	r3, r4
 80034e8:	f000 fd86 	bl	8003ff8 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f0:	e044      	b.n	800357c <ILI9341_DrawChar+0x134>
	{
		for (int i=0; i < fWidth; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	e038      	b.n	800356a <ILI9341_DrawChar+0x122>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80034f8:	231c      	movs	r3, #28
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	6a3a      	ldr	r2, [r7, #32]
 8003500:	435a      	muls	r2, r3
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	10db      	asrs	r3, r3, #3
 8003506:	211f      	movs	r1, #31
 8003508:	400b      	ands	r3, r1
 800350a:	18d3      	adds	r3, r2, r3
 800350c:	3301      	adds	r3, #1
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	18d2      	adds	r2, r2, r3
 8003512:	2117      	movs	r1, #23
 8003514:	187b      	adds	r3, r7, r1
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	701a      	strb	r2, [r3, #0]
			uint8_t b = 1 << (j & 0x07);
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	2207      	movs	r2, #7
 800351e:	4013      	ands	r3, r2
 8003520:	2201      	movs	r2, #1
 8003522:	409a      	lsls	r2, r3
 8003524:	2016      	movs	r0, #22
 8003526:	183b      	adds	r3, r7, r0
 8003528:	701a      	strb	r2, [r3, #0]
			if (( z & b ) != 0x00)
 800352a:	187b      	adds	r3, r7, r1
 800352c:	183a      	adds	r2, r7, r0
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	7812      	ldrb	r2, [r2, #0]
 8003532:	4013      	ands	r3, r2
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d014      	beq.n	8003564 <ILI9341_DrawChar+0x11c>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	b29a      	uxth	r2, r3
 800353e:	230c      	movs	r3, #12
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	18d3      	adds	r3, r2, r3
 8003546:	b298      	uxth	r0, r3
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	b29a      	uxth	r2, r3
 800354c:	1dbb      	adds	r3, r7, #6
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	18d3      	adds	r3, r2, r3
 8003552:	b299      	uxth	r1, r3
 8003554:	2338      	movs	r3, #56	@ 0x38
 8003556:	2208      	movs	r2, #8
 8003558:	189b      	adds	r3, r3, r2
 800355a:	19db      	adds	r3, r3, r7
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	001a      	movs	r2, r3
 8003560:	f000 fbd8 	bl	8003d14 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	3301      	adds	r3, #1
 8003568:	623b      	str	r3, [r7, #32]
 800356a:	231e      	movs	r3, #30
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	6a3a      	ldr	r2, [r7, #32]
 8003572:	429a      	cmp	r2, r3
 8003574:	dbc0      	blt.n	80034f8 <ILI9341_DrawChar+0xb0>
	for (int j=0; j < fHeight; j++)
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	3301      	adds	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
 800357c:	231d      	movs	r3, #29
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003584:	429a      	cmp	r2, r3
 8003586:	dbb4      	blt.n	80034f2 <ILI9341_DrawChar+0xaa>
 8003588:	e000      	b.n	800358c <ILI9341_DrawChar+0x144>
	if ((ch < 31) || (ch > 127)) return;
 800358a:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}
}
 800358c:	46bd      	mov	sp, r7
 800358e:	b00b      	add	sp, #44	@ 0x2c
 8003590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003592 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8003592:	b590      	push	{r4, r7, lr}
 8003594:	b08b      	sub	sp, #44	@ 0x2c
 8003596:	af02      	add	r7, sp, #8
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	0019      	movs	r1, r3
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	1c0a      	adds	r2, r1, #0
 80035a6:	801a      	strh	r2, [r3, #0]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80035a8:	231f      	movs	r3, #31
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	701a      	strb	r2, [r3, #0]
	uint8_t fWidth = font[1];	/* Width of font */
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	231e      	movs	r3, #30
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	701a      	strb	r2, [r3, #0]

	while (*str)
 80035be:	e040      	b.n	8003642 <ILI9341_DrawText+0xb0>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	7818      	ldrb	r0, [r3, #0]
 80035c4:	1d3b      	adds	r3, r7, #4
 80035c6:	881c      	ldrh	r4, [r3, #0]
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	881a      	ldrh	r2, [r3, #0]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	2334      	movs	r3, #52	@ 0x34
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	2330      	movs	r3, #48	@ 0x30
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	0023      	movs	r3, r4
 80035e0:	f7ff ff32 	bl	8003448 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	3b20      	subs	r3, #32
 80035ea:	221f      	movs	r2, #31
 80035ec:	18ba      	adds	r2, r7, r2
 80035ee:	7812      	ldrb	r2, [r2, #0]
 80035f0:	4353      	muls	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	18d3      	adds	r3, r2, r3
 80035f8:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80035fa:	2117      	movs	r1, #23
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	701a      	strb	r2, [r3, #0]

		if(charWidth + 2 < fWidth)
 8003604:	187b      	adds	r3, r7, r1
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	1c9a      	adds	r2, r3, #2
 800360a:	231e      	movs	r3, #30
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	da0a      	bge.n	800362a <ILI9341_DrawText+0x98>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8003614:	187b      	adds	r3, r7, r1
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b29a      	uxth	r2, r3
 800361a:	1dbb      	adds	r3, r7, #6
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	18d3      	adds	r3, r2, r3
 8003620:	b29a      	uxth	r2, r3
 8003622:	1dbb      	adds	r3, r7, #6
 8003624:	3202      	adds	r2, #2
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	e008      	b.n	800363c <ILI9341_DrawText+0xaa>
		}
		else
		{
			X += fWidth;
 800362a:	231e      	movs	r3, #30
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	b299      	uxth	r1, r3
 8003632:	1dbb      	adds	r3, r7, #6
 8003634:	1dba      	adds	r2, r7, #6
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	188a      	adds	r2, r1, r2
 800363a:	801a      	strh	r2, [r3, #0]
		}

		str++;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3301      	adds	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
	while (*str)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1ba      	bne.n	80035c0 <ILI9341_DrawText+0x2e>
	}
}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b009      	add	sp, #36	@ 0x24
 8003652:	bd90      	pop	{r4, r7, pc}

08003654 <createFramebuf>:
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

uint16_t *frameBuffer = NULL;

void createFramebuf()
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
	frameBuffer = malloc(LCD_HEIGHT * LCD_WIDTH * sizeof(uint16_t));
 8003658:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <createFramebuf+0x2c>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	b29b      	uxth	r3, r3
 800365e:	001a      	movs	r2, r3
 8003660:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <createFramebuf+0x30>)
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	4353      	muls	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	0018      	movs	r0, r3
 800366c:	f005 f886 	bl	800877c <malloc>
 8003670:	0003      	movs	r3, r0
 8003672:	001a      	movs	r2, r3
 8003674:	4b04      	ldr	r3, [pc, #16]	@ (8003688 <createFramebuf+0x34>)
 8003676:	601a      	str	r2, [r3, #0]
}
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	20000000 	.word	0x20000000
 8003684:	20000002 	.word	0x20000002
 8003688:	20000208 	.word	0x20000208

0800368c <HAL_SPI_TxCpltCallback>:
{
	free(frameBuffer);
	frameBuffer = NULL;
}
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <HAL_SPI_TxCpltCallback+0x24>)
 8003698:	429a      	cmp	r2, r3
 800369a:	d105      	bne.n	80036a8 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800369c:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <HAL_SPI_TxCpltCallback+0x28>)
 800369e:	2201      	movs	r2, #1
 80036a0:	2101      	movs	r1, #1
 80036a2:	0018      	movs	r0, r3
 80036a4:	f003 fb1f 	bl	8006ce6 <HAL_GPIO_WritePin>
  }
}
 80036a8:	46c0      	nop			@ (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000674 	.word	0x20000674
 80036b4:	48000400 	.word	0x48000400

080036b8 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	0002      	movs	r2, r0
 80036c0:	1dfb      	adds	r3, r7, #7
 80036c2:	701a      	strb	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80036c4:	46c0      	nop			@ (mov r8, r8)
 80036c6:	4b08      	ldr	r3, [pc, #32]	@ (80036e8 <ILI9341_SPI_Tx+0x30>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2202      	movs	r2, #2
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d1f8      	bne.n	80036c6 <ILI9341_SPI_Tx+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80036d4:	1df9      	adds	r1, r7, #7
 80036d6:	4b04      	ldr	r3, [pc, #16]	@ (80036e8 <ILI9341_SPI_Tx+0x30>)
 80036d8:	2201      	movs	r2, #1
 80036da:	0018      	movs	r0, r3
 80036dc:	f004 fa26 	bl	8007b2c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80036e0:	46c0      	nop			@ (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b002      	add	sp, #8
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000674 	.word	0x20000674

080036ec <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	000a      	movs	r2, r1
 80036f6:	1cbb      	adds	r3, r7, #2
 80036f8:	801a      	strh	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	4b08      	ldr	r3, [pc, #32]	@ (8003720 <ILI9341_SPI_TxBuffer+0x34>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2202      	movs	r2, #2
 8003704:	4013      	ands	r3, r2
 8003706:	2b02      	cmp	r3, #2
 8003708:	d1f8      	bne.n	80036fc <ILI9341_SPI_TxBuffer+0x10>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 800370a:	1cbb      	adds	r3, r7, #2
 800370c:	881a      	ldrh	r2, [r3, #0]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4b03      	ldr	r3, [pc, #12]	@ (8003720 <ILI9341_SPI_TxBuffer+0x34>)
 8003712:	0018      	movs	r0, r3
 8003714:	f004 fa0a 	bl	8007b2c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8003718:	46c0      	nop			@ (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000674 	.word	0x20000674

08003724 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	0002      	movs	r2, r0
 800372c:	1dfb      	adds	r3, r7, #7
 800372e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8003730:	4b0a      	ldr	r3, [pc, #40]	@ (800375c <ILI9341_WriteCommand+0x38>)
 8003732:	2200      	movs	r2, #0
 8003734:	2102      	movs	r1, #2
 8003736:	0018      	movs	r0, r3
 8003738:	f003 fad5 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800373c:	4b07      	ldr	r3, [pc, #28]	@ (800375c <ILI9341_WriteCommand+0x38>)
 800373e:	2200      	movs	r2, #0
 8003740:	2101      	movs	r1, #1
 8003742:	0018      	movs	r0, r3
 8003744:	f003 facf 	bl	8006ce6 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8003748:	1dfb      	adds	r3, r7, #7
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	0018      	movs	r0, r3
 800374e:	f7ff ffb3 	bl	80036b8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	48000400 	.word	0x48000400

08003760 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	0002      	movs	r2, r0
 8003768:	1dfb      	adds	r3, r7, #7
 800376a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800376c:	4b0a      	ldr	r3, [pc, #40]	@ (8003798 <ILI9341_WriteData+0x38>)
 800376e:	2201      	movs	r2, #1
 8003770:	2102      	movs	r1, #2
 8003772:	0018      	movs	r0, r3
 8003774:	f003 fab7 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8003778:	4b07      	ldr	r3, [pc, #28]	@ (8003798 <ILI9341_WriteData+0x38>)
 800377a:	2200      	movs	r2, #0
 800377c:	2101      	movs	r1, #1
 800377e:	0018      	movs	r0, r3
 8003780:	f003 fab1 	bl	8006ce6 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff ff95 	bl	80036b8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	48000400 	.word	0x48000400

0800379c <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	000a      	movs	r2, r1
 80037a6:	1cbb      	adds	r3, r7, #2
 80037a8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80037aa:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <ILI9341_WriteBuffer+0x3c>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	2102      	movs	r1, #2
 80037b0:	0018      	movs	r0, r3
 80037b2:	f003 fa98 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80037b6:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <ILI9341_WriteBuffer+0x3c>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	2101      	movs	r1, #1
 80037bc:	0018      	movs	r0, r3
 80037be:	f003 fa92 	bl	8006ce6 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80037c2:	1cbb      	adds	r3, r7, #2
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0011      	movs	r1, r2
 80037ca:	0018      	movs	r0, r3
 80037cc:	f7ff ff8e 	bl	80036ec <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80037d0:	46c0      	nop			@ (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	48000400 	.word	0x48000400

080037dc <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80037dc:	b5b0      	push	{r4, r5, r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	0005      	movs	r5, r0
 80037e4:	000c      	movs	r4, r1
 80037e6:	0010      	movs	r0, r2
 80037e8:	0019      	movs	r1, r3
 80037ea:	1dbb      	adds	r3, r7, #6
 80037ec:	1c2a      	adds	r2, r5, #0
 80037ee:	801a      	strh	r2, [r3, #0]
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	1c22      	adds	r2, r4, #0
 80037f4:	801a      	strh	r2, [r3, #0]
 80037f6:	1cbb      	adds	r3, r7, #2
 80037f8:	1c02      	adds	r2, r0, #0
 80037fa:	801a      	strh	r2, [r3, #0]
 80037fc:	003b      	movs	r3, r7
 80037fe:	1c0a      	adds	r2, r1, #0
 8003800:	801a      	strh	r2, [r3, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8003802:	1dbb      	adds	r3, r7, #6
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	b29b      	uxth	r3, r3
 800380a:	b2da      	uxtb	r2, r3
 800380c:	210c      	movs	r1, #12
 800380e:	187b      	adds	r3, r7, r1
 8003810:	701a      	strb	r2, [r3, #0]
	buffer[1] = x1;
 8003812:	1dbb      	adds	r3, r7, #6
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	187b      	adds	r3, r7, r1
 800381a:	705a      	strb	r2, [r3, #1]
	buffer[2] = x2 >> 8;
 800381c:	1cbb      	adds	r3, r7, #2
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	b29b      	uxth	r3, r3
 8003824:	b2da      	uxtb	r2, r3
 8003826:	187b      	adds	r3, r7, r1
 8003828:	709a      	strb	r2, [r3, #2]
	buffer[3] = x2;
 800382a:	1cbb      	adds	r3, r7, #2
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	000c      	movs	r4, r1
 8003832:	187b      	adds	r3, r7, r1
 8003834:	70da      	strb	r2, [r3, #3]

	ILI9341_WriteCommand(0x2A);
 8003836:	202a      	movs	r0, #42	@ 0x2a
 8003838:	f7ff ff74 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800383c:	193b      	adds	r3, r7, r4
 800383e:	2104      	movs	r1, #4
 8003840:	0018      	movs	r0, r3
 8003842:	f7ff ffab 	bl	800379c <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	b29b      	uxth	r3, r3
 800384e:	b2da      	uxtb	r2, r3
 8003850:	0021      	movs	r1, r4
 8003852:	187b      	adds	r3, r7, r1
 8003854:	701a      	strb	r2, [r3, #0]
	buffer[1] = y1;
 8003856:	1d3b      	adds	r3, r7, #4
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	187b      	adds	r3, r7, r1
 800385e:	705a      	strb	r2, [r3, #1]
	buffer[2] = y2 >> 8;
 8003860:	003b      	movs	r3, r7
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	b29b      	uxth	r3, r3
 8003868:	b2da      	uxtb	r2, r3
 800386a:	187b      	adds	r3, r7, r1
 800386c:	709a      	strb	r2, [r3, #2]
	buffer[3] = y2;
 800386e:	003b      	movs	r3, r7
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	000c      	movs	r4, r1
 8003876:	187b      	adds	r3, r7, r1
 8003878:	70da      	strb	r2, [r3, #3]

	ILI9341_WriteCommand(0x2B);
 800387a:	202b      	movs	r0, #43	@ 0x2b
 800387c:	f7ff ff52 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8003880:	193b      	adds	r3, r7, r4
 8003882:	2104      	movs	r1, #4
 8003884:	0018      	movs	r0, r3
 8003886:	f7ff ff89 	bl	800379c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800388a:	202c      	movs	r0, #44	@ 0x2c
 800388c:	f7ff ff4a 	bl	8003724 <ILI9341_WriteCommand>
}
 8003890:	46c0      	nop			@ (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b004      	add	sp, #16
 8003896:	bdb0      	pop	{r4, r5, r7, pc}

08003898 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 800389c:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <ILI9341_Reset+0x48>)
 800389e:	2200      	movs	r2, #0
 80038a0:	2104      	movs	r1, #4
 80038a2:	0018      	movs	r0, r3
 80038a4:	f003 fa1f 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80038a8:	200a      	movs	r0, #10
 80038aa:	f002 f9e7 	bl	8005c7c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80038ae:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <ILI9341_Reset+0x48>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	2101      	movs	r1, #1
 80038b4:	0018      	movs	r0, r3
 80038b6:	f003 fa16 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80038ba:	200a      	movs	r0, #10
 80038bc:	f002 f9de 	bl	8005c7c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80038c0:	4b07      	ldr	r3, [pc, #28]	@ (80038e0 <ILI9341_Reset+0x48>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	2104      	movs	r1, #4
 80038c6:	0018      	movs	r0, r3
 80038c8:	f003 fa0d 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80038cc:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <ILI9341_Reset+0x48>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	2101      	movs	r1, #1
 80038d2:	0018      	movs	r0, r3
 80038d4:	f003 fa07 	bl	8006ce6 <HAL_GPIO_WritePin>
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	48000400 	.word	0x48000400

080038e4 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80038e8:	4b04      	ldr	r3, [pc, #16]	@ (80038fc <ILI9341_Enable+0x18>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	2104      	movs	r1, #4
 80038ee:	0018      	movs	r0, r3
 80038f0:	f003 f9f9 	bl	8006ce6 <HAL_GPIO_WritePin>
}
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	48000400 	.word	0x48000400

08003900 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8003904:	f7ff ffee 	bl	80038e4 <ILI9341_Enable>
	ILI9341_Reset();
 8003908:	f7ff ffc6 	bl	8003898 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800390c:	2001      	movs	r0, #1
 800390e:	f7ff ff09 	bl	8003724 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8003912:	200a      	movs	r0, #10
 8003914:	f002 f9b2 	bl	8005c7c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8003918:	20cb      	movs	r0, #203	@ 0xcb
 800391a:	f7ff ff03 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800391e:	2039      	movs	r0, #57	@ 0x39
 8003920:	f7ff ff1e 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8003924:	202c      	movs	r0, #44	@ 0x2c
 8003926:	f7ff ff1b 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800392a:	2000      	movs	r0, #0
 800392c:	f7ff ff18 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8003930:	2034      	movs	r0, #52	@ 0x34
 8003932:	f7ff ff15 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8003936:	2002      	movs	r0, #2
 8003938:	f7ff ff12 	bl	8003760 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 800393c:	20cf      	movs	r0, #207	@ 0xcf
 800393e:	f7ff fef1 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8003942:	2000      	movs	r0, #0
 8003944:	f7ff ff0c 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8003948:	20c1      	movs	r0, #193	@ 0xc1
 800394a:	f7ff ff09 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 800394e:	2030      	movs	r0, #48	@ 0x30
 8003950:	f7ff ff06 	bl	8003760 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8003954:	20e8      	movs	r0, #232	@ 0xe8
 8003956:	f7ff fee5 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 800395a:	2085      	movs	r0, #133	@ 0x85
 800395c:	f7ff ff00 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8003960:	2000      	movs	r0, #0
 8003962:	f7ff fefd 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8003966:	2078      	movs	r0, #120	@ 0x78
 8003968:	f7ff fefa 	bl	8003760 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 800396c:	20ea      	movs	r0, #234	@ 0xea
 800396e:	f7ff fed9 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8003972:	2000      	movs	r0, #0
 8003974:	f7ff fef4 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8003978:	2000      	movs	r0, #0
 800397a:	f7ff fef1 	bl	8003760 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800397e:	20ed      	movs	r0, #237	@ 0xed
 8003980:	f7ff fed0 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8003984:	2064      	movs	r0, #100	@ 0x64
 8003986:	f7ff feeb 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800398a:	2003      	movs	r0, #3
 800398c:	f7ff fee8 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8003990:	2012      	movs	r0, #18
 8003992:	f7ff fee5 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8003996:	2081      	movs	r0, #129	@ 0x81
 8003998:	f7ff fee2 	bl	8003760 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 800399c:	20f7      	movs	r0, #247	@ 0xf7
 800399e:	f7ff fec1 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80039a2:	2020      	movs	r0, #32
 80039a4:	f7ff fedc 	bl	8003760 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80039a8:	20c0      	movs	r0, #192	@ 0xc0
 80039aa:	f7ff febb 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80039ae:	2023      	movs	r0, #35	@ 0x23
 80039b0:	f7ff fed6 	bl	8003760 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80039b4:	20c1      	movs	r0, #193	@ 0xc1
 80039b6:	f7ff feb5 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80039ba:	2010      	movs	r0, #16
 80039bc:	f7ff fed0 	bl	8003760 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80039c0:	20c5      	movs	r0, #197	@ 0xc5
 80039c2:	f7ff feaf 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 80039c6:	203e      	movs	r0, #62	@ 0x3e
 80039c8:	f7ff feca 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80039cc:	2028      	movs	r0, #40	@ 0x28
 80039ce:	f7ff fec7 	bl	8003760 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80039d2:	20c7      	movs	r0, #199	@ 0xc7
 80039d4:	f7ff fea6 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80039d8:	2086      	movs	r0, #134	@ 0x86
 80039da:	f7ff fec1 	bl	8003760 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80039de:	2036      	movs	r0, #54	@ 0x36
 80039e0:	f7ff fea0 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80039e4:	2048      	movs	r0, #72	@ 0x48
 80039e6:	f7ff febb 	bl	8003760 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80039ea:	203a      	movs	r0, #58	@ 0x3a
 80039ec:	f7ff fe9a 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 80039f0:	2055      	movs	r0, #85	@ 0x55
 80039f2:	f7ff feb5 	bl	8003760 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80039f6:	20b1      	movs	r0, #177	@ 0xb1
 80039f8:	f7ff fe94 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7ff feaf 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8003a02:	2018      	movs	r0, #24
 8003a04:	f7ff feac 	bl	8003760 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8003a08:	20b6      	movs	r0, #182	@ 0xb6
 8003a0a:	f7ff fe8b 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8003a0e:	2008      	movs	r0, #8
 8003a10:	f7ff fea6 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8003a14:	2082      	movs	r0, #130	@ 0x82
 8003a16:	f7ff fea3 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8003a1a:	2027      	movs	r0, #39	@ 0x27
 8003a1c:	f7ff fea0 	bl	8003760 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8003a20:	20f2      	movs	r0, #242	@ 0xf2
 8003a22:	f7ff fe7f 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8003a26:	2000      	movs	r0, #0
 8003a28:	f7ff fe9a 	bl	8003760 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8003a2c:	2026      	movs	r0, #38	@ 0x26
 8003a2e:	f7ff fe79 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8003a32:	2001      	movs	r0, #1
 8003a34:	f7ff fe94 	bl	8003760 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8003a38:	20e0      	movs	r0, #224	@ 0xe0
 8003a3a:	f7ff fe73 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8003a3e:	200f      	movs	r0, #15
 8003a40:	f7ff fe8e 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8003a44:	2031      	movs	r0, #49	@ 0x31
 8003a46:	f7ff fe8b 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8003a4a:	202b      	movs	r0, #43	@ 0x2b
 8003a4c:	f7ff fe88 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8003a50:	200c      	movs	r0, #12
 8003a52:	f7ff fe85 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8003a56:	200e      	movs	r0, #14
 8003a58:	f7ff fe82 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8003a5c:	2008      	movs	r0, #8
 8003a5e:	f7ff fe7f 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8003a62:	204e      	movs	r0, #78	@ 0x4e
 8003a64:	f7ff fe7c 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8003a68:	20f1      	movs	r0, #241	@ 0xf1
 8003a6a:	f7ff fe79 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8003a6e:	2037      	movs	r0, #55	@ 0x37
 8003a70:	f7ff fe76 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8003a74:	2007      	movs	r0, #7
 8003a76:	f7ff fe73 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8003a7a:	2010      	movs	r0, #16
 8003a7c:	f7ff fe70 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8003a80:	2003      	movs	r0, #3
 8003a82:	f7ff fe6d 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8003a86:	200e      	movs	r0, #14
 8003a88:	f7ff fe6a 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8003a8c:	2009      	movs	r0, #9
 8003a8e:	f7ff fe67 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8003a92:	2000      	movs	r0, #0
 8003a94:	f7ff fe64 	bl	8003760 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8003a98:	20e1      	movs	r0, #225	@ 0xe1
 8003a9a:	f7ff fe43 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f7ff fe5e 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8003aa4:	200e      	movs	r0, #14
 8003aa6:	f7ff fe5b 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8003aaa:	2014      	movs	r0, #20
 8003aac:	f7ff fe58 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8003ab0:	2003      	movs	r0, #3
 8003ab2:	f7ff fe55 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8003ab6:	2011      	movs	r0, #17
 8003ab8:	f7ff fe52 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8003abc:	2007      	movs	r0, #7
 8003abe:	f7ff fe4f 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8003ac2:	2031      	movs	r0, #49	@ 0x31
 8003ac4:	f7ff fe4c 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8003ac8:	20c1      	movs	r0, #193	@ 0xc1
 8003aca:	f7ff fe49 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8003ace:	2048      	movs	r0, #72	@ 0x48
 8003ad0:	f7ff fe46 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8003ad4:	2008      	movs	r0, #8
 8003ad6:	f7ff fe43 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8003ada:	200f      	movs	r0, #15
 8003adc:	f7ff fe40 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8003ae0:	200c      	movs	r0, #12
 8003ae2:	f7ff fe3d 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8003ae6:	2031      	movs	r0, #49	@ 0x31
 8003ae8:	f7ff fe3a 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8003aec:	2036      	movs	r0, #54	@ 0x36
 8003aee:	f7ff fe37 	bl	8003760 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8003af2:	200f      	movs	r0, #15
 8003af4:	f7ff fe34 	bl	8003760 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8003af8:	2011      	movs	r0, #17
 8003afa:	f7ff fe13 	bl	8003724 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8003afe:	2064      	movs	r0, #100	@ 0x64
 8003b00:	f002 f8bc 	bl	8005c7c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8003b04:	2029      	movs	r0, #41	@ 0x29
 8003b06:	f7ff fe0d 	bl	8003724 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f000 f804 	bl	8003b18 <ILI9341_SetRotation>
}
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	0002      	movs	r2, r0
 8003b20:	1dfb      	adds	r3, r7, #7
 8003b22:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteCommand(0x36);
 8003b24:	2036      	movs	r0, #54	@ 0x36
 8003b26:	f7ff fdfd 	bl	8003724 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	f002 f8a6 	bl	8005c7c <HAL_Delay>

	switch(rotation)
 8003b30:	1dfb      	adds	r3, r7, #7
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d029      	beq.n	8003b8c <ILI9341_SetRotation+0x74>
 8003b38:	dc33      	bgt.n	8003ba2 <ILI9341_SetRotation+0x8a>
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d01b      	beq.n	8003b76 <ILI9341_SetRotation+0x5e>
 8003b3e:	dc30      	bgt.n	8003ba2 <ILI9341_SetRotation+0x8a>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <ILI9341_SetRotation+0x32>
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d00b      	beq.n	8003b60 <ILI9341_SetRotation+0x48>
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
		LCD_WIDTH  = 320;
		LCD_HEIGHT = 240;
		break;
	default:
		break;
 8003b48:	e02b      	b.n	8003ba2 <ILI9341_SetRotation+0x8a>
		ILI9341_WriteData(0x40|0x08);
 8003b4a:	2048      	movs	r0, #72	@ 0x48
 8003b4c:	f7ff fe08 	bl	8003760 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8003b50:	4b16      	ldr	r3, [pc, #88]	@ (8003bac <ILI9341_SetRotation+0x94>)
 8003b52:	22f0      	movs	r2, #240	@ 0xf0
 8003b54:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8003b56:	4b16      	ldr	r3, [pc, #88]	@ (8003bb0 <ILI9341_SetRotation+0x98>)
 8003b58:	22a0      	movs	r2, #160	@ 0xa0
 8003b5a:	0052      	lsls	r2, r2, #1
 8003b5c:	801a      	strh	r2, [r3, #0]
		break;
 8003b5e:	e021      	b.n	8003ba4 <ILI9341_SetRotation+0x8c>
		ILI9341_WriteData(0x20|0x08);
 8003b60:	2028      	movs	r0, #40	@ 0x28
 8003b62:	f7ff fdfd 	bl	8003760 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8003b66:	4b11      	ldr	r3, [pc, #68]	@ (8003bac <ILI9341_SetRotation+0x94>)
 8003b68:	22a0      	movs	r2, #160	@ 0xa0
 8003b6a:	0052      	lsls	r2, r2, #1
 8003b6c:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8003b6e:	4b10      	ldr	r3, [pc, #64]	@ (8003bb0 <ILI9341_SetRotation+0x98>)
 8003b70:	22f0      	movs	r2, #240	@ 0xf0
 8003b72:	801a      	strh	r2, [r3, #0]
		break;
 8003b74:	e016      	b.n	8003ba4 <ILI9341_SetRotation+0x8c>
		ILI9341_WriteData(0x80|0x08);
 8003b76:	2088      	movs	r0, #136	@ 0x88
 8003b78:	f7ff fdf2 	bl	8003760 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <ILI9341_SetRotation+0x94>)
 8003b7e:	22f0      	movs	r2, #240	@ 0xf0
 8003b80:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8003b82:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <ILI9341_SetRotation+0x98>)
 8003b84:	22a0      	movs	r2, #160	@ 0xa0
 8003b86:	0052      	lsls	r2, r2, #1
 8003b88:	801a      	strh	r2, [r3, #0]
		break;
 8003b8a:	e00b      	b.n	8003ba4 <ILI9341_SetRotation+0x8c>
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8003b8c:	20e8      	movs	r0, #232	@ 0xe8
 8003b8e:	f7ff fde7 	bl	8003760 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8003b92:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <ILI9341_SetRotation+0x94>)
 8003b94:	22a0      	movs	r2, #160	@ 0xa0
 8003b96:	0052      	lsls	r2, r2, #1
 8003b98:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8003b9a:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <ILI9341_SetRotation+0x98>)
 8003b9c:	22f0      	movs	r2, #240	@ 0xf0
 8003b9e:	801a      	strh	r2, [r3, #0]
		break;
 8003ba0:	e000      	b.n	8003ba4 <ILI9341_SetRotation+0x8c>
		break;
 8003ba2:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003ba4:	46c0      	nop			@ (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b002      	add	sp, #8
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000002 	.word	0x20000002
 8003bb0:	20000000 	.word	0x20000000

08003bb4 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8003bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb6:	46c6      	mov	lr, r8
 8003bb8:	b500      	push	{lr}
 8003bba:	b092      	sub	sp, #72	@ 0x48
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	61b9      	str	r1, [r7, #24]
 8003bc2:	231e      	movs	r3, #30
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	801a      	strh	r2, [r3, #0]
 8003bc8:	466b      	mov	r3, sp
 8003bca:	4698      	mov	r8, r3
	uint32_t BufferSize = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	647b      	str	r3, [r7, #68]	@ 0x44

	if((size*2) < BURST_MAX_SIZE)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	005a      	lsls	r2, r3, #1
 8003bd4:	23fa      	movs	r3, #250	@ 0xfa
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d202      	bcs.n	8003be2 <ILI9341_DrawColorBurst+0x2e>
	{
		BufferSize = size;
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8003be0:	e002      	b.n	8003be8 <ILI9341_DrawColorBurst+0x34>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8003be2:	23fa      	movs	r3, #250	@ 0xfa
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	647b      	str	r3, [r7, #68]	@ 0x44
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003be8:	4b48      	ldr	r3, [pc, #288]	@ (8003d0c <ILI9341_DrawColorBurst+0x158>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	2102      	movs	r1, #2
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f003 f879 	bl	8006ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003bf4:	4b45      	ldr	r3, [pc, #276]	@ (8003d0c <ILI9341_DrawColorBurst+0x158>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f003 f873 	bl	8006ce6 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8003c00:	231e      	movs	r3, #30
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	2323      	movs	r3, #35	@ 0x23
 8003c0c:	2118      	movs	r1, #24
 8003c0e:	185b      	adds	r3, r3, r1
 8003c10:	19db      	adds	r3, r3, r7
 8003c12:	701a      	strb	r2, [r3, #0]
	uint8_t BurstBuffer[BufferSize];
 8003c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c16:	001a      	movs	r2, r3
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60fa      	str	r2, [r7, #12]
 8003c22:	68b8      	ldr	r0, [r7, #8]
 8003c24:	68f9      	ldr	r1, [r7, #12]
 8003c26:	0002      	movs	r2, r0
 8003c28:	0f52      	lsrs	r2, r2, #29
 8003c2a:	000e      	movs	r6, r1
 8003c2c:	00f6      	lsls	r6, r6, #3
 8003c2e:	617e      	str	r6, [r7, #20]
 8003c30:	697e      	ldr	r6, [r7, #20]
 8003c32:	4316      	orrs	r6, r2
 8003c34:	617e      	str	r6, [r7, #20]
 8003c36:	0002      	movs	r2, r0
 8003c38:	00d2      	lsls	r2, r2, #3
 8003c3a:	613a      	str	r2, [r7, #16]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	6838      	ldr	r0, [r7, #0]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	0002      	movs	r2, r0
 8003c48:	0f52      	lsrs	r2, r2, #29
 8003c4a:	000e      	movs	r6, r1
 8003c4c:	00f5      	lsls	r5, r6, #3
 8003c4e:	4315      	orrs	r5, r2
 8003c50:	0002      	movs	r2, r0
 8003c52:	00d4      	lsls	r4, r2, #3
 8003c54:	3307      	adds	r3, #7
 8003c56:	08db      	lsrs	r3, r3, #3
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	466a      	mov	r2, sp
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	469d      	mov	sp, r3
 8003c60:	466b      	mov	r3, sp
 8003c62:	3300      	adds	r3, #0
 8003c64:	633b      	str	r3, [r7, #48]	@ 0x30

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8003c66:	2300      	movs	r3, #0
 8003c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c6a:	e013      	b.n	8003c94 <ILI9341_DrawColorBurst+0xe0>
	{
		BurstBuffer[j] = chifted;
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c70:	18d3      	adds	r3, r2, r3
 8003c72:	2223      	movs	r2, #35	@ 0x23
 8003c74:	2118      	movs	r1, #24
 8003c76:	1852      	adds	r2, r2, r1
 8003c78:	19d2      	adds	r2, r2, r7
 8003c7a:	7812      	ldrb	r2, [r2, #0]
 8003c7c:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8003c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c80:	3301      	adds	r3, #1
 8003c82:	221e      	movs	r2, #30
 8003c84:	18ba      	adds	r2, r7, r2
 8003c86:	8812      	ldrh	r2, [r2, #0]
 8003c88:	b2d1      	uxtb	r1, r2
 8003c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8c:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c90:	3302      	adds	r3, #2
 8003c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d3e7      	bcc.n	8003c6c <ILI9341_DrawColorBurst+0xb8>
	}

	uint32_t SendingSize = size * 2;
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8003ca2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003ca4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ca6:	f7fc fa49 	bl	800013c <__udivsi3>
 8003caa:	0003      	movs	r3, r0
 8003cac:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8003cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7fc fac8 	bl	8000248 <__aeabi_uidivmod>
 8003cb8:	000b      	movs	r3, r1
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24

	if(SendingInBlock != 0)
 8003cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d010      	beq.n	8003ce4 <ILI9341_DrawColorBurst+0x130>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cc6:	e009      	b.n	8003cdc <ILI9341_DrawColorBurst+0x128>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8003cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cce:	4810      	ldr	r0, [pc, #64]	@ (8003d10 <ILI9341_DrawColorBurst+0x15c>)
 8003cd0:	230a      	movs	r3, #10
 8003cd2:	f003 fdcb 	bl	800786c <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8003cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd8:	3301      	adds	r3, #1
 8003cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d3f1      	bcc.n	8003cc8 <ILI9341_DrawColorBurst+0x114>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cea:	4809      	ldr	r0, [pc, #36]	@ (8003d10 <ILI9341_DrawColorBurst+0x15c>)
 8003cec:	230a      	movs	r3, #10
 8003cee:	f003 fdbd 	bl	800786c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003cf2:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <ILI9341_DrawColorBurst+0x158>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f002 fff4 	bl	8006ce6 <HAL_GPIO_WritePin>
 8003cfe:	46c5      	mov	sp, r8
}
 8003d00:	46c0      	nop			@ (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b012      	add	sp, #72	@ 0x48
 8003d06:	bc80      	pop	{r7}
 8003d08:	46b8      	mov	r8, r7
 8003d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0c:	48000400 	.word	0x48000400
 8003d10:	20000674 	.word	0x20000674

08003d14 <ILI9341_DrawPixel>:
        ILI9341_WriteBuffer(buffer, remainder * 2); // Each pixel is 2 bytes
    }
}

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8003d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	0004      	movs	r4, r0
 8003d1c:	0008      	movs	r0, r1
 8003d1e:	0011      	movs	r1, r2
 8003d20:	1dbb      	adds	r3, r7, #6
 8003d22:	1c22      	adds	r2, r4, #0
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	1d3b      	adds	r3, r7, #4
 8003d28:	1c02      	adds	r2, r0, #0
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	1cbb      	adds	r3, r7, #2
 8003d2e:	1c0a      	adds	r2, r1, #0
 8003d30:	801a      	strh	r2, [r3, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8003d32:	4b37      	ldr	r3, [pc, #220]	@ (8003e10 <ILI9341_DrawPixel+0xfc>)
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	1dba      	adds	r2, r7, #6
 8003d3a:	8812      	ldrh	r2, [r2, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d262      	bcs.n	8003e06 <ILI9341_DrawPixel+0xf2>
 8003d40:	4b34      	ldr	r3, [pc, #208]	@ (8003e14 <ILI9341_DrawPixel+0x100>)
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	1d3a      	adds	r2, r7, #4
 8003d48:	8812      	ldrh	r2, [r2, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d25b      	bcs.n	8003e06 <ILI9341_DrawPixel+0xf2>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8003d4e:	1dbb      	adds	r3, r7, #6
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	2414      	movs	r4, #20
 8003d5a:	193b      	adds	r3, r7, r4
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	1dbb      	adds	r3, r7, #6
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	193b      	adds	r3, r7, r4
 8003d66:	705a      	strb	r2, [r3, #1]
 8003d68:	1dbb      	adds	r3, r7, #6
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	121b      	asrs	r3, r3, #8
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	193b      	adds	r3, r7, r4
 8003d74:	709a      	strb	r2, [r3, #2]
 8003d76:	1dbb      	adds	r3, r7, #6
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	193b      	adds	r3, r7, r4
 8003d82:	70da      	strb	r2, [r3, #3]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	2510      	movs	r5, #16
 8003d90:	197b      	adds	r3, r7, r5
 8003d92:	701a      	strb	r2, [r3, #0]
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	197b      	adds	r3, r7, r5
 8003d9c:	705a      	strb	r2, [r3, #1]
 8003d9e:	1d3b      	adds	r3, r7, #4
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	3301      	adds	r3, #1
 8003da4:	121b      	asrs	r3, r3, #8
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	197b      	adds	r3, r7, r5
 8003daa:	709a      	strb	r2, [r3, #2]
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	197b      	adds	r3, r7, r5
 8003db8:	70da      	strb	r2, [r3, #3]
	uint8_t bufferC[2] = {color>>8, color};
 8003dba:	1cbb      	adds	r3, r7, #2
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	260c      	movs	r6, #12
 8003dc6:	19bb      	adds	r3, r7, r6
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	1cbb      	adds	r3, r7, #2
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	19bb      	adds	r3, r7, r6
 8003dd2:	705a      	strb	r2, [r3, #1]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8003dd4:	202a      	movs	r0, #42	@ 0x2a
 8003dd6:	f7ff fca5 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	2104      	movs	r1, #4
 8003dde:	0018      	movs	r0, r3
 8003de0:	f7ff fcdc 	bl	800379c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8003de4:	202b      	movs	r0, #43	@ 0x2b
 8003de6:	f7ff fc9d 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8003dea:	197b      	adds	r3, r7, r5
 8003dec:	2104      	movs	r1, #4
 8003dee:	0018      	movs	r0, r3
 8003df0:	f7ff fcd4 	bl	800379c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8003df4:	202c      	movs	r0, #44	@ 0x2c
 8003df6:	f7ff fc95 	bl	8003724 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8003dfa:	19bb      	adds	r3, r7, r6
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7ff fccc 	bl	800379c <ILI9341_WriteBuffer>
 8003e04:	e000      	b.n	8003e08 <ILI9341_DrawPixel+0xf4>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8003e06:	46c0      	nop			@ (mov r8, r8)
}
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b007      	add	sp, #28
 8003e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	20000002 	.word	0x20000002
 8003e14:	20000000 	.word	0x20000000

08003e18 <ILI9341_DrawLine>:

void ILI9341_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	0005      	movs	r5, r0
 8003e20:	000c      	movs	r4, r1
 8003e22:	0010      	movs	r0, r2
 8003e24:	0019      	movs	r1, r3
 8003e26:	1dbb      	adds	r3, r7, #6
 8003e28:	1c2a      	adds	r2, r5, #0
 8003e2a:	801a      	strh	r2, [r3, #0]
 8003e2c:	1d3b      	adds	r3, r7, #4
 8003e2e:	1c22      	adds	r2, r4, #0
 8003e30:	801a      	strh	r2, [r3, #0]
 8003e32:	1cbb      	adds	r3, r7, #2
 8003e34:	1c02      	adds	r2, r0, #0
 8003e36:	801a      	strh	r2, [r3, #0]
 8003e38:	003b      	movs	r3, r7
 8003e3a:	1c0a      	adds	r2, r1, #0
 8003e3c:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003e3e:	003b      	movs	r3, r7
 8003e40:	2200      	movs	r2, #0
 8003e42:	5e9a      	ldrsh	r2, [r3, r2]
 8003e44:	1d3b      	adds	r3, r7, #4
 8003e46:	2100      	movs	r1, #0
 8003e48:	5e5b      	ldrsh	r3, [r3, r1]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	17d9      	asrs	r1, r3, #31
 8003e4e:	185a      	adds	r2, r3, r1
 8003e50:	404a      	eors	r2, r1
 8003e52:	1cbb      	adds	r3, r7, #2
 8003e54:	2100      	movs	r1, #0
 8003e56:	5e59      	ldrsh	r1, [r3, r1]
 8003e58:	1dbb      	adds	r3, r7, #6
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	5e1b      	ldrsh	r3, [r3, r0]
 8003e5e:	1acb      	subs	r3, r1, r3
 8003e60:	17d9      	asrs	r1, r3, #31
 8003e62:	185b      	adds	r3, r3, r1
 8003e64:	404b      	eors	r3, r1
 8003e66:	2101      	movs	r1, #1
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	dc01      	bgt.n	8003e70 <ILI9341_DrawLine+0x58>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	1c19      	adds	r1, r3, #0
 8003e70:	b2ca      	uxtb	r2, r1
 8003e72:	2114      	movs	r1, #20
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	801a      	strh	r2, [r3, #0]
    if (steep)
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	5e9b      	ldrsh	r3, [r3, r2]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d018      	beq.n	8003eb4 <ILI9341_DrawLine+0x9c>
    {
        // Swap x0 and y0, x1 and y1 if the line is steep
        int16_t temp = x0;
 8003e82:	2112      	movs	r1, #18
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	1dba      	adds	r2, r7, #6
 8003e88:	8812      	ldrh	r2, [r2, #0]
 8003e8a:	801a      	strh	r2, [r3, #0]
        x0 = y0;
 8003e8c:	1dbb      	adds	r3, r7, #6
 8003e8e:	1d3a      	adds	r2, r7, #4
 8003e90:	8812      	ldrh	r2, [r2, #0]
 8003e92:	801a      	strh	r2, [r3, #0]
        y0 = temp;
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	187a      	adds	r2, r7, r1
 8003e98:	8812      	ldrh	r2, [r2, #0]
 8003e9a:	801a      	strh	r2, [r3, #0]

        temp = x1;
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	1cba      	adds	r2, r7, #2
 8003ea0:	8812      	ldrh	r2, [r2, #0]
 8003ea2:	801a      	strh	r2, [r3, #0]
        x1 = y1;
 8003ea4:	1cbb      	adds	r3, r7, #2
 8003ea6:	003a      	movs	r2, r7
 8003ea8:	8812      	ldrh	r2, [r2, #0]
 8003eaa:	801a      	strh	r2, [r3, #0]
        y1 = temp;
 8003eac:	003b      	movs	r3, r7
 8003eae:	187a      	adds	r2, r7, r1
 8003eb0:	8812      	ldrh	r2, [r2, #0]
 8003eb2:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1)
 8003eb4:	1dba      	adds	r2, r7, #6
 8003eb6:	1cbb      	adds	r3, r7, #2
 8003eb8:	2100      	movs	r1, #0
 8003eba:	5e52      	ldrsh	r2, [r2, r1]
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	5e5b      	ldrsh	r3, [r3, r1]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	dd18      	ble.n	8003ef6 <ILI9341_DrawLine+0xde>
    {
        // Swap x0 and x1, y0 and y1 if necessary
        int16_t temp = x0;
 8003ec4:	2110      	movs	r1, #16
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	1dba      	adds	r2, r7, #6
 8003eca:	8812      	ldrh	r2, [r2, #0]
 8003ecc:	801a      	strh	r2, [r3, #0]
        x0 = x1;
 8003ece:	1dbb      	adds	r3, r7, #6
 8003ed0:	1cba      	adds	r2, r7, #2
 8003ed2:	8812      	ldrh	r2, [r2, #0]
 8003ed4:	801a      	strh	r2, [r3, #0]
        x1 = temp;
 8003ed6:	1cbb      	adds	r3, r7, #2
 8003ed8:	187a      	adds	r2, r7, r1
 8003eda:	8812      	ldrh	r2, [r2, #0]
 8003edc:	801a      	strh	r2, [r3, #0]

        temp = y0;
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	1d3a      	adds	r2, r7, #4
 8003ee2:	8812      	ldrh	r2, [r2, #0]
 8003ee4:	801a      	strh	r2, [r3, #0]
        y0 = y1;
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	003a      	movs	r2, r7
 8003eea:	8812      	ldrh	r2, [r2, #0]
 8003eec:	801a      	strh	r2, [r3, #0]
        y1 = temp;
 8003eee:	003b      	movs	r3, r7
 8003ef0:	187a      	adds	r2, r7, r1
 8003ef2:	8812      	ldrh	r2, [r2, #0]
 8003ef4:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx = x1 - x0;
 8003ef6:	1cbb      	adds	r3, r7, #2
 8003ef8:	881a      	ldrh	r2, [r3, #0]
 8003efa:	1dbb      	adds	r3, r7, #6
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	200e      	movs	r0, #14
 8003f04:	183b      	adds	r3, r7, r0
 8003f06:	801a      	strh	r2, [r3, #0]
    int16_t dy = abs(y1 - y0);
 8003f08:	003b      	movs	r3, r7
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	5e9a      	ldrsh	r2, [r3, r2]
 8003f0e:	1d3b      	adds	r3, r7, #4
 8003f10:	2100      	movs	r1, #0
 8003f12:	5e5b      	ldrsh	r3, [r3, r1]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	17d9      	asrs	r1, r3, #31
 8003f18:	185a      	adds	r2, r3, r1
 8003f1a:	404a      	eors	r2, r1
 8003f1c:	230c      	movs	r3, #12
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8003f22:	2316      	movs	r3, #22
 8003f24:	18fa      	adds	r2, r7, r3
 8003f26:	183b      	adds	r3, r7, r0
 8003f28:	2100      	movs	r1, #0
 8003f2a:	5e5b      	ldrsh	r3, [r3, r1]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	da00      	bge.n	8003f32 <ILI9341_DrawLine+0x11a>
 8003f30:	3301      	adds	r3, #1
 8003f32:	105b      	asrs	r3, r3, #1
 8003f34:	8013      	strh	r3, [r2, #0]
    int16_t ystep = (y0 < y1) ? 1 : -1;
 8003f36:	1d3a      	adds	r2, r7, #4
 8003f38:	003b      	movs	r3, r7
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	5e52      	ldrsh	r2, [r2, r1]
 8003f3e:	2100      	movs	r1, #0
 8003f40:	5e5b      	ldrsh	r3, [r3, r1]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	da01      	bge.n	8003f4a <ILI9341_DrawLine+0x132>
 8003f46:	2201      	movs	r2, #1
 8003f48:	e001      	b.n	8003f4e <ILI9341_DrawLine+0x136>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	425a      	negs	r2, r3
 8003f4e:	230a      	movs	r3, #10
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	801a      	strh	r2, [r3, #0]

    for (; x0 <= x1; x0++)
 8003f54:	e043      	b.n	8003fde <ILI9341_DrawLine+0x1c6>
    {
        if (steep)
 8003f56:	2314      	movs	r3, #20
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	5e9b      	ldrsh	r3, [r3, r2]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <ILI9341_DrawLine+0x160>
        {
            ILI9341_DrawPixel(y0, x0, color); // Draw pixel for steep lines
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	8818      	ldrh	r0, [r3, #0]
 8003f66:	1dbb      	adds	r3, r7, #6
 8003f68:	8819      	ldrh	r1, [r3, #0]
 8003f6a:	2328      	movs	r3, #40	@ 0x28
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	001a      	movs	r2, r3
 8003f72:	f7ff fecf 	bl	8003d14 <ILI9341_DrawPixel>
 8003f76:	e009      	b.n	8003f8c <ILI9341_DrawLine+0x174>
        }
        else
        {
            ILI9341_DrawPixel(x0, y0, color); // Draw pixel for regular lines
 8003f78:	1dbb      	adds	r3, r7, #6
 8003f7a:	8818      	ldrh	r0, [r3, #0]
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	8819      	ldrh	r1, [r3, #0]
 8003f80:	2328      	movs	r3, #40	@ 0x28
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	001a      	movs	r2, r3
 8003f88:	f7ff fec4 	bl	8003d14 <ILI9341_DrawPixel>
        }
        err -= dy;
 8003f8c:	2116      	movs	r1, #22
 8003f8e:	187b      	adds	r3, r7, r1
 8003f90:	881a      	ldrh	r2, [r3, #0]
 8003f92:	230c      	movs	r3, #12
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	801a      	strh	r2, [r3, #0]
        if (err < 0)
 8003fa0:	187b      	adds	r3, r7, r1
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	5e9b      	ldrsh	r3, [r3, r2]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	da11      	bge.n	8003fce <ILI9341_DrawLine+0x1b6>
        {
            y0 += ystep;
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	881a      	ldrh	r2, [r3, #0]
 8003fae:	230a      	movs	r3, #10
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	18d3      	adds	r3, r2, r3
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	801a      	strh	r2, [r3, #0]
            err += dx;
 8003fbc:	187b      	adds	r3, r7, r1
 8003fbe:	881a      	ldrh	r2, [r3, #0]
 8003fc0:	230e      	movs	r3, #14
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	18d3      	adds	r3, r2, r3
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	187b      	adds	r3, r7, r1
 8003fcc:	801a      	strh	r2, [r3, #0]
    for (; x0 <= x1; x0++)
 8003fce:	1dbb      	adds	r3, r7, #6
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	5e9b      	ldrsh	r3, [r3, r2]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	1dbb      	adds	r3, r7, #6
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	1dba      	adds	r2, r7, #6
 8003fe0:	1cbb      	adds	r3, r7, #2
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5e52      	ldrsh	r2, [r2, r1]
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	5e5b      	ldrsh	r3, [r3, r1]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	ddb3      	ble.n	8003f56 <ILI9341_DrawLine+0x13e>
        }
    }
}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	46c0      	nop			@ (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b006      	add	sp, #24
 8003ff6:	bdb0      	pop	{r4, r5, r7, pc}

08003ff8 <ILI9341_DrawRectangle>:
void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8003ff8:	b5b0      	push	{r4, r5, r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	0005      	movs	r5, r0
 8004000:	000c      	movs	r4, r1
 8004002:	0010      	movs	r0, r2
 8004004:	0019      	movs	r1, r3
 8004006:	1dbb      	adds	r3, r7, #6
 8004008:	1c2a      	adds	r2, r5, #0
 800400a:	801a      	strh	r2, [r3, #0]
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	1c22      	adds	r2, r4, #0
 8004010:	801a      	strh	r2, [r3, #0]
 8004012:	1cbb      	adds	r3, r7, #2
 8004014:	1c02      	adds	r2, r0, #0
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	003b      	movs	r3, r7
 800401a:	1c0a      	adds	r2, r1, #0
 800401c:	801a      	strh	r2, [r3, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800401e:	4b2e      	ldr	r3, [pc, #184]	@ (80040d8 <ILI9341_DrawRectangle+0xe0>)
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	1dba      	adds	r2, r7, #6
 8004026:	8812      	ldrh	r2, [r2, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d250      	bcs.n	80040ce <ILI9341_DrawRectangle+0xd6>
 800402c:	4b2b      	ldr	r3, [pc, #172]	@ (80040dc <ILI9341_DrawRectangle+0xe4>)
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	1d3a      	adds	r2, r7, #4
 8004034:	8812      	ldrh	r2, [r2, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d249      	bcs.n	80040ce <ILI9341_DrawRectangle+0xd6>

	if((x+width-1)>=LCD_WIDTH)
 800403a:	1dbb      	adds	r3, r7, #6
 800403c:	881a      	ldrh	r2, [r3, #0]
 800403e:	1cbb      	adds	r3, r7, #2
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	18d3      	adds	r3, r2, r3
 8004044:	4a24      	ldr	r2, [pc, #144]	@ (80040d8 <ILI9341_DrawRectangle+0xe0>)
 8004046:	8812      	ldrh	r2, [r2, #0]
 8004048:	b292      	uxth	r2, r2
 800404a:	4293      	cmp	r3, r2
 800404c:	dd07      	ble.n	800405e <ILI9341_DrawRectangle+0x66>
	{
		width=LCD_WIDTH-x;
 800404e:	4b22      	ldr	r3, [pc, #136]	@ (80040d8 <ILI9341_DrawRectangle+0xe0>)
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b299      	uxth	r1, r3
 8004054:	1cbb      	adds	r3, r7, #2
 8004056:	1dba      	adds	r2, r7, #6
 8004058:	8812      	ldrh	r2, [r2, #0]
 800405a:	1a8a      	subs	r2, r1, r2
 800405c:	801a      	strh	r2, [r3, #0]
	}

	if((y+height-1)>=LCD_HEIGHT)
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	881a      	ldrh	r2, [r3, #0]
 8004062:	003b      	movs	r3, r7
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	18d3      	adds	r3, r2, r3
 8004068:	4a1c      	ldr	r2, [pc, #112]	@ (80040dc <ILI9341_DrawRectangle+0xe4>)
 800406a:	8812      	ldrh	r2, [r2, #0]
 800406c:	b292      	uxth	r2, r2
 800406e:	4293      	cmp	r3, r2
 8004070:	dd07      	ble.n	8004082 <ILI9341_DrawRectangle+0x8a>
	{
		height=LCD_HEIGHT-y;
 8004072:	4b1a      	ldr	r3, [pc, #104]	@ (80040dc <ILI9341_DrawRectangle+0xe4>)
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b299      	uxth	r1, r3
 8004078:	003b      	movs	r3, r7
 800407a:	1d3a      	adds	r2, r7, #4
 800407c:	8812      	ldrh	r2, [r2, #0]
 800407e:	1a8a      	subs	r2, r1, r2
 8004080:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8004082:	1dba      	adds	r2, r7, #6
 8004084:	1cbb      	adds	r3, r7, #2
 8004086:	8812      	ldrh	r2, [r2, #0]
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	18d3      	adds	r3, r2, r3
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29c      	uxth	r4, r3
 8004092:	1d3a      	adds	r2, r7, #4
 8004094:	003b      	movs	r3, r7
 8004096:	8812      	ldrh	r2, [r2, #0]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	18d3      	adds	r3, r2, r3
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	8819      	ldrh	r1, [r3, #0]
 80040a6:	1dbb      	adds	r3, r7, #6
 80040a8:	8818      	ldrh	r0, [r3, #0]
 80040aa:	0013      	movs	r3, r2
 80040ac:	0022      	movs	r2, r4
 80040ae:	f7ff fb95 	bl	80037dc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 80040b2:	003b      	movs	r3, r7
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	1cba      	adds	r2, r7, #2
 80040b8:	8812      	ldrh	r2, [r2, #0]
 80040ba:	4353      	muls	r3, r2
 80040bc:	001a      	movs	r2, r3
 80040be:	2318      	movs	r3, #24
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	0011      	movs	r1, r2
 80040c6:	0018      	movs	r0, r3
 80040c8:	f7ff fd74 	bl	8003bb4 <ILI9341_DrawColorBurst>
 80040cc:	e000      	b.n	80040d0 <ILI9341_DrawRectangle+0xd8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80040ce:	46c0      	nop			@ (mov r8, r8)
}
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b002      	add	sp, #8
 80040d4:	bdb0      	pop	{r4, r5, r7, pc}
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	20000002 	.word	0x20000002
 80040dc:	20000000 	.word	0x20000000

080040e0 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 80040e0:	b5b0      	push	{r4, r5, r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	0005      	movs	r5, r0
 80040e8:	000c      	movs	r4, r1
 80040ea:	0010      	movs	r0, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	1dbb      	adds	r3, r7, #6
 80040f0:	1c2a      	adds	r2, r5, #0
 80040f2:	801a      	strh	r2, [r3, #0]
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	1c22      	adds	r2, r4, #0
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	1cbb      	adds	r3, r7, #2
 80040fc:	1c02      	adds	r2, r0, #0
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	003b      	movs	r3, r7
 8004102:	1c0a      	adds	r2, r1, #0
 8004104:	801a      	strh	r2, [r3, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8004106:	4b1f      	ldr	r3, [pc, #124]	@ (8004184 <ILI9341_DrawHLine+0xa4>)
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	1dba      	adds	r2, r7, #6
 800410e:	8812      	ldrh	r2, [r2, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d232      	bcs.n	800417a <ILI9341_DrawHLine+0x9a>
 8004114:	4b1c      	ldr	r3, [pc, #112]	@ (8004188 <ILI9341_DrawHLine+0xa8>)
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29b      	uxth	r3, r3
 800411a:	1d3a      	adds	r2, r7, #4
 800411c:	8812      	ldrh	r2, [r2, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d22b      	bcs.n	800417a <ILI9341_DrawHLine+0x9a>

	if((x+width-1)>=LCD_WIDTH)
 8004122:	1dbb      	adds	r3, r7, #6
 8004124:	881a      	ldrh	r2, [r3, #0]
 8004126:	1cbb      	adds	r3, r7, #2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	18d3      	adds	r3, r2, r3
 800412c:	4a15      	ldr	r2, [pc, #84]	@ (8004184 <ILI9341_DrawHLine+0xa4>)
 800412e:	8812      	ldrh	r2, [r2, #0]
 8004130:	b292      	uxth	r2, r2
 8004132:	4293      	cmp	r3, r2
 8004134:	dd07      	ble.n	8004146 <ILI9341_DrawHLine+0x66>
	{
		width=LCD_WIDTH-x;
 8004136:	4b13      	ldr	r3, [pc, #76]	@ (8004184 <ILI9341_DrawHLine+0xa4>)
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b299      	uxth	r1, r3
 800413c:	1cbb      	adds	r3, r7, #2
 800413e:	1dba      	adds	r2, r7, #6
 8004140:	8812      	ldrh	r2, [r2, #0]
 8004142:	1a8a      	subs	r2, r1, r2
 8004144:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8004146:	1dba      	adds	r2, r7, #6
 8004148:	1cbb      	adds	r3, r7, #2
 800414a:	8812      	ldrh	r2, [r2, #0]
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	18d3      	adds	r3, r2, r3
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	881c      	ldrh	r4, [r3, #0]
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	8819      	ldrh	r1, [r3, #0]
 800415e:	1dbb      	adds	r3, r7, #6
 8004160:	8818      	ldrh	r0, [r3, #0]
 8004162:	0023      	movs	r3, r4
 8004164:	f7ff fb3a 	bl	80037dc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8004168:	1cbb      	adds	r3, r7, #2
 800416a:	881a      	ldrh	r2, [r3, #0]
 800416c:	003b      	movs	r3, r7
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	0011      	movs	r1, r2
 8004172:	0018      	movs	r0, r3
 8004174:	f7ff fd1e 	bl	8003bb4 <ILI9341_DrawColorBurst>
 8004178:	e000      	b.n	800417c <ILI9341_DrawHLine+0x9c>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800417a:	46c0      	nop			@ (mov r8, r8)
}
 800417c:	46bd      	mov	sp, r7
 800417e:	b002      	add	sp, #8
 8004180:	bdb0      	pop	{r4, r5, r7, pc}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	20000002 	.word	0x20000002
 8004188:	20000000 	.word	0x20000000

0800418c <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 800418c:	b5b0      	push	{r4, r5, r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	0005      	movs	r5, r0
 8004194:	000c      	movs	r4, r1
 8004196:	0010      	movs	r0, r2
 8004198:	0019      	movs	r1, r3
 800419a:	1dbb      	adds	r3, r7, #6
 800419c:	1c2a      	adds	r2, r5, #0
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	1c22      	adds	r2, r4, #0
 80041a4:	801a      	strh	r2, [r3, #0]
 80041a6:	1cbb      	adds	r3, r7, #2
 80041a8:	1c02      	adds	r2, r0, #0
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	003b      	movs	r3, r7
 80041ae:	1c0a      	adds	r2, r1, #0
 80041b0:	801a      	strh	r2, [r3, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80041b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004230 <ILI9341_DrawVLine+0xa4>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	1dba      	adds	r2, r7, #6
 80041ba:	8812      	ldrh	r2, [r2, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d232      	bcs.n	8004226 <ILI9341_DrawVLine+0x9a>
 80041c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004234 <ILI9341_DrawVLine+0xa8>)
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	1d3a      	adds	r2, r7, #4
 80041c8:	8812      	ldrh	r2, [r2, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d22b      	bcs.n	8004226 <ILI9341_DrawVLine+0x9a>

	if((y+height-1)>=LCD_HEIGHT)
 80041ce:	1d3b      	adds	r3, r7, #4
 80041d0:	881a      	ldrh	r2, [r3, #0]
 80041d2:	1cbb      	adds	r3, r7, #2
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	18d3      	adds	r3, r2, r3
 80041d8:	4a16      	ldr	r2, [pc, #88]	@ (8004234 <ILI9341_DrawVLine+0xa8>)
 80041da:	8812      	ldrh	r2, [r2, #0]
 80041dc:	b292      	uxth	r2, r2
 80041de:	4293      	cmp	r3, r2
 80041e0:	dd07      	ble.n	80041f2 <ILI9341_DrawVLine+0x66>
	{
		height=LCD_HEIGHT-y;
 80041e2:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <ILI9341_DrawVLine+0xa8>)
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b299      	uxth	r1, r3
 80041e8:	1cbb      	adds	r3, r7, #2
 80041ea:	1d3a      	adds	r2, r7, #4
 80041ec:	8812      	ldrh	r2, [r2, #0]
 80041ee:	1a8a      	subs	r2, r1, r2
 80041f0:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 80041f2:	1d3a      	adds	r2, r7, #4
 80041f4:	1cbb      	adds	r3, r7, #2
 80041f6:	8812      	ldrh	r2, [r2, #0]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	18d3      	adds	r3, r2, r3
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29c      	uxth	r4, r3
 8004202:	1dbb      	adds	r3, r7, #6
 8004204:	881a      	ldrh	r2, [r3, #0]
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	8819      	ldrh	r1, [r3, #0]
 800420a:	1dbb      	adds	r3, r7, #6
 800420c:	8818      	ldrh	r0, [r3, #0]
 800420e:	0023      	movs	r3, r4
 8004210:	f7ff fae4 	bl	80037dc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8004214:	1cbb      	adds	r3, r7, #2
 8004216:	881a      	ldrh	r2, [r3, #0]
 8004218:	003b      	movs	r3, r7
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	0011      	movs	r1, r2
 800421e:	0018      	movs	r0, r3
 8004220:	f7ff fcc8 	bl	8003bb4 <ILI9341_DrawColorBurst>
 8004224:	e000      	b.n	8004228 <ILI9341_DrawVLine+0x9c>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8004226:	46c0      	nop			@ (mov r8, r8)
}
 8004228:	46bd      	mov	sp, r7
 800422a:	b002      	add	sp, #8
 800422c:	bdb0      	pop	{r4, r5, r7, pc}
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	20000002 	.word	0x20000002
 8004234:	20000000 	.word	0x20000000

08004238 <DSO_Init>:
float measuredFreq, sigPer;   // Time measurements

float offsetVoltage = 1.1; // Reference voltage of the the analog frontend

void DSO_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
	ILI9341_Init();
 800423c:	f7ff fb60 	bl	8003900 <ILI9341_Init>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8004240:	2003      	movs	r0, #3
 8004242:	f7ff fc69 	bl	8003b18 <ILI9341_SetRotation>
    createFramebuf(); // Create the framebuffer for the LCD
 8004246:	f7ff fa05 	bl	8003654 <createFramebuf>
    clearDisplay();
 800424a:	f7ff f84f 	bl	80032ec <clearDisplay>
    // Set the sampling rate
    sampRate = (16000 * 1000) / tdiv;
 800424e:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <DSO_Init+0x58>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	1c19      	adds	r1, r3, #0
 8004254:	480f      	ldr	r0, [pc, #60]	@ (8004294 <DSO_Init+0x5c>)
 8004256:	f7fc fb6f 	bl	8000938 <__aeabi_fdiv>
 800425a:	1c03      	adds	r3, r0, #0
 800425c:	1c18      	adds	r0, r3, #0
 800425e:	f7fc f95b 	bl	8000518 <__aeabi_f2uiz>
 8004262:	0002      	movs	r2, r0
 8004264:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <DSO_Init+0x60>)
 8004266:	601a      	str	r2, [r3, #0]
    sampPer = tdiv / 16.0;
 8004268:	4b09      	ldr	r3, [pc, #36]	@ (8004290 <DSO_Init+0x58>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2183      	movs	r1, #131	@ 0x83
 800426e:	05c9      	lsls	r1, r1, #23
 8004270:	1c18      	adds	r0, r3, #0
 8004272:	f7fc fb61 	bl	8000938 <__aeabi_fdiv>
 8004276:	1c03      	adds	r3, r0, #0
 8004278:	1c1a      	adds	r2, r3, #0
 800427a:	4b08      	ldr	r3, [pc, #32]	@ (800429c <DSO_Init+0x64>)
 800427c:	601a      	str	r2, [r3, #0]
    SetTimerFreq(sampRate);
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <DSO_Init+0x60>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	0018      	movs	r0, r3
 8004284:	f000 f854 	bl	8004330 <SetTimerFreq>
}
 8004288:	46c0      	nop			@ (mov r8, r8)
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	46c0      	nop			@ (mov r8, r8)
 8004290:	20000010 	.word	0x20000010
 8004294:	4b742400 	.word	0x4b742400
 8004298:	200005d8 	.word	0x200005d8
 800429c:	200005dc 	.word	0x200005dc

080042a0 <Sample>:

// This function acquires one buffer worth of data
void Sample()
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim3);
 80042a4:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <Sample+0x3c>)
 80042a6:	0018      	movs	r0, r3
 80042a8:	f003 ff9e 	bl	80081e8 <HAL_TIM_Base_Start>
    HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcBuf, BUFFER_LEN);
 80042ac:	23f0      	movs	r3, #240	@ 0xf0
 80042ae:	005a      	lsls	r2, r3, #1
 80042b0:	490b      	ldr	r1, [pc, #44]	@ (80042e0 <Sample+0x40>)
 80042b2:	4b0c      	ldr	r3, [pc, #48]	@ (80042e4 <Sample+0x44>)
 80042b4:	0018      	movs	r0, r3
 80042b6:	f001 fe45 	bl	8005f44 <HAL_ADC_Start_DMA>
    while (!finishedConversion)
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	4b0a      	ldr	r3, [pc, #40]	@ (80042e8 <Sample+0x48>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0fa      	beq.n	80042bc <Sample+0x1c>
        ;
    HAL_TIM_Base_Stop(&htim3);
 80042c6:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <Sample+0x3c>)
 80042c8:	0018      	movs	r0, r3
 80042ca:	f003 ffd7 	bl	800827c <HAL_TIM_Base_Stop>
    finishedConversion = 0;
 80042ce:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <Sample+0x48>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
}
 80042d4:	46c0      	nop			@ (mov r8, r8)
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	2000071c 	.word	0x2000071c
 80042e0:	2000020c 	.word	0x2000020c
 80042e4:	200005f0 	.word	0x200005f0
 80042e8:	200005cc 	.word	0x200005cc

080042ec <DSO_Loop>:

// This is the main loop of the app
void DSO_Loop()
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
	while(1)
	{
	    // Acquire one buffer
	    Sample();
 80042f0:	f7ff ffd6 	bl	80042a0 <Sample>

	    // Find the trigger point
	    findTrigger(adcBuf);
 80042f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <DSO_Loop+0x3c>)
 80042f6:	0018      	movs	r0, r3
 80042f8:	f001 f9d2 	bl	80056a0 <findTrigger>
	    if (trigged)
 80042fc:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <DSO_Loop+0x40>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d006      	beq.n	8004312 <DSO_Loop+0x26>
	        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1); // light the on-board LED up if triggered
 8004304:	2390      	movs	r3, #144	@ 0x90
 8004306:	05db      	lsls	r3, r3, #23
 8004308:	2201      	movs	r2, #1
 800430a:	2120      	movs	r1, #32
 800430c:	0018      	movs	r0, r3
 800430e:	f002 fcea 	bl	8006ce6 <HAL_GPIO_WritePin>

	    // Run the UI
	    ui();
 8004312:	f000 fcf4 	bl	8004cfe <ui>
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8004316:	2390      	movs	r3, #144	@ 0x90
 8004318:	05db      	lsls	r3, r3, #23
 800431a:	2200      	movs	r2, #0
 800431c:	2120      	movs	r1, #32
 800431e:	0018      	movs	r0, r3
 8004320:	f002 fce1 	bl	8006ce6 <HAL_GPIO_WritePin>
	    Sample();
 8004324:	e7e4      	b.n	80042f0 <DSO_Loop+0x4>
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	2000020c 	.word	0x2000020c
 800432c:	200005cd 	.word	0x200005cd

08004330 <SetTimerFreq>:
	}

}
// This sets the sampling rate
void SetTimerFreq(uint32_t freq)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
    uint16_t arr = (SYSCLK_FREQ / ((CLOCKTIM_PRESC + 1) * freq)) - 1;
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4809      	ldr	r0, [pc, #36]	@ (8004360 <SetTimerFreq+0x30>)
 800433c:	f7fb fefe 	bl	800013c <__udivsi3>
 8004340:	0003      	movs	r3, r0
 8004342:	b29a      	uxth	r2, r3
 8004344:	210e      	movs	r1, #14
 8004346:	187b      	adds	r3, r7, r1
 8004348:	3a01      	subs	r2, #1
 800434a:	801a      	strh	r2, [r3, #0]
    htim3.Instance->ARR = arr;
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <SetTimerFreq+0x34>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	187a      	adds	r2, r7, r1
 8004352:	8812      	ldrh	r2, [r2, #0]
 8004354:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b004      	add	sp, #16
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	02dc6c00 	.word	0x02dc6c00
 8004364:	2000071c 	.word	0x2000071c

08004368 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
    finishedConversion = 1;
 8004370:	4b03      	ldr	r3, [pc, #12]	@ (8004380 <HAL_ADC_ConvCpltCallback+0x18>)
 8004372:	2201      	movs	r2, #1
 8004374:	701a      	strb	r2, [r3, #0]
}
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	46bd      	mov	sp, r7
 800437a:	b002      	add	sp, #8
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	200005cc 	.word	0x200005cc

08004384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004388:	f001 fc14 	bl	8005bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800438c:	f000 f80f 	bl	80043ae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004390:	f000 f970 	bl	8004674 <MX_GPIO_Init>
  MX_DMA_Init();
 8004394:	f000 f948 	bl	8004628 <MX_DMA_Init>
  MX_SPI1_Init();
 8004398:	f000 f8b2 	bl	8004500 <MX_SPI1_Init>
  MX_ADC_Init();
 800439c:	f000 f854 	bl	8004448 <MX_ADC_Init>
  MX_TIM3_Init();
 80043a0:	f000 f8ec 	bl	800457c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  DSO_Init();
 80043a4:	f7ff ff48 	bl	8004238 <DSO_Init>
//  autoCal();
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DSO_Loop();
 80043a8:	f7ff ffa0 	bl	80042ec <DSO_Loop>
 80043ac:	e7fc      	b.n	80043a8 <main+0x24>

080043ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043ae:	b590      	push	{r4, r7, lr}
 80043b0:	b093      	sub	sp, #76	@ 0x4c
 80043b2:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043b4:	2414      	movs	r4, #20
 80043b6:	193b      	adds	r3, r7, r4
 80043b8:	0018      	movs	r0, r3
 80043ba:	2334      	movs	r3, #52	@ 0x34
 80043bc:	001a      	movs	r2, r3
 80043be:	2100      	movs	r1, #0
 80043c0:	f005 fa38 	bl	8009834 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	0018      	movs	r0, r3
 80043c8:	2310      	movs	r3, #16
 80043ca:	001a      	movs	r2, r3
 80043cc:	2100      	movs	r1, #0
 80043ce:	f005 fa31 	bl	8009834 <memset>

    /** Configure the main internal regulator output voltage */
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80043d2:	193b      	adds	r3, r7, r4
 80043d4:	0018      	movs	r0, r3
 80043d6:	f002 fcbf 	bl	8006d58 <HAL_RCC_OscConfig>

    /** Initializes the RCC Oscillators according to the specified parameters */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;  // Enable HSE
 80043da:	0021      	movs	r1, r4
 80043dc:	187b      	adds	r3, r7, r1
 80043de:	2201      	movs	r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;                   // Turn on HSE
 80043e2:	187b      	adds	r3, r7, r1
 80043e4:	2201      	movs	r2, #1
 80043e6:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043e8:	187b      	adds	r3, r7, r1
 80043ea:	2202      	movs	r2, #2
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;       // Use HSE as PLL source
 80043ee:	187b      	adds	r3, r7, r1
 80043f0:	2280      	movs	r2, #128	@ 0x80
 80043f2:	0252      	lsls	r2, r2, #9
 80043f4:	629a      	str	r2, [r3, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;            // No pre-divider
 80043f6:	187b      	adds	r3, r7, r1
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;               // 8 MHz x 6 = 48 MHz
 80043fc:	187b      	adds	r3, r7, r1
 80043fe:	2280      	movs	r2, #128	@ 0x80
 8004400:	0352      	lsls	r2, r2, #13
 8004402:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004404:	187b      	adds	r3, r7, r1
 8004406:	0018      	movs	r0, r3
 8004408:	f002 fca6 	bl	8006d58 <HAL_RCC_OscConfig>
 800440c:	1e03      	subs	r3, r0, #0
 800440e:	d001      	beq.n	8004414 <SystemClock_Config+0x66>
    {
        Error_Handler();
 8004410:	f000 f9ee 	bl	80047f0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	2207      	movs	r2, #7
 8004418:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  // Use PLL output as SYSCLK
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	2202      	movs	r2, #2
 800441e:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;         // AHB = SYSCLK
 8004420:	1d3b      	adds	r3, r7, #4
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;          // APB1 = HCLK
 8004426:	1d3b      	adds	r3, r7, #4
 8004428:	2200      	movs	r2, #0
 800442a:	60da      	str	r2, [r3, #12]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	2101      	movs	r1, #1
 8004430:	0018      	movs	r0, r3
 8004432:	f003 f817 	bl	8007464 <HAL_RCC_ClockConfig>
 8004436:	1e03      	subs	r3, r0, #0
 8004438:	d001      	beq.n	800443e <SystemClock_Config+0x90>
    {
        Error_Handler();
 800443a:	f000 f9d9 	bl	80047f0 <Error_Handler>
    }
}
 800443e:	46c0      	nop			@ (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b013      	add	sp, #76	@ 0x4c
 8004444:	bd90      	pop	{r4, r7, pc}
	...

08004448 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	0018      	movs	r0, r3
 8004452:	230c      	movs	r3, #12
 8004454:	001a      	movs	r2, r3
 8004456:	2100      	movs	r1, #0
 8004458:	f005 f9ec 	bl	8009834 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800445c:	4b26      	ldr	r3, [pc, #152]	@ (80044f8 <MX_ADC_Init+0xb0>)
 800445e:	4a27      	ldr	r2, [pc, #156]	@ (80044fc <MX_ADC_Init+0xb4>)
 8004460:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004462:	4b25      	ldr	r3, [pc, #148]	@ (80044f8 <MX_ADC_Init+0xb0>)
 8004464:	2200      	movs	r2, #0
 8004466:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004468:	4b23      	ldr	r3, [pc, #140]	@ (80044f8 <MX_ADC_Init+0xb0>)
 800446a:	2200      	movs	r2, #0
 800446c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800446e:	4b22      	ldr	r3, [pc, #136]	@ (80044f8 <MX_ADC_Init+0xb0>)
 8004470:	2200      	movs	r2, #0
 8004472:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004474:	4b20      	ldr	r3, [pc, #128]	@ (80044f8 <MX_ADC_Init+0xb0>)
 8004476:	2201      	movs	r2, #1
 8004478:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800447a:	4b1f      	ldr	r3, [pc, #124]	@ (80044f8 <MX_ADC_Init+0xb0>)
 800447c:	2204      	movs	r2, #4
 800447e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004480:	4b1d      	ldr	r3, [pc, #116]	@ (80044f8 <MX_ADC_Init+0xb0>)
 8004482:	2200      	movs	r2, #0
 8004484:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004486:	4b1c      	ldr	r3, [pc, #112]	@ (80044f8 <MX_ADC_Init+0xb0>)
 8004488:	2200      	movs	r2, #0
 800448a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800448c:	4b1a      	ldr	r3, [pc, #104]	@ (80044f8 <MX_ADC_Init+0xb0>)
 800448e:	2200      	movs	r2, #0
 8004490:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004492:	4b19      	ldr	r3, [pc, #100]	@ (80044f8 <MX_ADC_Init+0xb0>)
 8004494:	2200      	movs	r2, #0
 8004496:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8004498:	4b17      	ldr	r3, [pc, #92]	@ (80044f8 <MX_ADC_Init+0xb0>)
 800449a:	22c0      	movs	r2, #192	@ 0xc0
 800449c:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800449e:	4b16      	ldr	r3, [pc, #88]	@ (80044f8 <MX_ADC_Init+0xb0>)
 80044a0:	2280      	movs	r2, #128	@ 0x80
 80044a2:	00d2      	lsls	r2, r2, #3
 80044a4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80044a6:	4b14      	ldr	r3, [pc, #80]	@ (80044f8 <MX_ADC_Init+0xb0>)
 80044a8:	2224      	movs	r2, #36	@ 0x24
 80044aa:	2100      	movs	r1, #0
 80044ac:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80044ae:	4b12      	ldr	r3, [pc, #72]	@ (80044f8 <MX_ADC_Init+0xb0>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80044b4:	4b10      	ldr	r3, [pc, #64]	@ (80044f8 <MX_ADC_Init+0xb0>)
 80044b6:	0018      	movs	r0, r3
 80044b8:	f001 fc04 	bl	8005cc4 <HAL_ADC_Init>
 80044bc:	1e03      	subs	r3, r0, #0
 80044be:	d001      	beq.n	80044c4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80044c0:	f000 f996 	bl	80047f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80044ca:	1d3b      	adds	r3, r7, #4
 80044cc:	2280      	movs	r2, #128	@ 0x80
 80044ce:	0152      	lsls	r2, r2, #5
 80044d0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	2280      	movs	r2, #128	@ 0x80
 80044d6:	0552      	lsls	r2, r2, #21
 80044d8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044da:	1d3a      	adds	r2, r7, #4
 80044dc:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <MX_ADC_Init+0xb0>)
 80044de:	0011      	movs	r1, r2
 80044e0:	0018      	movs	r0, r3
 80044e2:	f001 fdc1 	bl	8006068 <HAL_ADC_ConfigChannel>
 80044e6:	1e03      	subs	r3, r0, #0
 80044e8:	d001      	beq.n	80044ee <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80044ea:	f000 f981 	bl	80047f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80044ee:	46c0      	nop			@ (mov r8, r8)
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b004      	add	sp, #16
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	200005f0 	.word	0x200005f0
 80044fc:	40012400 	.word	0x40012400

08004500 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004504:	4b1b      	ldr	r3, [pc, #108]	@ (8004574 <MX_SPI1_Init+0x74>)
 8004506:	4a1c      	ldr	r2, [pc, #112]	@ (8004578 <MX_SPI1_Init+0x78>)
 8004508:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800450a:	4b1a      	ldr	r3, [pc, #104]	@ (8004574 <MX_SPI1_Init+0x74>)
 800450c:	2282      	movs	r2, #130	@ 0x82
 800450e:	0052      	lsls	r2, r2, #1
 8004510:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004512:	4b18      	ldr	r3, [pc, #96]	@ (8004574 <MX_SPI1_Init+0x74>)
 8004514:	2200      	movs	r2, #0
 8004516:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004518:	4b16      	ldr	r3, [pc, #88]	@ (8004574 <MX_SPI1_Init+0x74>)
 800451a:	22e0      	movs	r2, #224	@ 0xe0
 800451c:	00d2      	lsls	r2, r2, #3
 800451e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004520:	4b14      	ldr	r3, [pc, #80]	@ (8004574 <MX_SPI1_Init+0x74>)
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004526:	4b13      	ldr	r3, [pc, #76]	@ (8004574 <MX_SPI1_Init+0x74>)
 8004528:	2200      	movs	r2, #0
 800452a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800452c:	4b11      	ldr	r3, [pc, #68]	@ (8004574 <MX_SPI1_Init+0x74>)
 800452e:	2280      	movs	r2, #128	@ 0x80
 8004530:	0092      	lsls	r2, r2, #2
 8004532:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004534:	4b0f      	ldr	r3, [pc, #60]	@ (8004574 <MX_SPI1_Init+0x74>)
 8004536:	2200      	movs	r2, #0
 8004538:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800453a:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <MX_SPI1_Init+0x74>)
 800453c:	2200      	movs	r2, #0
 800453e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004540:	4b0c      	ldr	r3, [pc, #48]	@ (8004574 <MX_SPI1_Init+0x74>)
 8004542:	2200      	movs	r2, #0
 8004544:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004546:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <MX_SPI1_Init+0x74>)
 8004548:	2200      	movs	r2, #0
 800454a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800454c:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <MX_SPI1_Init+0x74>)
 800454e:	2207      	movs	r2, #7
 8004550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004552:	4b08      	ldr	r3, [pc, #32]	@ (8004574 <MX_SPI1_Init+0x74>)
 8004554:	2200      	movs	r2, #0
 8004556:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004558:	4b06      	ldr	r3, [pc, #24]	@ (8004574 <MX_SPI1_Init+0x74>)
 800455a:	2208      	movs	r2, #8
 800455c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800455e:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <MX_SPI1_Init+0x74>)
 8004560:	0018      	movs	r0, r3
 8004562:	f003 f8cb 	bl	80076fc <HAL_SPI_Init>
 8004566:	1e03      	subs	r3, r0, #0
 8004568:	d001      	beq.n	800456e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800456a:	f000 f941 	bl	80047f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20000674 	.word	0x20000674
 8004578:	40013000 	.word	0x40013000

0800457c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004582:	2308      	movs	r3, #8
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	0018      	movs	r0, r3
 8004588:	2310      	movs	r3, #16
 800458a:	001a      	movs	r2, r3
 800458c:	2100      	movs	r1, #0
 800458e:	f005 f951 	bl	8009834 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004592:	003b      	movs	r3, r7
 8004594:	0018      	movs	r0, r3
 8004596:	2308      	movs	r3, #8
 8004598:	001a      	movs	r2, r3
 800459a:	2100      	movs	r1, #0
 800459c:	f005 f94a 	bl	8009834 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045a0:	4b1e      	ldr	r3, [pc, #120]	@ (800461c <MX_TIM3_Init+0xa0>)
 80045a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004620 <MX_TIM3_Init+0xa4>)
 80045a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80045a6:	4b1d      	ldr	r3, [pc, #116]	@ (800461c <MX_TIM3_Init+0xa0>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ac:	4b1b      	ldr	r3, [pc, #108]	@ (800461c <MX_TIM3_Init+0xa0>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80045b2:	4b1a      	ldr	r3, [pc, #104]	@ (800461c <MX_TIM3_Init+0xa0>)
 80045b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004624 <MX_TIM3_Init+0xa8>)
 80045b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b8:	4b18      	ldr	r3, [pc, #96]	@ (800461c <MX_TIM3_Init+0xa0>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045be:	4b17      	ldr	r3, [pc, #92]	@ (800461c <MX_TIM3_Init+0xa0>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045c4:	4b15      	ldr	r3, [pc, #84]	@ (800461c <MX_TIM3_Init+0xa0>)
 80045c6:	0018      	movs	r0, r3
 80045c8:	f003 fdbe 	bl	8008148 <HAL_TIM_Base_Init>
 80045cc:	1e03      	subs	r3, r0, #0
 80045ce:	d001      	beq.n	80045d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80045d0:	f000 f90e 	bl	80047f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045d4:	2108      	movs	r1, #8
 80045d6:	187b      	adds	r3, r7, r1
 80045d8:	2280      	movs	r2, #128	@ 0x80
 80045da:	0152      	lsls	r2, r2, #5
 80045dc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80045de:	187a      	adds	r2, r7, r1
 80045e0:	4b0e      	ldr	r3, [pc, #56]	@ (800461c <MX_TIM3_Init+0xa0>)
 80045e2:	0011      	movs	r1, r2
 80045e4:	0018      	movs	r0, r3
 80045e6:	f003 fe6f 	bl	80082c8 <HAL_TIM_ConfigClockSource>
 80045ea:	1e03      	subs	r3, r0, #0
 80045ec:	d001      	beq.n	80045f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80045ee:	f000 f8ff 	bl	80047f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80045f2:	003b      	movs	r3, r7
 80045f4:	2220      	movs	r2, #32
 80045f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045f8:	003b      	movs	r3, r7
 80045fa:	2200      	movs	r2, #0
 80045fc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045fe:	003a      	movs	r2, r7
 8004600:	4b06      	ldr	r3, [pc, #24]	@ (800461c <MX_TIM3_Init+0xa0>)
 8004602:	0011      	movs	r1, r2
 8004604:	0018      	movs	r0, r3
 8004606:	f004 f85b 	bl	80086c0 <HAL_TIMEx_MasterConfigSynchronization>
 800460a:	1e03      	subs	r3, r0, #0
 800460c:	d001      	beq.n	8004612 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800460e:	f000 f8ef 	bl	80047f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	46bd      	mov	sp, r7
 8004616:	b006      	add	sp, #24
 8004618:	bd80      	pop	{r7, pc}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	2000071c 	.word	0x2000071c
 8004620:	40000400 	.word	0x40000400
 8004624:	0000ffff 	.word	0x0000ffff

08004628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800462e:	4b10      	ldr	r3, [pc, #64]	@ (8004670 <MX_DMA_Init+0x48>)
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	4b0f      	ldr	r3, [pc, #60]	@ (8004670 <MX_DMA_Init+0x48>)
 8004634:	2101      	movs	r1, #1
 8004636:	430a      	orrs	r2, r1
 8004638:	615a      	str	r2, [r3, #20]
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <MX_DMA_Init+0x48>)
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2201      	movs	r2, #1
 8004640:	4013      	ands	r3, r2
 8004642:	607b      	str	r3, [r7, #4]
 8004644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8004646:	2200      	movs	r2, #0
 8004648:	2100      	movs	r1, #0
 800464a:	2009      	movs	r0, #9
 800464c:	f001 ffce 	bl	80065ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8004650:	2009      	movs	r0, #9
 8004652:	f001 ffe0 	bl	8006616 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 8004656:	2200      	movs	r2, #0
 8004658:	2100      	movs	r1, #0
 800465a:	200a      	movs	r0, #10
 800465c:	f001 ffc6 	bl	80065ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8004660:	200a      	movs	r0, #10
 8004662:	f001 ffd8 	bl	8006616 <HAL_NVIC_EnableIRQ>

}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	b002      	add	sp, #8
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	40021000 	.word	0x40021000

08004674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b08b      	sub	sp, #44	@ 0x2c
 8004678:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467a:	2414      	movs	r4, #20
 800467c:	193b      	adds	r3, r7, r4
 800467e:	0018      	movs	r0, r3
 8004680:	2314      	movs	r3, #20
 8004682:	001a      	movs	r2, r3
 8004684:	2100      	movs	r1, #0
 8004686:	f005 f8d5 	bl	8009834 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800468a:	4b56      	ldr	r3, [pc, #344]	@ (80047e4 <MX_GPIO_Init+0x170>)
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	4b55      	ldr	r3, [pc, #340]	@ (80047e4 <MX_GPIO_Init+0x170>)
 8004690:	2180      	movs	r1, #128	@ 0x80
 8004692:	0309      	lsls	r1, r1, #12
 8004694:	430a      	orrs	r2, r1
 8004696:	615a      	str	r2, [r3, #20]
 8004698:	4b52      	ldr	r3, [pc, #328]	@ (80047e4 <MX_GPIO_Init+0x170>)
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	031b      	lsls	r3, r3, #12
 80046a0:	4013      	ands	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80046a6:	4b4f      	ldr	r3, [pc, #316]	@ (80047e4 <MX_GPIO_Init+0x170>)
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	4b4e      	ldr	r3, [pc, #312]	@ (80047e4 <MX_GPIO_Init+0x170>)
 80046ac:	2180      	movs	r1, #128	@ 0x80
 80046ae:	03c9      	lsls	r1, r1, #15
 80046b0:	430a      	orrs	r2, r1
 80046b2:	615a      	str	r2, [r3, #20]
 80046b4:	4b4b      	ldr	r3, [pc, #300]	@ (80047e4 <MX_GPIO_Init+0x170>)
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	2380      	movs	r3, #128	@ 0x80
 80046ba:	03db      	lsls	r3, r3, #15
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c2:	4b48      	ldr	r3, [pc, #288]	@ (80047e4 <MX_GPIO_Init+0x170>)
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	4b47      	ldr	r3, [pc, #284]	@ (80047e4 <MX_GPIO_Init+0x170>)
 80046c8:	2180      	movs	r1, #128	@ 0x80
 80046ca:	0289      	lsls	r1, r1, #10
 80046cc:	430a      	orrs	r2, r1
 80046ce:	615a      	str	r2, [r3, #20]
 80046d0:	4b44      	ldr	r3, [pc, #272]	@ (80047e4 <MX_GPIO_Init+0x170>)
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	2380      	movs	r3, #128	@ 0x80
 80046d6:	029b      	lsls	r3, r3, #10
 80046d8:	4013      	ands	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046de:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <MX_GPIO_Init+0x170>)
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	4b40      	ldr	r3, [pc, #256]	@ (80047e4 <MX_GPIO_Init+0x170>)
 80046e4:	2180      	movs	r1, #128	@ 0x80
 80046e6:	02c9      	lsls	r1, r1, #11
 80046e8:	430a      	orrs	r2, r1
 80046ea:	615a      	str	r2, [r3, #20]
 80046ec:	4b3d      	ldr	r3, [pc, #244]	@ (80047e4 <MX_GPIO_Init+0x170>)
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	2380      	movs	r3, #128	@ 0x80
 80046f2:	02db      	lsls	r3, r3, #11
 80046f4:	4013      	ands	r3, r2
 80046f6:	607b      	str	r3, [r7, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80046fa:	2390      	movs	r3, #144	@ 0x90
 80046fc:	05db      	lsls	r3, r3, #23
 80046fe:	2200      	movs	r2, #0
 8004700:	2120      	movs	r1, #32
 8004702:	0018      	movs	r0, r3
 8004704:	f002 faef 	bl	8006ce6 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8004708:	4b37      	ldr	r3, [pc, #220]	@ (80047e8 <MX_GPIO_Init+0x174>)
 800470a:	2200      	movs	r2, #0
 800470c:	2107      	movs	r1, #7
 800470e:	0018      	movs	r0, r3
 8004710:	f002 fae9 	bl	8006ce6 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 8004714:	193b      	adds	r3, r7, r4
 8004716:	2280      	movs	r2, #128	@ 0x80
 8004718:	0192      	lsls	r2, r2, #6
 800471a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800471c:	193b      	adds	r3, r7, r4
 800471e:	2284      	movs	r2, #132	@ 0x84
 8004720:	0392      	lsls	r2, r2, #14
 8004722:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004724:	193b      	adds	r3, r7, r4
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800472a:	193b      	adds	r3, r7, r4
 800472c:	4a2f      	ldr	r2, [pc, #188]	@ (80047ec <MX_GPIO_Init+0x178>)
 800472e:	0019      	movs	r1, r3
 8004730:	0010      	movs	r0, r2
 8004732:	f002 f943 	bl	80069bc <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 8004736:	193b      	adds	r3, r7, r4
 8004738:	2220      	movs	r2, #32
 800473a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800473c:	193b      	adds	r3, r7, r4
 800473e:	2201      	movs	r2, #1
 8004740:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004742:	193b      	adds	r3, r7, r4
 8004744:	2200      	movs	r2, #0
 8004746:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004748:	193b      	adds	r3, r7, r4
 800474a:	2200      	movs	r2, #0
 800474c:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800474e:	193a      	adds	r2, r7, r4
 8004750:	2390      	movs	r3, #144	@ 0x90
 8004752:	05db      	lsls	r3, r3, #23
 8004754:	0011      	movs	r1, r2
 8004756:	0018      	movs	r0, r3
 8004758:	f002 f930 	bl	80069bc <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB0 PB1 PB2 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800475c:	193b      	adds	r3, r7, r4
 800475e:	2207      	movs	r2, #7
 8004760:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004762:	193b      	adds	r3, r7, r4
 8004764:	2201      	movs	r2, #1
 8004766:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004768:	193b      	adds	r3, r7, r4
 800476a:	2200      	movs	r2, #0
 800476c:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476e:	193b      	adds	r3, r7, r4
 8004770:	2200      	movs	r2, #0
 8004772:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004774:	193b      	adds	r3, r7, r4
 8004776:	4a1c      	ldr	r2, [pc, #112]	@ (80047e8 <MX_GPIO_Init+0x174>)
 8004778:	0019      	movs	r1, r3
 800477a:	0010      	movs	r0, r2
 800477c:	f002 f91e 	bl	80069bc <HAL_GPIO_Init>

	  /* Configure GPIO pin : PB13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004780:	0021      	movs	r1, r4
 8004782:	187b      	adds	r3, r7, r1
 8004784:	2280      	movs	r2, #128	@ 0x80
 8004786:	0192      	lsls	r2, r2, #6
 8004788:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Interrupt mode
 800478a:	187b      	adds	r3, r7, r1
 800478c:	2284      	movs	r2, #132	@ 0x84
 800478e:	0392      	lsls	r2, r2, #14
 8004790:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004792:	187b      	adds	r3, r7, r1
 8004794:	2201      	movs	r2, #1
 8004796:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004798:	000c      	movs	r4, r1
 800479a:	187b      	adds	r3, r7, r1
 800479c:	4a12      	ldr	r2, [pc, #72]	@ (80047e8 <MX_GPIO_Init+0x174>)
 800479e:	0019      	movs	r1, r3
 80047a0:	0010      	movs	r0, r2
 80047a2:	f002 f90b 	bl	80069bc <HAL_GPIO_Init>


	  /* Configure GPIO pins : PA11 PA12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80047a6:	0021      	movs	r1, r4
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	22c0      	movs	r2, #192	@ 0xc0
 80047ac:	0152      	lsls	r2, r2, #5
 80047ae:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Interrupt mode
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	2284      	movs	r2, #132	@ 0x84
 80047b4:	0392      	lsls	r2, r2, #14
 80047b6:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	2201      	movs	r2, #1
 80047bc:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047be:	187a      	adds	r2, r7, r1
 80047c0:	2390      	movs	r3, #144	@ 0x90
 80047c2:	05db      	lsls	r3, r3, #23
 80047c4:	0011      	movs	r1, r2
 80047c6:	0018      	movs	r0, r3
 80047c8:	f002 f8f8 	bl	80069bc <HAL_GPIO_Init>


	  /* Enable and set EXTI interrupt priority */
	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0); // Priority level 2
 80047cc:	2200      	movs	r2, #0
 80047ce:	2102      	movs	r1, #2
 80047d0:	2007      	movs	r0, #7
 80047d2:	f001 ff0b 	bl	80065ec <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80047d6:	2007      	movs	r0, #7
 80047d8:	f001 ff1d 	bl	8006616 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80047dc:	46c0      	nop			@ (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b00b      	add	sp, #44	@ 0x2c
 80047e2:	bd90      	pop	{r4, r7, pc}
 80047e4:	40021000 	.word	0x40021000
 80047e8:	48000400 	.word	0x48000400
 80047ec:	48000800 	.word	0x48000800

080047f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047f4:	b672      	cpsid	i
}
 80047f6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047f8:	46c0      	nop			@ (mov r8, r8)
 80047fa:	e7fd      	b.n	80047f8 <Error_Handler+0x8>

080047fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004802:	4b0f      	ldr	r3, [pc, #60]	@ (8004840 <HAL_MspInit+0x44>)
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <HAL_MspInit+0x44>)
 8004808:	2101      	movs	r1, #1
 800480a:	430a      	orrs	r2, r1
 800480c:	619a      	str	r2, [r3, #24]
 800480e:	4b0c      	ldr	r3, [pc, #48]	@ (8004840 <HAL_MspInit+0x44>)
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2201      	movs	r2, #1
 8004814:	4013      	ands	r3, r2
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800481a:	4b09      	ldr	r3, [pc, #36]	@ (8004840 <HAL_MspInit+0x44>)
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	4b08      	ldr	r3, [pc, #32]	@ (8004840 <HAL_MspInit+0x44>)
 8004820:	2180      	movs	r1, #128	@ 0x80
 8004822:	0549      	lsls	r1, r1, #21
 8004824:	430a      	orrs	r2, r1
 8004826:	61da      	str	r2, [r3, #28]
 8004828:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <HAL_MspInit+0x44>)
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	2380      	movs	r3, #128	@ 0x80
 800482e:	055b      	lsls	r3, r3, #21
 8004830:	4013      	ands	r3, r2
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b002      	add	sp, #8
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	40021000 	.word	0x40021000

08004844 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b08b      	sub	sp, #44	@ 0x2c
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	2414      	movs	r4, #20
 800484e:	193b      	adds	r3, r7, r4
 8004850:	0018      	movs	r0, r3
 8004852:	2314      	movs	r3, #20
 8004854:	001a      	movs	r2, r3
 8004856:	2100      	movs	r1, #0
 8004858:	f004 ffec 	bl	8009834 <memset>
  if(hadc->Instance==ADC1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a35      	ldr	r2, [pc, #212]	@ (8004938 <HAL_ADC_MspInit+0xf4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d163      	bne.n	800492e <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004866:	4b35      	ldr	r3, [pc, #212]	@ (800493c <HAL_ADC_MspInit+0xf8>)
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	4b34      	ldr	r3, [pc, #208]	@ (800493c <HAL_ADC_MspInit+0xf8>)
 800486c:	2180      	movs	r1, #128	@ 0x80
 800486e:	0089      	lsls	r1, r1, #2
 8004870:	430a      	orrs	r2, r1
 8004872:	619a      	str	r2, [r3, #24]
 8004874:	4b31      	ldr	r3, [pc, #196]	@ (800493c <HAL_ADC_MspInit+0xf8>)
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	2380      	movs	r3, #128	@ 0x80
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4013      	ands	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004882:	4b2e      	ldr	r3, [pc, #184]	@ (800493c <HAL_ADC_MspInit+0xf8>)
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	4b2d      	ldr	r3, [pc, #180]	@ (800493c <HAL_ADC_MspInit+0xf8>)
 8004888:	2180      	movs	r1, #128	@ 0x80
 800488a:	0289      	lsls	r1, r1, #10
 800488c:	430a      	orrs	r2, r1
 800488e:	615a      	str	r2, [r3, #20]
 8004890:	4b2a      	ldr	r3, [pc, #168]	@ (800493c <HAL_ADC_MspInit+0xf8>)
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	2380      	movs	r3, #128	@ 0x80
 8004896:	029b      	lsls	r3, r3, #10
 8004898:	4013      	ands	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	2201      	movs	r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048a4:	193b      	adds	r3, r7, r4
 80048a6:	2203      	movs	r2, #3
 80048a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048aa:	193b      	adds	r3, r7, r4
 80048ac:	2200      	movs	r2, #0
 80048ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b0:	193a      	adds	r2, r7, r4
 80048b2:	2390      	movs	r3, #144	@ 0x90
 80048b4:	05db      	lsls	r3, r3, #23
 80048b6:	0011      	movs	r1, r2
 80048b8:	0018      	movs	r0, r3
 80048ba:	f002 f87f 	bl	80069bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80048be:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <HAL_ADC_MspInit+0xfc>)
 80048c0:	4a20      	ldr	r2, [pc, #128]	@ (8004944 <HAL_ADC_MspInit+0x100>)
 80048c2:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004940 <HAL_ADC_MspInit+0xfc>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80048ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004940 <HAL_ADC_MspInit+0xfc>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80048d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004940 <HAL_ADC_MspInit+0xfc>)
 80048d2:	2280      	movs	r2, #128	@ 0x80
 80048d4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80048d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004940 <HAL_ADC_MspInit+0xfc>)
 80048d8:	2280      	movs	r2, #128	@ 0x80
 80048da:	0052      	lsls	r2, r2, #1
 80048dc:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80048de:	4b18      	ldr	r3, [pc, #96]	@ (8004940 <HAL_ADC_MspInit+0xfc>)
 80048e0:	2280      	movs	r2, #128	@ 0x80
 80048e2:	00d2      	lsls	r2, r2, #3
 80048e4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80048e6:	4b16      	ldr	r3, [pc, #88]	@ (8004940 <HAL_ADC_MspInit+0xfc>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80048ec:	4b14      	ldr	r3, [pc, #80]	@ (8004940 <HAL_ADC_MspInit+0xfc>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80048f2:	4b13      	ldr	r3, [pc, #76]	@ (8004940 <HAL_ADC_MspInit+0xfc>)
 80048f4:	0018      	movs	r0, r3
 80048f6:	f001 feab 	bl	8006650 <HAL_DMA_Init>
 80048fa:	1e03      	subs	r3, r0, #0
 80048fc:	d001      	beq.n	8004902 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80048fe:	f7ff ff77 	bl	80047f0 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8004902:	4a11      	ldr	r2, [pc, #68]	@ (8004948 <HAL_ADC_MspInit+0x104>)
 8004904:	23a8      	movs	r3, #168	@ 0xa8
 8004906:	58d3      	ldr	r3, [r2, r3]
 8004908:	490f      	ldr	r1, [pc, #60]	@ (8004948 <HAL_ADC_MspInit+0x104>)
 800490a:	220f      	movs	r2, #15
 800490c:	4393      	bics	r3, r2
 800490e:	22a8      	movs	r2, #168	@ 0xa8
 8004910:	508b      	str	r3, [r1, r2]
 8004912:	4a0d      	ldr	r2, [pc, #52]	@ (8004948 <HAL_ADC_MspInit+0x104>)
 8004914:	23a8      	movs	r3, #168	@ 0xa8
 8004916:	58d3      	ldr	r3, [r2, r3]
 8004918:	490b      	ldr	r1, [pc, #44]	@ (8004948 <HAL_ADC_MspInit+0x104>)
 800491a:	2201      	movs	r2, #1
 800491c:	4313      	orrs	r3, r2
 800491e:	22a8      	movs	r2, #168	@ 0xa8
 8004920:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a06      	ldr	r2, [pc, #24]	@ (8004940 <HAL_ADC_MspInit+0xfc>)
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30
 8004928:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <HAL_ADC_MspInit+0xfc>)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800492e:	46c0      	nop			@ (mov r8, r8)
 8004930:	46bd      	mov	sp, r7
 8004932:	b00b      	add	sp, #44	@ 0x2c
 8004934:	bd90      	pop	{r4, r7, pc}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	40012400 	.word	0x40012400
 800493c:	40021000 	.word	0x40021000
 8004940:	20000630 	.word	0x20000630
 8004944:	40020008 	.word	0x40020008
 8004948:	40020000 	.word	0x40020000

0800494c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b08b      	sub	sp, #44	@ 0x2c
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004954:	2414      	movs	r4, #20
 8004956:	193b      	adds	r3, r7, r4
 8004958:	0018      	movs	r0, r3
 800495a:	2314      	movs	r3, #20
 800495c:	001a      	movs	r2, r3
 800495e:	2100      	movs	r1, #0
 8004960:	f004 ff68 	bl	8009834 <memset>
  if(hspi->Instance==SPI1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a4a      	ldr	r2, [pc, #296]	@ (8004a94 <HAL_SPI_MspInit+0x148>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d000      	beq.n	8004970 <HAL_SPI_MspInit+0x24>
 800496e:	e08c      	b.n	8004a8a <HAL_SPI_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004970:	4b49      	ldr	r3, [pc, #292]	@ (8004a98 <HAL_SPI_MspInit+0x14c>)
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	4b48      	ldr	r3, [pc, #288]	@ (8004a98 <HAL_SPI_MspInit+0x14c>)
 8004976:	2180      	movs	r1, #128	@ 0x80
 8004978:	0149      	lsls	r1, r1, #5
 800497a:	430a      	orrs	r2, r1
 800497c:	619a      	str	r2, [r3, #24]
 800497e:	4b46      	ldr	r3, [pc, #280]	@ (8004a98 <HAL_SPI_MspInit+0x14c>)
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	2380      	movs	r3, #128	@ 0x80
 8004984:	015b      	lsls	r3, r3, #5
 8004986:	4013      	ands	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498c:	4b42      	ldr	r3, [pc, #264]	@ (8004a98 <HAL_SPI_MspInit+0x14c>)
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	4b41      	ldr	r3, [pc, #260]	@ (8004a98 <HAL_SPI_MspInit+0x14c>)
 8004992:	2180      	movs	r1, #128	@ 0x80
 8004994:	0289      	lsls	r1, r1, #10
 8004996:	430a      	orrs	r2, r1
 8004998:	615a      	str	r2, [r3, #20]
 800499a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a98 <HAL_SPI_MspInit+0x14c>)
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	2380      	movs	r3, #128	@ 0x80
 80049a0:	029b      	lsls	r3, r3, #10
 80049a2:	4013      	ands	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004a98 <HAL_SPI_MspInit+0x14c>)
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004a98 <HAL_SPI_MspInit+0x14c>)
 80049ae:	2180      	movs	r1, #128	@ 0x80
 80049b0:	02c9      	lsls	r1, r1, #11
 80049b2:	430a      	orrs	r2, r1
 80049b4:	615a      	str	r2, [r3, #20]
 80049b6:	4b38      	ldr	r3, [pc, #224]	@ (8004a98 <HAL_SPI_MspInit+0x14c>)
 80049b8:	695a      	ldr	r2, [r3, #20]
 80049ba:	2380      	movs	r3, #128	@ 0x80
 80049bc:	02db      	lsls	r3, r3, #11
 80049be:	4013      	ands	r3, r2
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80049c4:	193b      	adds	r3, r7, r4
 80049c6:	2280      	movs	r2, #128	@ 0x80
 80049c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ca:	193b      	adds	r3, r7, r4
 80049cc:	2202      	movs	r2, #2
 80049ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d0:	193b      	adds	r3, r7, r4
 80049d2:	2200      	movs	r2, #0
 80049d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049d6:	193b      	adds	r3, r7, r4
 80049d8:	2203      	movs	r2, #3
 80049da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80049dc:	193b      	adds	r3, r7, r4
 80049de:	2200      	movs	r2, #0
 80049e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e2:	193a      	adds	r2, r7, r4
 80049e4:	2390      	movs	r3, #144	@ 0x90
 80049e6:	05db      	lsls	r3, r3, #23
 80049e8:	0011      	movs	r1, r2
 80049ea:	0018      	movs	r0, r3
 80049ec:	f001 ffe6 	bl	80069bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80049f0:	0021      	movs	r1, r4
 80049f2:	187b      	adds	r3, r7, r1
 80049f4:	2208      	movs	r2, #8
 80049f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f8:	187b      	adds	r3, r7, r1
 80049fa:	2202      	movs	r2, #2
 80049fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	187b      	adds	r3, r7, r1
 8004a00:	2200      	movs	r2, #0
 8004a02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a04:	187b      	adds	r3, r7, r1
 8004a06:	2203      	movs	r2, #3
 8004a08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004a0a:	187b      	adds	r3, r7, r1
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	4a22      	ldr	r2, [pc, #136]	@ (8004a9c <HAL_SPI_MspInit+0x150>)
 8004a14:	0019      	movs	r1, r3
 8004a16:	0010      	movs	r0, r2
 8004a18:	f001 ffd0 	bl	80069bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004a1c:	4b20      	ldr	r3, [pc, #128]	@ (8004aa0 <HAL_SPI_MspInit+0x154>)
 8004a1e:	4a21      	ldr	r2, [pc, #132]	@ (8004aa4 <HAL_SPI_MspInit+0x158>)
 8004a20:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a22:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa0 <HAL_SPI_MspInit+0x154>)
 8004a24:	2210      	movs	r2, #16
 8004a26:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a28:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa0 <HAL_SPI_MspInit+0x154>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa0 <HAL_SPI_MspInit+0x154>)
 8004a30:	2280      	movs	r2, #128	@ 0x80
 8004a32:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a34:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa0 <HAL_SPI_MspInit+0x154>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a3a:	4b19      	ldr	r3, [pc, #100]	@ (8004aa0 <HAL_SPI_MspInit+0x154>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004a40:	4b17      	ldr	r3, [pc, #92]	@ (8004aa0 <HAL_SPI_MspInit+0x154>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a46:	4b16      	ldr	r3, [pc, #88]	@ (8004aa0 <HAL_SPI_MspInit+0x154>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004a4c:	4b14      	ldr	r3, [pc, #80]	@ (8004aa0 <HAL_SPI_MspInit+0x154>)
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f001 fdfe 	bl	8006650 <HAL_DMA_Init>
 8004a54:	1e03      	subs	r3, r0, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8004a58:	f7ff feca 	bl	80047f0 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_SPI1_TX);
 8004a5c:	4a12      	ldr	r2, [pc, #72]	@ (8004aa8 <HAL_SPI_MspInit+0x15c>)
 8004a5e:	23a8      	movs	r3, #168	@ 0xa8
 8004a60:	58d3      	ldr	r3, [r2, r3]
 8004a62:	4911      	ldr	r1, [pc, #68]	@ (8004aa8 <HAL_SPI_MspInit+0x15c>)
 8004a64:	4a11      	ldr	r2, [pc, #68]	@ (8004aac <HAL_SPI_MspInit+0x160>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	22a8      	movs	r2, #168	@ 0xa8
 8004a6a:	508b      	str	r3, [r1, r2]
 8004a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa8 <HAL_SPI_MspInit+0x15c>)
 8004a6e:	23a8      	movs	r3, #168	@ 0xa8
 8004a70:	58d3      	ldr	r3, [r2, r3]
 8004a72:	490d      	ldr	r1, [pc, #52]	@ (8004aa8 <HAL_SPI_MspInit+0x15c>)
 8004a74:	22c0      	movs	r2, #192	@ 0xc0
 8004a76:	0092      	lsls	r2, r2, #2
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	22a8      	movs	r2, #168	@ 0xa8
 8004a7c:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a07      	ldr	r2, [pc, #28]	@ (8004aa0 <HAL_SPI_MspInit+0x154>)
 8004a82:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a84:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <HAL_SPI_MspInit+0x154>)
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b00b      	add	sp, #44	@ 0x2c
 8004a90:	bd90      	pop	{r4, r7, pc}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	40013000 	.word	0x40013000
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	48000400 	.word	0x48000400
 8004aa0:	200006d8 	.word	0x200006d8
 8004aa4:	40020030 	.word	0x40020030
 8004aa8:	40020000 	.word	0x40020000
 8004aac:	fffff0ff 	.word	0xfffff0ff

08004ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a09      	ldr	r2, [pc, #36]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x34>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d10b      	bne.n	8004ada <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ac2:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <HAL_TIM_Base_MspInit+0x38>)
 8004ac4:	69da      	ldr	r2, [r3, #28]
 8004ac6:	4b08      	ldr	r3, [pc, #32]	@ (8004ae8 <HAL_TIM_Base_MspInit+0x38>)
 8004ac8:	2102      	movs	r1, #2
 8004aca:	430a      	orrs	r2, r1
 8004acc:	61da      	str	r2, [r3, #28]
 8004ace:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <HAL_TIM_Base_MspInit+0x38>)
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b004      	add	sp, #16
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			@ (mov r8, r8)
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40021000 	.word	0x40021000

08004aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004af0:	46c0      	nop			@ (mov r8, r8)
 8004af2:	e7fd      	b.n	8004af0 <NMI_Handler+0x4>

08004af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004af8:	46c0      	nop			@ (mov r8, r8)
 8004afa:	e7fd      	b.n	8004af8 <HardFault_Handler+0x4>

08004afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004b00:	46c0      	nop			@ (mov r8, r8)
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b14:	f001 f896 	bl	8005c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b18:	46c0      	nop			@ (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004b24:	4b03      	ldr	r3, [pc, #12]	@ (8004b34 <DMA1_Ch1_IRQHandler+0x14>)
 8004b26:	0018      	movs	r0, r3
 8004b28:	f001 fe40 	bl	80067ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8004b2c:	46c0      	nop			@ (mov r8, r8)
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	46c0      	nop			@ (mov r8, r8)
 8004b34:	20000630 	.word	0x20000630

08004b38 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11); // Handle interrupt for PB11 or PA11
 8004b3c:	2380      	movs	r3, #128	@ 0x80
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	0018      	movs	r0, r3
 8004b42:	f002 f8ed 	bl	8006d20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12); // Handle interrupt for PA12
 8004b46:	2380      	movs	r3, #128	@ 0x80
 8004b48:	015b      	lsls	r3, r3, #5
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f002 f8e8 	bl	8006d20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13); // Handle interrupt for PA12
 8004b50:	2380      	movs	r3, #128	@ 0x80
 8004b52:	019b      	lsls	r3, r3, #6
 8004b54:	0018      	movs	r0, r3
 8004b56:	f002 f8e3 	bl	8006d20 <HAL_GPIO_EXTI_IRQHandler>
}
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004b64:	4b03      	ldr	r3, [pc, #12]	@ (8004b74 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8004b66:	0018      	movs	r0, r3
 8004b68:	f001 fe20 	bl	80067ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	46c0      	nop			@ (mov r8, r8)
 8004b74:	200006d8 	.word	0x200006d8

08004b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  return 1;
 8004b7c:	2301      	movs	r3, #1
}
 8004b7e:	0018      	movs	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_kill>:

int _kill(int pid, int sig)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b8e:	f004 febd 	bl	800990c <__errno>
 8004b92:	0003      	movs	r3, r0
 8004b94:	2216      	movs	r2, #22
 8004b96:	601a      	str	r2, [r3, #0]
  return -1;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	425b      	negs	r3, r3
}
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b002      	add	sp, #8
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <_exit>:

void _exit (int status)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004bac:	2301      	movs	r3, #1
 8004bae:	425a      	negs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0011      	movs	r1, r2
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7ff ffe5 	bl	8004b84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004bba:	46c0      	nop			@ (mov r8, r8)
 8004bbc:	e7fd      	b.n	8004bba <_exit+0x16>

08004bbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e00a      	b.n	8004be6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004bd0:	e000      	b.n	8004bd4 <_read+0x16>
 8004bd2:	bf00      	nop
 8004bd4:	0001      	movs	r1, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	60ba      	str	r2, [r7, #8]
 8004bdc:	b2ca      	uxtb	r2, r1
 8004bde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	3301      	adds	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	dbf0      	blt.n	8004bd0 <_read+0x12>
  }

  return len;
 8004bee:	687b      	ldr	r3, [r7, #4]
}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b006      	add	sp, #24
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	e009      	b.n	8004c1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	60ba      	str	r2, [r7, #8]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	0018      	movs	r0, r3
 8004c14:	e000      	b.n	8004c18 <_write+0x20>
 8004c16:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	dbf1      	blt.n	8004c0a <_write+0x12>
  }
  return len;
 8004c26:	687b      	ldr	r3, [r7, #4]
}
 8004c28:	0018      	movs	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b006      	add	sp, #24
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <_close>:

int _close(int file)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	425b      	negs	r3, r3
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b002      	add	sp, #8
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2280      	movs	r2, #128	@ 0x80
 8004c52:	0192      	lsls	r2, r2, #6
 8004c54:	605a      	str	r2, [r3, #4]
  return 0;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <_isatty>:

int _isatty(int file)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c68:	2301      	movs	r3, #1
}
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	b002      	add	sp, #8
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b004      	add	sp, #16
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c90:	4a14      	ldr	r2, [pc, #80]	@ (8004ce4 <_sbrk+0x5c>)
 8004c92:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <_sbrk+0x60>)
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c9c:	4b13      	ldr	r3, [pc, #76]	@ (8004cec <_sbrk+0x64>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ca4:	4b11      	ldr	r3, [pc, #68]	@ (8004cec <_sbrk+0x64>)
 8004ca6:	4a12      	ldr	r2, [pc, #72]	@ (8004cf0 <_sbrk+0x68>)
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004caa:	4b10      	ldr	r3, [pc, #64]	@ (8004cec <_sbrk+0x64>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	18d3      	adds	r3, r2, r3
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d207      	bcs.n	8004cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cb8:	f004 fe28 	bl	800990c <__errno>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	220c      	movs	r2, #12
 8004cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	e009      	b.n	8004cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cc8:	4b08      	ldr	r3, [pc, #32]	@ (8004cec <_sbrk+0x64>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cce:	4b07      	ldr	r3, [pc, #28]	@ (8004cec <_sbrk+0x64>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	18d2      	adds	r2, r2, r3
 8004cd6:	4b05      	ldr	r3, [pc, #20]	@ (8004cec <_sbrk+0x64>)
 8004cd8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004cda:	68fb      	ldr	r3, [r7, #12]
}
 8004cdc:	0018      	movs	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	b006      	add	sp, #24
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20008000 	.word	0x20008000
 8004ce8:	00000400 	.word	0x00000400
 8004cec:	20000764 	.word	0x20000764
 8004cf0:	200008c0 	.word	0x200008c0

08004cf4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004cf8:	46c0      	nop			@ (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <ui>:
uint8_t fast = 1;

// A little startup splash screen
// Vertical autocalibration
void ui(void)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	af00      	add	r7, sp, #0
	clearDisplay();
 8004d02:	f7fe faf3 	bl	80032ec <clearDisplay>
    traceScreen();
 8004d06:	f000 ff13 	bl	8005b30 <traceScreen>
    sideInfo();
 8004d0a:	f000 f805 	bl	8004d18 <sideInfo>
    settingsBar();
 8004d0e:	f000 f911 	bl	8004f34 <settingsBar>
}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <sideInfo>:
// This function displays voltage info in the side menu
void sideInfo(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af02      	add	r7, sp, #8
    char st[15];

    // Display Minimum Voltage
    sprintf(st, "%.1f", minVoltage);
 8004d1e:	4b73      	ldr	r3, [pc, #460]	@ (8004eec <sideInfo+0x1d4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	1c18      	adds	r0, r3, #0
 8004d24:	f7fe f9f8 	bl	8003118 <__aeabi_f2d>
 8004d28:	0002      	movs	r2, r0
 8004d2a:	000b      	movs	r3, r1
 8004d2c:	4970      	ldr	r1, [pc, #448]	@ (8004ef0 <sideInfo+0x1d8>)
 8004d2e:	0038      	movs	r0, r7
 8004d30:	f004 fd14 	bl	800975c <siprintf>
    ILI9341_DrawText("Min:", FONT3, MENUPOS, 10, BLACK, WHITE);  // Adjusted y-coordinate for FONT4
 8004d34:	496f      	ldr	r1, [pc, #444]	@ (8004ef4 <sideInfo+0x1dc>)
 8004d36:	4870      	ldr	r0, [pc, #448]	@ (8004ef8 <sideInfo+0x1e0>)
 8004d38:	4b70      	ldr	r3, [pc, #448]	@ (8004efc <sideInfo+0x1e4>)
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	230a      	movs	r3, #10
 8004d42:	22fe      	movs	r2, #254	@ 0xfe
 8004d44:	f7fe fc25 	bl	8003592 <ILI9341_DrawText>
    ILI9341_DrawText(st, FONT3, MENUPOS, 30, WHITE, BLACK);      // Spaced further down
 8004d48:	496a      	ldr	r1, [pc, #424]	@ (8004ef4 <sideInfo+0x1dc>)
 8004d4a:	0038      	movs	r0, r7
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	4b6a      	ldr	r3, [pc, #424]	@ (8004efc <sideInfo+0x1e4>)
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	231e      	movs	r3, #30
 8004d56:	22fe      	movs	r2, #254	@ 0xfe
 8004d58:	f7fe fc1b 	bl	8003592 <ILI9341_DrawText>

    // Display Maximum Voltage
    sprintf(st, "%.1f", maxVoltage);
 8004d5c:	4b68      	ldr	r3, [pc, #416]	@ (8004f00 <sideInfo+0x1e8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	1c18      	adds	r0, r3, #0
 8004d62:	f7fe f9d9 	bl	8003118 <__aeabi_f2d>
 8004d66:	0002      	movs	r2, r0
 8004d68:	000b      	movs	r3, r1
 8004d6a:	4961      	ldr	r1, [pc, #388]	@ (8004ef0 <sideInfo+0x1d8>)
 8004d6c:	0038      	movs	r0, r7
 8004d6e:	f004 fcf5 	bl	800975c <siprintf>
    ILI9341_DrawText("Max:", FONT3, MENUPOS, 50, BLACK, WHITE); // Further spacing for FONT4 size
 8004d72:	4960      	ldr	r1, [pc, #384]	@ (8004ef4 <sideInfo+0x1dc>)
 8004d74:	4863      	ldr	r0, [pc, #396]	@ (8004f04 <sideInfo+0x1ec>)
 8004d76:	4b61      	ldr	r3, [pc, #388]	@ (8004efc <sideInfo+0x1e4>)
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2332      	movs	r3, #50	@ 0x32
 8004d80:	22fe      	movs	r2, #254	@ 0xfe
 8004d82:	f7fe fc06 	bl	8003592 <ILI9341_DrawText>
    ILI9341_DrawText(st, FONT3, MENUPOS, 70, WHITE, BLACK);
 8004d86:	495b      	ldr	r1, [pc, #364]	@ (8004ef4 <sideInfo+0x1dc>)
 8004d88:	0038      	movs	r0, r7
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8004efc <sideInfo+0x1e4>)
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	2346      	movs	r3, #70	@ 0x46
 8004d94:	22fe      	movs	r2, #254	@ 0xfe
 8004d96:	f7fe fbfc 	bl	8003592 <ILI9341_DrawText>

    // Display Peak-to-Peak Voltage
    sprintf(st, "%.1fV", maxVoltage - minVoltage);
 8004d9a:	4b59      	ldr	r3, [pc, #356]	@ (8004f00 <sideInfo+0x1e8>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b53      	ldr	r3, [pc, #332]	@ (8004eec <sideInfo+0x1d4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	1c19      	adds	r1, r3, #0
 8004da4:	1c10      	adds	r0, r2, #0
 8004da6:	f7fc f8eb 	bl	8000f80 <__aeabi_fsub>
 8004daa:	1c03      	adds	r3, r0, #0
 8004dac:	1c18      	adds	r0, r3, #0
 8004dae:	f7fe f9b3 	bl	8003118 <__aeabi_f2d>
 8004db2:	0002      	movs	r2, r0
 8004db4:	000b      	movs	r3, r1
 8004db6:	4954      	ldr	r1, [pc, #336]	@ (8004f08 <sideInfo+0x1f0>)
 8004db8:	0038      	movs	r0, r7
 8004dba:	f004 fccf 	bl	800975c <siprintf>
    ILI9341_DrawText("Vpp:", FONT3, MENUPOS, 90, BLACK, WHITE);
 8004dbe:	494d      	ldr	r1, [pc, #308]	@ (8004ef4 <sideInfo+0x1dc>)
 8004dc0:	4852      	ldr	r0, [pc, #328]	@ (8004f0c <sideInfo+0x1f4>)
 8004dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8004efc <sideInfo+0x1e4>)
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	235a      	movs	r3, #90	@ 0x5a
 8004dcc:	22fe      	movs	r2, #254	@ 0xfe
 8004dce:	f7fe fbe0 	bl	8003592 <ILI9341_DrawText>
    ILI9341_DrawText(st, FONT3, MENUPOS, 110, WHITE, BLACK);
 8004dd2:	4948      	ldr	r1, [pc, #288]	@ (8004ef4 <sideInfo+0x1dc>)
 8004dd4:	0038      	movs	r0, r7
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	4b48      	ldr	r3, [pc, #288]	@ (8004efc <sideInfo+0x1e4>)
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	236e      	movs	r3, #110	@ 0x6e
 8004de0:	22fe      	movs	r2, #254	@ 0xfe
 8004de2:	f7fe fbd6 	bl	8003592 <ILI9341_DrawText>

    // Display Frequency
    ILI9341_DrawText("Freq", FONT3, MENUPOS, 130, BLACK, WHITE);
 8004de6:	4943      	ldr	r1, [pc, #268]	@ (8004ef4 <sideInfo+0x1dc>)
 8004de8:	4849      	ldr	r0, [pc, #292]	@ (8004f10 <sideInfo+0x1f8>)
 8004dea:	4b44      	ldr	r3, [pc, #272]	@ (8004efc <sideInfo+0x1e4>)
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	2300      	movs	r3, #0
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	2382      	movs	r3, #130	@ 0x82
 8004df4:	22fe      	movs	r2, #254	@ 0xfe
 8004df6:	f7fe fbcc 	bl	8003592 <ILI9341_DrawText>
    if (measuredFreq >= 1000)
 8004dfa:	4b46      	ldr	r3, [pc, #280]	@ (8004f14 <sideInfo+0x1fc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4946      	ldr	r1, [pc, #280]	@ (8004f18 <sideInfo+0x200>)
 8004e00:	1c18      	adds	r0, r3, #0
 8004e02:	f7fb fb7f 	bl	8000504 <__aeabi_fcmpge>
 8004e06:	1e03      	subs	r3, r0, #0
 8004e08:	d03d      	beq.n	8004e86 <sideInfo+0x16e>
    {
        if (measuredFreq >= 100000)
 8004e0a:	4b42      	ldr	r3, [pc, #264]	@ (8004f14 <sideInfo+0x1fc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4943      	ldr	r1, [pc, #268]	@ (8004f1c <sideInfo+0x204>)
 8004e10:	1c18      	adds	r0, r3, #0
 8004e12:	f7fb fb77 	bl	8000504 <__aeabi_fcmpge>
 8004e16:	1e03      	subs	r3, r0, #0
 8004e18:	d010      	beq.n	8004e3c <sideInfo+0x124>
        {
            sprintf(st, "%d", (int)(measuredFreq / 1000));
 8004e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f14 <sideInfo+0x1fc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	493e      	ldr	r1, [pc, #248]	@ (8004f18 <sideInfo+0x200>)
 8004e20:	1c18      	adds	r0, r3, #0
 8004e22:	f7fb fd89 	bl	8000938 <__aeabi_fdiv>
 8004e26:	1c03      	adds	r3, r0, #0
 8004e28:	1c18      	adds	r0, r3, #0
 8004e2a:	f7fc fa4d 	bl	80012c8 <__aeabi_f2iz>
 8004e2e:	0002      	movs	r2, r0
 8004e30:	493b      	ldr	r1, [pc, #236]	@ (8004f20 <sideInfo+0x208>)
 8004e32:	003b      	movs	r3, r7
 8004e34:	0018      	movs	r0, r3
 8004e36:	f004 fc91 	bl	800975c <siprintf>
 8004e3a:	e00f      	b.n	8004e5c <sideInfo+0x144>
        }
        else
        {
            sprintf(st, "%.1f", measuredFreq / 1000);
 8004e3c:	4b35      	ldr	r3, [pc, #212]	@ (8004f14 <sideInfo+0x1fc>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4935      	ldr	r1, [pc, #212]	@ (8004f18 <sideInfo+0x200>)
 8004e42:	1c18      	adds	r0, r3, #0
 8004e44:	f7fb fd78 	bl	8000938 <__aeabi_fdiv>
 8004e48:	1c03      	adds	r3, r0, #0
 8004e4a:	1c18      	adds	r0, r3, #0
 8004e4c:	f7fe f964 	bl	8003118 <__aeabi_f2d>
 8004e50:	0002      	movs	r2, r0
 8004e52:	000b      	movs	r3, r1
 8004e54:	4926      	ldr	r1, [pc, #152]	@ (8004ef0 <sideInfo+0x1d8>)
 8004e56:	0038      	movs	r0, r7
 8004e58:	f004 fc80 	bl	800975c <siprintf>
        }
        ILI9341_DrawText(st, FONT3, MENUPOS, 150, WHITE, BLACK);
 8004e5c:	4925      	ldr	r1, [pc, #148]	@ (8004ef4 <sideInfo+0x1dc>)
 8004e5e:	0038      	movs	r0, r7
 8004e60:	2300      	movs	r3, #0
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	4b25      	ldr	r3, [pc, #148]	@ (8004efc <sideInfo+0x1e4>)
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	2396      	movs	r3, #150	@ 0x96
 8004e6a:	22fe      	movs	r2, #254	@ 0xfe
 8004e6c:	f7fe fb91 	bl	8003592 <ILI9341_DrawText>
        ILI9341_DrawText("kHz", FONT3, MENUPOS, 170, WHITE, BLACK);
 8004e70:	4920      	ldr	r1, [pc, #128]	@ (8004ef4 <sideInfo+0x1dc>)
 8004e72:	482c      	ldr	r0, [pc, #176]	@ (8004f24 <sideInfo+0x20c>)
 8004e74:	2300      	movs	r3, #0
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	4b20      	ldr	r3, [pc, #128]	@ (8004efc <sideInfo+0x1e4>)
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	23aa      	movs	r3, #170	@ 0xaa
 8004e7e:	22fe      	movs	r2, #254	@ 0xfe
 8004e80:	f7fe fb87 	bl	8003592 <ILI9341_DrawText>
 8004e84:	e01e      	b.n	8004ec4 <sideInfo+0x1ac>
    }
    else
    {
        sprintf(st, "%d", (int)measuredFreq);
 8004e86:	4b23      	ldr	r3, [pc, #140]	@ (8004f14 <sideInfo+0x1fc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	1c18      	adds	r0, r3, #0
 8004e8c:	f7fc fa1c 	bl	80012c8 <__aeabi_f2iz>
 8004e90:	0002      	movs	r2, r0
 8004e92:	4923      	ldr	r1, [pc, #140]	@ (8004f20 <sideInfo+0x208>)
 8004e94:	003b      	movs	r3, r7
 8004e96:	0018      	movs	r0, r3
 8004e98:	f004 fc60 	bl	800975c <siprintf>
        ILI9341_DrawText(st, FONT3, MENUPOS, 150, WHITE, BLACK);
 8004e9c:	4915      	ldr	r1, [pc, #84]	@ (8004ef4 <sideInfo+0x1dc>)
 8004e9e:	0038      	movs	r0, r7
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	4b15      	ldr	r3, [pc, #84]	@ (8004efc <sideInfo+0x1e4>)
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	2396      	movs	r3, #150	@ 0x96
 8004eaa:	22fe      	movs	r2, #254	@ 0xfe
 8004eac:	f7fe fb71 	bl	8003592 <ILI9341_DrawText>
        ILI9341_DrawText("Hz", FONT3, MENUPOS, 170, WHITE, BLACK);
 8004eb0:	4910      	ldr	r1, [pc, #64]	@ (8004ef4 <sideInfo+0x1dc>)
 8004eb2:	481d      	ldr	r0, [pc, #116]	@ (8004f28 <sideInfo+0x210>)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	4b10      	ldr	r3, [pc, #64]	@ (8004efc <sideInfo+0x1e4>)
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	23aa      	movs	r3, #170	@ 0xaa
 8004ebe:	22fe      	movs	r2, #254	@ 0xfe
 8004ec0:	f7fe fb67 	bl	8003592 <ILI9341_DrawText>
    }

    if (trigged)
 8004ec4:	4b19      	ldr	r3, [pc, #100]	@ (8004f2c <sideInfo+0x214>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <sideInfo+0x1ca>
    {
        ILI9341_DrawText("Trig", FONT3, MENUPOS, 190, GREEN, BLACK);
 8004ecc:	4909      	ldr	r1, [pc, #36]	@ (8004ef4 <sideInfo+0x1dc>)
 8004ece:	4818      	ldr	r0, [pc, #96]	@ (8004f30 <sideInfo+0x218>)
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	23fc      	movs	r3, #252	@ 0xfc
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	23be      	movs	r3, #190	@ 0xbe
 8004edc:	22fe      	movs	r2, #254	@ 0xfe
 8004ede:	f7fe fb58 	bl	8003592 <ILI9341_DrawText>
    }   // Print info on the side
}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b004      	add	sp, #16
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	200005e4 	.word	0x200005e4
 8004ef0:	0800d030 	.word	0x0800d030
 8004ef4:	0800d174 	.word	0x0800d174
 8004ef8:	0800d038 	.word	0x0800d038
 8004efc:	0000ffff 	.word	0x0000ffff
 8004f00:	200005e0 	.word	0x200005e0
 8004f04:	0800d040 	.word	0x0800d040
 8004f08:	0800d048 	.word	0x0800d048
 8004f0c:	0800d050 	.word	0x0800d050
 8004f10:	0800d058 	.word	0x0800d058
 8004f14:	200005e8 	.word	0x200005e8
 8004f18:	447a0000 	.word	0x447a0000
 8004f1c:	47c35000 	.word	0x47c35000
 8004f20:	0800d060 	.word	0x0800d060
 8004f24:	0800d064 	.word	0x0800d064
 8004f28:	0800d068 	.word	0x0800d068
 8004f2c:	200005cd 	.word	0x200005cd
 8004f30:	0800d06c 	.word	0x0800d06c

08004f34 <settingsBar>:

// This function adjusts the settings
void settingsBar()
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af02      	add	r7, sp, #8
	   extern uint8_t topClip, bottomClip;

	    char st[10];

	    // Print top row with adjusted positions
	    if (topClip || bottomClip)
 8004f3a:	4bbe      	ldr	r3, [pc, #760]	@ (8005234 <settingsBar+0x300>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <settingsBar+0x16>
 8004f42:	4bbd      	ldr	r3, [pc, #756]	@ (8005238 <settingsBar+0x304>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <settingsBar+0x2e>
	        ILI9341_DrawText("Vdiv", FONT3, 10, 170, RED, BLACK);  // Adjusted for FONT4
 8004f4a:	49bc      	ldr	r1, [pc, #752]	@ (800523c <settingsBar+0x308>)
 8004f4c:	48bc      	ldr	r0, [pc, #752]	@ (8005240 <settingsBar+0x30c>)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	23f8      	movs	r3, #248	@ 0xf8
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	23aa      	movs	r3, #170	@ 0xaa
 8004f5a:	220a      	movs	r2, #10
 8004f5c:	f7fe fb19 	bl	8003592 <ILI9341_DrawText>
 8004f60:	e009      	b.n	8004f76 <settingsBar+0x42>
	    else
	        ILI9341_DrawText("Vdiv", FONT3, 10, 170, WHITE, BLACK);
 8004f62:	49b6      	ldr	r1, [pc, #728]	@ (800523c <settingsBar+0x308>)
 8004f64:	48b6      	ldr	r0, [pc, #728]	@ (8005240 <settingsBar+0x30c>)
 8004f66:	2300      	movs	r3, #0
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	4bb6      	ldr	r3, [pc, #728]	@ (8005244 <settingsBar+0x310>)
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	23aa      	movs	r3, #170	@ 0xaa
 8004f70:	220a      	movs	r2, #10
 8004f72:	f7fe fb0e 	bl	8003592 <ILI9341_DrawText>

	    ILI9341_DrawText("Trig", FONT3, 50, 170, WHITE, BLACK);
 8004f76:	49b1      	ldr	r1, [pc, #708]	@ (800523c <settingsBar+0x308>)
 8004f78:	48b3      	ldr	r0, [pc, #716]	@ (8005248 <settingsBar+0x314>)
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	4bb1      	ldr	r3, [pc, #708]	@ (8005244 <settingsBar+0x310>)
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	23aa      	movs	r3, #170	@ 0xaa
 8004f84:	2232      	movs	r2, #50	@ 0x32
 8004f86:	f7fe fb04 	bl	8003592 <ILI9341_DrawText>
	    ILI9341_DrawText("Slope", FONT3, 90, 170, WHITE, BLACK);
 8004f8a:	49ac      	ldr	r1, [pc, #688]	@ (800523c <settingsBar+0x308>)
 8004f8c:	48af      	ldr	r0, [pc, #700]	@ (800524c <settingsBar+0x318>)
 8004f8e:	2300      	movs	r3, #0
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	4bac      	ldr	r3, [pc, #688]	@ (8005244 <settingsBar+0x310>)
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	23aa      	movs	r3, #170	@ 0xaa
 8004f98:	225a      	movs	r2, #90	@ 0x5a
 8004f9a:	f7fe fafa 	bl	8003592 <ILI9341_DrawText>
	    ILI9341_DrawText("Atten", FONT3, 140, 170, WHITE, BLACK);
 8004f9e:	49a7      	ldr	r1, [pc, #668]	@ (800523c <settingsBar+0x308>)
 8004fa0:	48ab      	ldr	r0, [pc, #684]	@ (8005250 <settingsBar+0x31c>)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	9301      	str	r3, [sp, #4]
 8004fa6:	4ba7      	ldr	r3, [pc, #668]	@ (8005244 <settingsBar+0x310>)
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	23aa      	movs	r3, #170	@ 0xaa
 8004fac:	228c      	movs	r2, #140	@ 0x8c
 8004fae:	f7fe faf0 	bl	8003592 <ILI9341_DrawText>
	    ILI9341_DrawText(tdiv < 100 ? "us/d" : "ms/d", FONT3, 190, 170, WHITE, BLACK);
 8004fb2:	4ba8      	ldr	r3, [pc, #672]	@ (8005254 <settingsBar+0x320>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	49a8      	ldr	r1, [pc, #672]	@ (8005258 <settingsBar+0x324>)
 8004fb8:	1c18      	adds	r0, r3, #0
 8004fba:	f7fb fa85 	bl	80004c8 <__aeabi_fcmplt>
 8004fbe:	1e03      	subs	r3, r0, #0
 8004fc0:	d001      	beq.n	8004fc6 <settingsBar+0x92>
 8004fc2:	48a6      	ldr	r0, [pc, #664]	@ (800525c <settingsBar+0x328>)
 8004fc4:	e000      	b.n	8004fc8 <settingsBar+0x94>
 8004fc6:	48a6      	ldr	r0, [pc, #664]	@ (8005260 <settingsBar+0x32c>)
 8004fc8:	499c      	ldr	r1, [pc, #624]	@ (800523c <settingsBar+0x308>)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9301      	str	r3, [sp, #4]
 8004fce:	4b9d      	ldr	r3, [pc, #628]	@ (8005244 <settingsBar+0x310>)
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	23aa      	movs	r3, #170	@ 0xaa
 8004fd4:	22be      	movs	r2, #190	@ 0xbe
 8004fd6:	f7fe fadc 	bl	8003592 <ILI9341_DrawText>

	    // Print bottom row values
	    if (sel == 0)
 8004fda:	4ba2      	ldr	r3, [pc, #648]	@ (8005264 <settingsBar+0x330>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d127      	bne.n	8005034 <settingsBar+0x100>
	    {
	    	ILI9341_DrawText("Vdiv", FONT3, 10, 170, BLACK, WHITE);
 8004fe4:	4995      	ldr	r1, [pc, #596]	@ (800523c <settingsBar+0x308>)
 8004fe6:	4896      	ldr	r0, [pc, #600]	@ (8005240 <settingsBar+0x30c>)
 8004fe8:	4b96      	ldr	r3, [pc, #600]	@ (8005244 <settingsBar+0x310>)
 8004fea:	9301      	str	r3, [sp, #4]
 8004fec:	2300      	movs	r3, #0
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	23aa      	movs	r3, #170	@ 0xaa
 8004ff2:	220a      	movs	r2, #10
 8004ff4:	f7fe facd 	bl	8003592 <ILI9341_DrawText>
	        if (topClip || bottomClip)
 8004ff8:	4b8e      	ldr	r3, [pc, #568]	@ (8005234 <settingsBar+0x300>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d103      	bne.n	8005008 <settingsBar+0xd4>
 8005000:	4b8d      	ldr	r3, [pc, #564]	@ (8005238 <settingsBar+0x304>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <settingsBar+0xec>
	            ILI9341_DrawText(st, FONT4, 10, 190, RED, BLACK);
 8005008:	4997      	ldr	r1, [pc, #604]	@ (8005268 <settingsBar+0x334>)
 800500a:	1d38      	adds	r0, r7, #4
 800500c:	2300      	movs	r3, #0
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	23f8      	movs	r3, #248	@ 0xf8
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	23be      	movs	r3, #190	@ 0xbe
 8005018:	220a      	movs	r2, #10
 800501a:	f7fe faba 	bl	8003592 <ILI9341_DrawText>
 800501e:	e009      	b.n	8005034 <settingsBar+0x100>
	        else
	            ILI9341_DrawText(st, FONT4, 10, 190, WHITE, BLACK);
 8005020:	4991      	ldr	r1, [pc, #580]	@ (8005268 <settingsBar+0x334>)
 8005022:	1d38      	adds	r0, r7, #4
 8005024:	2300      	movs	r3, #0
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	4b86      	ldr	r3, [pc, #536]	@ (8005244 <settingsBar+0x310>)
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	23be      	movs	r3, #190	@ 0xbe
 800502e:	220a      	movs	r2, #10
 8005030:	f7fe faaf 	bl	8003592 <ILI9341_DrawText>
	    }
	    sprintf(st, "%.1fV", vdiv);
 8005034:	4b8d      	ldr	r3, [pc, #564]	@ (800526c <settingsBar+0x338>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	1c18      	adds	r0, r3, #0
 800503a:	f7fe f86d 	bl	8003118 <__aeabi_f2d>
 800503e:	0002      	movs	r2, r0
 8005040:	000b      	movs	r3, r1
 8005042:	498b      	ldr	r1, [pc, #556]	@ (8005270 <settingsBar+0x33c>)
 8005044:	1d38      	adds	r0, r7, #4
 8005046:	f004 fb89 	bl	800975c <siprintf>
	    ILI9341_DrawText(st, FONT3, 10, 190, WHITE, BLACK);
 800504a:	497c      	ldr	r1, [pc, #496]	@ (800523c <settingsBar+0x308>)
 800504c:	1d38      	adds	r0, r7, #4
 800504e:	2300      	movs	r3, #0
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	4b7c      	ldr	r3, [pc, #496]	@ (8005244 <settingsBar+0x310>)
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	23be      	movs	r3, #190	@ 0xbe
 8005058:	220a      	movs	r2, #10
 800505a:	f7fe fa9a 	bl	8003592 <ILI9341_DrawText>

	    if (sel == 1)
 800505e:	4b81      	ldr	r3, [pc, #516]	@ (8005264 <settingsBar+0x330>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d129      	bne.n	80050bc <settingsBar+0x188>
	    {
	    	ILI9341_DrawText("Trig", FONT3, 50, 170, BLACK, WHITE);
 8005068:	4974      	ldr	r1, [pc, #464]	@ (800523c <settingsBar+0x308>)
 800506a:	4877      	ldr	r0, [pc, #476]	@ (8005248 <settingsBar+0x314>)
 800506c:	4b75      	ldr	r3, [pc, #468]	@ (8005244 <settingsBar+0x310>)
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	2300      	movs	r3, #0
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	23aa      	movs	r3, #170	@ 0xaa
 8005076:	2232      	movs	r2, #50	@ 0x32
 8005078:	f7fe fa8b 	bl	8003592 <ILI9341_DrawText>
	        ILI9341_DrawHLine(0, (uint16_t)((PIXDIV * YDIV / 2 - 1) - (trigVoltage * PIXDIV / vdiv)), XDIV * PIXDIV, RED);
 800507c:	4b7d      	ldr	r3, [pc, #500]	@ (8005274 <settingsBar+0x340>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2183      	movs	r1, #131	@ 0x83
 8005082:	05c9      	lsls	r1, r1, #23
 8005084:	1c18      	adds	r0, r3, #0
 8005086:	f7fb fe3d 	bl	8000d04 <__aeabi_fmul>
 800508a:	1c03      	adds	r3, r0, #0
 800508c:	1c1a      	adds	r2, r3, #0
 800508e:	4b77      	ldr	r3, [pc, #476]	@ (800526c <settingsBar+0x338>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	1c19      	adds	r1, r3, #0
 8005094:	1c10      	adds	r0, r2, #0
 8005096:	f7fb fc4f 	bl	8000938 <__aeabi_fdiv>
 800509a:	1c03      	adds	r3, r0, #0
 800509c:	1c19      	adds	r1, r3, #0
 800509e:	4876      	ldr	r0, [pc, #472]	@ (8005278 <settingsBar+0x344>)
 80050a0:	f7fb ff6e 	bl	8000f80 <__aeabi_fsub>
 80050a4:	1c03      	adds	r3, r0, #0
 80050a6:	1c18      	adds	r0, r3, #0
 80050a8:	f7fb fa36 	bl	8000518 <__aeabi_f2uiz>
 80050ac:	0003      	movs	r3, r0
 80050ae:	b299      	uxth	r1, r3
 80050b0:	23f8      	movs	r3, #248	@ 0xf8
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	22f0      	movs	r2, #240	@ 0xf0
 80050b6:	2000      	movs	r0, #0
 80050b8:	f7ff f812 	bl	80040e0 <ILI9341_DrawHLine>
//	        ILI9341_DrawText("Trig Voltage:", FONT3, 50, 190, WHITE, BLACK);
	    }
	    sprintf(st, "%.1f", trigVoltage);
 80050bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005274 <settingsBar+0x340>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1c18      	adds	r0, r3, #0
 80050c2:	f7fe f829 	bl	8003118 <__aeabi_f2d>
 80050c6:	0002      	movs	r2, r0
 80050c8:	000b      	movs	r3, r1
 80050ca:	496c      	ldr	r1, [pc, #432]	@ (800527c <settingsBar+0x348>)
 80050cc:	1d38      	adds	r0, r7, #4
 80050ce:	f004 fb45 	bl	800975c <siprintf>
	    ILI9341_DrawText(st, FONT3, 50, 190, WHITE, BLACK);
 80050d2:	495a      	ldr	r1, [pc, #360]	@ (800523c <settingsBar+0x308>)
 80050d4:	1d38      	adds	r0, r7, #4
 80050d6:	2300      	movs	r3, #0
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	4b5a      	ldr	r3, [pc, #360]	@ (8005244 <settingsBar+0x310>)
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	23be      	movs	r3, #190	@ 0xbe
 80050e0:	2232      	movs	r2, #50	@ 0x32
 80050e2:	f7fe fa56 	bl	8003592 <ILI9341_DrawText>

	    if (sel == 2)
 80050e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005264 <settingsBar+0x330>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d119      	bne.n	8005124 <settingsBar+0x1f0>
	    {
	    	ILI9341_DrawText("Slope", FONT3, 90, 170, BLACK, WHITE);
 80050f0:	4952      	ldr	r1, [pc, #328]	@ (800523c <settingsBar+0x308>)
 80050f2:	4856      	ldr	r0, [pc, #344]	@ (800524c <settingsBar+0x318>)
 80050f4:	4b53      	ldr	r3, [pc, #332]	@ (8005244 <settingsBar+0x310>)
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	2300      	movs	r3, #0
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	23aa      	movs	r3, #170	@ 0xaa
 80050fe:	225a      	movs	r2, #90	@ 0x5a
 8005100:	f7fe fa47 	bl	8003592 <ILI9341_DrawText>
	        ILI9341_DrawText(trig == RISING ? "Rise" : "Fall", FONT3, 90, 190, WHITE, BLACK);
 8005104:	4b5e      	ldr	r3, [pc, #376]	@ (8005280 <settingsBar+0x34c>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <settingsBar+0x1dc>
 800510c:	485d      	ldr	r0, [pc, #372]	@ (8005284 <settingsBar+0x350>)
 800510e:	e000      	b.n	8005112 <settingsBar+0x1de>
 8005110:	485d      	ldr	r0, [pc, #372]	@ (8005288 <settingsBar+0x354>)
 8005112:	494a      	ldr	r1, [pc, #296]	@ (800523c <settingsBar+0x308>)
 8005114:	2300      	movs	r3, #0
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	4b4a      	ldr	r3, [pc, #296]	@ (8005244 <settingsBar+0x310>)
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	23be      	movs	r3, #190	@ 0xbe
 800511e:	225a      	movs	r2, #90	@ 0x5a
 8005120:	f7fe fa37 	bl	8003592 <ILI9341_DrawText>
	    }

	    if (sel == 3)
 8005124:	4b4f      	ldr	r3, [pc, #316]	@ (8005264 <settingsBar+0x330>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b03      	cmp	r3, #3
 800512c:	d11a      	bne.n	8005164 <settingsBar+0x230>
	    {
	    	ILI9341_DrawText("Atten", FONT3, 140, 170, BLACK, WHITE);
 800512e:	4943      	ldr	r1, [pc, #268]	@ (800523c <settingsBar+0x308>)
 8005130:	4847      	ldr	r0, [pc, #284]	@ (8005250 <settingsBar+0x31c>)
 8005132:	4b44      	ldr	r3, [pc, #272]	@ (8005244 <settingsBar+0x310>)
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	2300      	movs	r3, #0
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	23aa      	movs	r3, #170	@ 0xaa
 800513c:	228c      	movs	r2, #140	@ 0x8c
 800513e:	f7fe fa28 	bl	8003592 <ILI9341_DrawText>
	        sprintf(st, "%dx", atten);
 8005142:	4b52      	ldr	r3, [pc, #328]	@ (800528c <settingsBar+0x358>)
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4952      	ldr	r1, [pc, #328]	@ (8005290 <settingsBar+0x35c>)
 8005148:	1d3b      	adds	r3, r7, #4
 800514a:	0018      	movs	r0, r3
 800514c:	f004 fb06 	bl	800975c <siprintf>
	        ILI9341_DrawText(st, FONT3, 140, 190, WHITE, BLACK);
 8005150:	493a      	ldr	r1, [pc, #232]	@ (800523c <settingsBar+0x308>)
 8005152:	1d38      	adds	r0, r7, #4
 8005154:	2300      	movs	r3, #0
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	4b3a      	ldr	r3, [pc, #232]	@ (8005244 <settingsBar+0x310>)
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	23be      	movs	r3, #190	@ 0xbe
 800515e:	228c      	movs	r2, #140	@ 0x8c
 8005160:	f7fe fa17 	bl	8003592 <ILI9341_DrawText>
	    }

	    if (sel == 4)
 8005164:	4b3f      	ldr	r3, [pc, #252]	@ (8005264 <settingsBar+0x330>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b04      	cmp	r3, #4
 800516c:	d15d      	bne.n	800522a <settingsBar+0x2f6>
	    {
	    	ILI9341_DrawText(tdiv < 100 ? "us/d" : "ms/d", FONT3, 190, 170, BLACK, WHITE);
 800516e:	4b39      	ldr	r3, [pc, #228]	@ (8005254 <settingsBar+0x320>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4939      	ldr	r1, [pc, #228]	@ (8005258 <settingsBar+0x324>)
 8005174:	1c18      	adds	r0, r3, #0
 8005176:	f7fb f9a7 	bl	80004c8 <__aeabi_fcmplt>
 800517a:	1e03      	subs	r3, r0, #0
 800517c:	d001      	beq.n	8005182 <settingsBar+0x24e>
 800517e:	4837      	ldr	r0, [pc, #220]	@ (800525c <settingsBar+0x328>)
 8005180:	e000      	b.n	8005184 <settingsBar+0x250>
 8005182:	4837      	ldr	r0, [pc, #220]	@ (8005260 <settingsBar+0x32c>)
 8005184:	492d      	ldr	r1, [pc, #180]	@ (800523c <settingsBar+0x308>)
 8005186:	4b2f      	ldr	r3, [pc, #188]	@ (8005244 <settingsBar+0x310>)
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	2300      	movs	r3, #0
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	23aa      	movs	r3, #170	@ 0xaa
 8005190:	22be      	movs	r2, #190	@ 0xbe
 8005192:	f7fe f9fe 	bl	8003592 <ILI9341_DrawText>
	        if (tdiv < 100)
 8005196:	4b2f      	ldr	r3, [pc, #188]	@ (8005254 <settingsBar+0x320>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	492f      	ldr	r1, [pc, #188]	@ (8005258 <settingsBar+0x324>)
 800519c:	1c18      	adds	r0, r3, #0
 800519e:	f7fb f993 	bl	80004c8 <__aeabi_fcmplt>
 80051a2:	1e03      	subs	r3, r0, #0
 80051a4:	d00b      	beq.n	80051be <settingsBar+0x28a>
	            sprintf(st, "%d", (int)tdiv);
 80051a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005254 <settingsBar+0x320>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	1c18      	adds	r0, r3, #0
 80051ac:	f7fc f88c 	bl	80012c8 <__aeabi_f2iz>
 80051b0:	0002      	movs	r2, r0
 80051b2:	4938      	ldr	r1, [pc, #224]	@ (8005294 <settingsBar+0x360>)
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	0018      	movs	r0, r3
 80051b8:	f004 fad0 	bl	800975c <siprintf>
 80051bc:	e02b      	b.n	8005216 <settingsBar+0x2e2>
	        else if (tdiv < 1000)
 80051be:	4b25      	ldr	r3, [pc, #148]	@ (8005254 <settingsBar+0x320>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4935      	ldr	r1, [pc, #212]	@ (8005298 <settingsBar+0x364>)
 80051c4:	1c18      	adds	r0, r3, #0
 80051c6:	f7fb f97f 	bl	80004c8 <__aeabi_fcmplt>
 80051ca:	1e03      	subs	r3, r0, #0
 80051cc:	d011      	beq.n	80051f2 <settingsBar+0x2be>
	            sprintf(st, "0.%d", (int)tdiv / 100);
 80051ce:	4b21      	ldr	r3, [pc, #132]	@ (8005254 <settingsBar+0x320>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	1c18      	adds	r0, r3, #0
 80051d4:	f7fc f878 	bl	80012c8 <__aeabi_f2iz>
 80051d8:	0003      	movs	r3, r0
 80051da:	2164      	movs	r1, #100	@ 0x64
 80051dc:	0018      	movs	r0, r3
 80051de:	f7fb f837 	bl	8000250 <__divsi3>
 80051e2:	0003      	movs	r3, r0
 80051e4:	001a      	movs	r2, r3
 80051e6:	492d      	ldr	r1, [pc, #180]	@ (800529c <settingsBar+0x368>)
 80051e8:	1d3b      	adds	r3, r7, #4
 80051ea:	0018      	movs	r0, r3
 80051ec:	f004 fab6 	bl	800975c <siprintf>
 80051f0:	e011      	b.n	8005216 <settingsBar+0x2e2>
	        else
	            sprintf(st, "%d", (int)tdiv / 1000);
 80051f2:	4b18      	ldr	r3, [pc, #96]	@ (8005254 <settingsBar+0x320>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	1c18      	adds	r0, r3, #0
 80051f8:	f7fc f866 	bl	80012c8 <__aeabi_f2iz>
 80051fc:	0002      	movs	r2, r0
 80051fe:	23fa      	movs	r3, #250	@ 0xfa
 8005200:	0099      	lsls	r1, r3, #2
 8005202:	0010      	movs	r0, r2
 8005204:	f7fb f824 	bl	8000250 <__divsi3>
 8005208:	0003      	movs	r3, r0
 800520a:	001a      	movs	r2, r3
 800520c:	4921      	ldr	r1, [pc, #132]	@ (8005294 <settingsBar+0x360>)
 800520e:	1d3b      	adds	r3, r7, #4
 8005210:	0018      	movs	r0, r3
 8005212:	f004 faa3 	bl	800975c <siprintf>
	        ILI9341_DrawText(st, FONT3, 190, 190, WHITE, BLACK);
 8005216:	4909      	ldr	r1, [pc, #36]	@ (800523c <settingsBar+0x308>)
 8005218:	1d38      	adds	r0, r7, #4
 800521a:	2300      	movs	r3, #0
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <settingsBar+0x310>)
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	23be      	movs	r3, #190	@ 0xbe
 8005224:	22be      	movs	r2, #190	@ 0xbe
 8005226:	f7fe f9b4 	bl	8003592 <ILI9341_DrawText>
	    }
}
 800522a:	46c0      	nop			@ (mov r8, r8)
 800522c:	46bd      	mov	sp, r7
 800522e:	b004      	add	sp, #16
 8005230:	bd80      	pop	{r7, pc}
 8005232:	46c0      	nop			@ (mov r8, r8)
 8005234:	20000769 	.word	0x20000769
 8005238:	2000076a 	.word	0x2000076a
 800523c:	0800d174 	.word	0x0800d174
 8005240:	0800d074 	.word	0x0800d074
 8005244:	0000ffff 	.word	0x0000ffff
 8005248:	0800d06c 	.word	0x0800d06c
 800524c:	0800d07c 	.word	0x0800d07c
 8005250:	0800d084 	.word	0x0800d084
 8005254:	20000010 	.word	0x20000010
 8005258:	42c80000 	.word	0x42c80000
 800525c:	0800d08c 	.word	0x0800d08c
 8005260:	0800d094 	.word	0x0800d094
 8005264:	20000768 	.word	0x20000768
 8005268:	0800dad8 	.word	0x0800dad8
 800526c:	20000008 	.word	0x20000008
 8005270:	0800d048 	.word	0x0800d048
 8005274:	200005d4 	.word	0x200005d4
 8005278:	429e0000 	.word	0x429e0000
 800527c:	0800d030 	.word	0x0800d030
 8005280:	2000000c 	.word	0x2000000c
 8005284:	0800d09c 	.word	0x0800d09c
 8005288:	0800d0a4 	.word	0x0800d0a4
 800528c:	20000004 	.word	0x20000004
 8005290:	0800d0ac 	.word	0x0800d0ac
 8005294:	0800d060 	.word	0x0800d060
 8005298:	447a0000 	.word	0x447a0000
 800529c:	0800d0b0 	.word	0x0800d0b0

080052a0 <dso_increase>:


void dso_increase(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
    switch (sel)
 80052a4:	4b4b      	ldr	r3, [pc, #300]	@ (80053d4 <dso_increase+0x134>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d900      	bls.n	80052b0 <dso_increase+0x10>
 80052ae:	e08a      	b.n	80053c6 <dso_increase+0x126>
 80052b0:	009a      	lsls	r2, r3, #2
 80052b2:	4b49      	ldr	r3, [pc, #292]	@ (80053d8 <dso_increase+0x138>)
 80052b4:	18d3      	adds	r3, r2, r3
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	469f      	mov	pc, r3
    {
        case 0: if (vdiv < 9) vdiv += 0.5; break;
 80052ba:	4b48      	ldr	r3, [pc, #288]	@ (80053dc <dso_increase+0x13c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4948      	ldr	r1, [pc, #288]	@ (80053e0 <dso_increase+0x140>)
 80052c0:	1c18      	adds	r0, r3, #0
 80052c2:	f7fb f901 	bl	80004c8 <__aeabi_fcmplt>
 80052c6:	1e03      	subs	r3, r0, #0
 80052c8:	d100      	bne.n	80052cc <dso_increase+0x2c>
 80052ca:	e07c      	b.n	80053c6 <dso_increase+0x126>
 80052cc:	4b43      	ldr	r3, [pc, #268]	@ (80053dc <dso_increase+0x13c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	21fc      	movs	r1, #252	@ 0xfc
 80052d2:	0589      	lsls	r1, r1, #22
 80052d4:	1c18      	adds	r0, r3, #0
 80052d6:	f7fb f9a5 	bl	8000624 <__aeabi_fadd>
 80052da:	1c03      	adds	r3, r0, #0
 80052dc:	1c1a      	adds	r2, r3, #0
 80052de:	4b3f      	ldr	r3, [pc, #252]	@ (80053dc <dso_increase+0x13c>)
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	e070      	b.n	80053c6 <dso_increase+0x126>
        case 1: trigVoltage += 0.1; break;
 80052e4:	4b3f      	ldr	r3, [pc, #252]	@ (80053e4 <dso_increase+0x144>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	1c18      	adds	r0, r3, #0
 80052ea:	f7fd ff15 	bl	8003118 <__aeabi_f2d>
 80052ee:	4a3e      	ldr	r2, [pc, #248]	@ (80053e8 <dso_increase+0x148>)
 80052f0:	4b3e      	ldr	r3, [pc, #248]	@ (80053ec <dso_increase+0x14c>)
 80052f2:	f7fc f855 	bl	80013a0 <__aeabi_dadd>
 80052f6:	0002      	movs	r2, r0
 80052f8:	000b      	movs	r3, r1
 80052fa:	0010      	movs	r0, r2
 80052fc:	0019      	movs	r1, r3
 80052fe:	f7fd ff53 	bl	80031a8 <__aeabi_d2f>
 8005302:	1c02      	adds	r2, r0, #0
 8005304:	4b37      	ldr	r3, [pc, #220]	@ (80053e4 <dso_increase+0x144>)
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e05d      	b.n	80053c6 <dso_increase+0x126>
        case 2: trig = RISING; break;
 800530a:	4b39      	ldr	r3, [pc, #228]	@ (80053f0 <dso_increase+0x150>)
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	e059      	b.n	80053c6 <dso_increase+0x126>
        case 3: atten = 10; break;
 8005312:	4b38      	ldr	r3, [pc, #224]	@ (80053f4 <dso_increase+0x154>)
 8005314:	220a      	movs	r2, #10
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e055      	b.n	80053c6 <dso_increase+0x126>
        case 4:
            if (tdiv >= 1000) tdiv += 1000;
 800531a:	4b37      	ldr	r3, [pc, #220]	@ (80053f8 <dso_increase+0x158>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4937      	ldr	r1, [pc, #220]	@ (80053fc <dso_increase+0x15c>)
 8005320:	1c18      	adds	r0, r3, #0
 8005322:	f7fb f8ef 	bl	8000504 <__aeabi_fcmpge>
 8005326:	1e03      	subs	r3, r0, #0
 8005328:	d00a      	beq.n	8005340 <dso_increase+0xa0>
 800532a:	4b33      	ldr	r3, [pc, #204]	@ (80053f8 <dso_increase+0x158>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4933      	ldr	r1, [pc, #204]	@ (80053fc <dso_increase+0x15c>)
 8005330:	1c18      	adds	r0, r3, #0
 8005332:	f7fb f977 	bl	8000624 <__aeabi_fadd>
 8005336:	1c03      	adds	r3, r0, #0
 8005338:	1c1a      	adds	r2, r3, #0
 800533a:	4b2f      	ldr	r3, [pc, #188]	@ (80053f8 <dso_increase+0x158>)
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e024      	b.n	800538a <dso_increase+0xea>
            else if (tdiv >= 100) tdiv += 100;
 8005340:	4b2d      	ldr	r3, [pc, #180]	@ (80053f8 <dso_increase+0x158>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	492e      	ldr	r1, [pc, #184]	@ (8005400 <dso_increase+0x160>)
 8005346:	1c18      	adds	r0, r3, #0
 8005348:	f7fb f8dc 	bl	8000504 <__aeabi_fcmpge>
 800534c:	1e03      	subs	r3, r0, #0
 800534e:	d00a      	beq.n	8005366 <dso_increase+0xc6>
 8005350:	4b29      	ldr	r3, [pc, #164]	@ (80053f8 <dso_increase+0x158>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	492a      	ldr	r1, [pc, #168]	@ (8005400 <dso_increase+0x160>)
 8005356:	1c18      	adds	r0, r3, #0
 8005358:	f7fb f964 	bl	8000624 <__aeabi_fadd>
 800535c:	1c03      	adds	r3, r0, #0
 800535e:	1c1a      	adds	r2, r3, #0
 8005360:	4b25      	ldr	r3, [pc, #148]	@ (80053f8 <dso_increase+0x158>)
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e011      	b.n	800538a <dso_increase+0xea>
            else if (tdiv >= 10) tdiv += 10;
 8005366:	4b24      	ldr	r3, [pc, #144]	@ (80053f8 <dso_increase+0x158>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4926      	ldr	r1, [pc, #152]	@ (8005404 <dso_increase+0x164>)
 800536c:	1c18      	adds	r0, r3, #0
 800536e:	f7fb f8c9 	bl	8000504 <__aeabi_fcmpge>
 8005372:	1e03      	subs	r3, r0, #0
 8005374:	d009      	beq.n	800538a <dso_increase+0xea>
 8005376:	4b20      	ldr	r3, [pc, #128]	@ (80053f8 <dso_increase+0x158>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4922      	ldr	r1, [pc, #136]	@ (8005404 <dso_increase+0x164>)
 800537c:	1c18      	adds	r0, r3, #0
 800537e:	f7fb f951 	bl	8000624 <__aeabi_fadd>
 8005382:	1c03      	adds	r3, r0, #0
 8005384:	1c1a      	adds	r2, r3, #0
 8005386:	4b1c      	ldr	r3, [pc, #112]	@ (80053f8 <dso_increase+0x158>)
 8005388:	601a      	str	r2, [r3, #0]

            sampRate = (PIXDIV * 1000 * 1000) / tdiv;
 800538a:	4b1b      	ldr	r3, [pc, #108]	@ (80053f8 <dso_increase+0x158>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	1c19      	adds	r1, r3, #0
 8005390:	481d      	ldr	r0, [pc, #116]	@ (8005408 <dso_increase+0x168>)
 8005392:	f7fb fad1 	bl	8000938 <__aeabi_fdiv>
 8005396:	1c03      	adds	r3, r0, #0
 8005398:	1c18      	adds	r0, r3, #0
 800539a:	f7fb f8bd 	bl	8000518 <__aeabi_f2uiz>
 800539e:	0002      	movs	r2, r0
 80053a0:	4b1a      	ldr	r3, [pc, #104]	@ (800540c <dso_increase+0x16c>)
 80053a2:	601a      	str	r2, [r3, #0]
            sampPer = tdiv / (float)PIXDIV;
 80053a4:	4b14      	ldr	r3, [pc, #80]	@ (80053f8 <dso_increase+0x158>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2183      	movs	r1, #131	@ 0x83
 80053aa:	05c9      	lsls	r1, r1, #23
 80053ac:	1c18      	adds	r0, r3, #0
 80053ae:	f7fb fac3 	bl	8000938 <__aeabi_fdiv>
 80053b2:	1c03      	adds	r3, r0, #0
 80053b4:	1c1a      	adds	r2, r3, #0
 80053b6:	4b16      	ldr	r3, [pc, #88]	@ (8005410 <dso_increase+0x170>)
 80053b8:	601a      	str	r2, [r3, #0]
            SetTimerFreq(sampRate);
 80053ba:	4b14      	ldr	r3, [pc, #80]	@ (800540c <dso_increase+0x16c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	0018      	movs	r0, r3
 80053c0:	f7fe ffb6 	bl	8004330 <SetTimerFreq>
            break;
 80053c4:	46c0      	nop			@ (mov r8, r8)
    }
    HAL_Delay(150);
 80053c6:	2096      	movs	r0, #150	@ 0x96
 80053c8:	f000 fc58 	bl	8005c7c <HAL_Delay>
}
 80053cc:	46c0      	nop			@ (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	46c0      	nop			@ (mov r8, r8)
 80053d4:	20000768 	.word	0x20000768
 80053d8:	0800ec2c 	.word	0x0800ec2c
 80053dc:	20000008 	.word	0x20000008
 80053e0:	41100000 	.word	0x41100000
 80053e4:	200005d4 	.word	0x200005d4
 80053e8:	9999999a 	.word	0x9999999a
 80053ec:	3fb99999 	.word	0x3fb99999
 80053f0:	2000000c 	.word	0x2000000c
 80053f4:	20000004 	.word	0x20000004
 80053f8:	20000010 	.word	0x20000010
 80053fc:	447a0000 	.word	0x447a0000
 8005400:	42c80000 	.word	0x42c80000
 8005404:	41200000 	.word	0x41200000
 8005408:	4b742400 	.word	0x4b742400
 800540c:	200005d8 	.word	0x200005d8
 8005410:	200005dc 	.word	0x200005dc

08005414 <dso_decrease>:

void dso_decrease(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
    switch (sel)
 8005418:	4b4f      	ldr	r3, [pc, #316]	@ (8005558 <dso_decrease+0x144>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b04      	cmp	r3, #4
 8005420:	d900      	bls.n	8005424 <dso_decrease+0x10>
 8005422:	e093      	b.n	800554c <dso_decrease+0x138>
 8005424:	009a      	lsls	r2, r3, #2
 8005426:	4b4d      	ldr	r3, [pc, #308]	@ (800555c <dso_decrease+0x148>)
 8005428:	18d3      	adds	r3, r2, r3
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	469f      	mov	pc, r3
    {
        case 0: if (vdiv > 0.5) vdiv -= 0.5; break;
 800542e:	4b4c      	ldr	r3, [pc, #304]	@ (8005560 <dso_decrease+0x14c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	21fc      	movs	r1, #252	@ 0xfc
 8005434:	0589      	lsls	r1, r1, #22
 8005436:	1c18      	adds	r0, r3, #0
 8005438:	f7fb f85a 	bl	80004f0 <__aeabi_fcmpgt>
 800543c:	1e03      	subs	r3, r0, #0
 800543e:	d100      	bne.n	8005442 <dso_decrease+0x2e>
 8005440:	e084      	b.n	800554c <dso_decrease+0x138>
 8005442:	4b47      	ldr	r3, [pc, #284]	@ (8005560 <dso_decrease+0x14c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	21fc      	movs	r1, #252	@ 0xfc
 8005448:	0589      	lsls	r1, r1, #22
 800544a:	1c18      	adds	r0, r3, #0
 800544c:	f7fb fd98 	bl	8000f80 <__aeabi_fsub>
 8005450:	1c03      	adds	r3, r0, #0
 8005452:	1c1a      	adds	r2, r3, #0
 8005454:	4b42      	ldr	r3, [pc, #264]	@ (8005560 <dso_decrease+0x14c>)
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e078      	b.n	800554c <dso_decrease+0x138>
        case 1: trigVoltage -= 0.1; break;
 800545a:	4b42      	ldr	r3, [pc, #264]	@ (8005564 <dso_decrease+0x150>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	1c18      	adds	r0, r3, #0
 8005460:	f7fd fe5a 	bl	8003118 <__aeabi_f2d>
 8005464:	4a40      	ldr	r2, [pc, #256]	@ (8005568 <dso_decrease+0x154>)
 8005466:	4b41      	ldr	r3, [pc, #260]	@ (800556c <dso_decrease+0x158>)
 8005468:	f7fd fa0a 	bl	8002880 <__aeabi_dsub>
 800546c:	0002      	movs	r2, r0
 800546e:	000b      	movs	r3, r1
 8005470:	0010      	movs	r0, r2
 8005472:	0019      	movs	r1, r3
 8005474:	f7fd fe98 	bl	80031a8 <__aeabi_d2f>
 8005478:	1c02      	adds	r2, r0, #0
 800547a:	4b3a      	ldr	r3, [pc, #232]	@ (8005564 <dso_decrease+0x150>)
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e065      	b.n	800554c <dso_decrease+0x138>
        case 2: trig = FALLING; break;
 8005480:	4b3b      	ldr	r3, [pc, #236]	@ (8005570 <dso_decrease+0x15c>)
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e061      	b.n	800554c <dso_decrease+0x138>
        case 3: atten = 1; break;
 8005488:	4b3a      	ldr	r3, [pc, #232]	@ (8005574 <dso_decrease+0x160>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	e05d      	b.n	800554c <dso_decrease+0x138>
        case 4:
            if (tdiv > 10)
 8005490:	4b39      	ldr	r3, [pc, #228]	@ (8005578 <dso_decrease+0x164>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4939      	ldr	r1, [pc, #228]	@ (800557c <dso_decrease+0x168>)
 8005496:	1c18      	adds	r0, r3, #0
 8005498:	f7fb f82a 	bl	80004f0 <__aeabi_fcmpgt>
 800549c:	1e03      	subs	r3, r0, #0
 800549e:	d037      	beq.n	8005510 <dso_decrease+0xfc>
            {
                if (tdiv > 1000) tdiv -= 1000;
 80054a0:	4b35      	ldr	r3, [pc, #212]	@ (8005578 <dso_decrease+0x164>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4936      	ldr	r1, [pc, #216]	@ (8005580 <dso_decrease+0x16c>)
 80054a6:	1c18      	adds	r0, r3, #0
 80054a8:	f7fb f822 	bl	80004f0 <__aeabi_fcmpgt>
 80054ac:	1e03      	subs	r3, r0, #0
 80054ae:	d00a      	beq.n	80054c6 <dso_decrease+0xb2>
 80054b0:	4b31      	ldr	r3, [pc, #196]	@ (8005578 <dso_decrease+0x164>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4932      	ldr	r1, [pc, #200]	@ (8005580 <dso_decrease+0x16c>)
 80054b6:	1c18      	adds	r0, r3, #0
 80054b8:	f7fb fd62 	bl	8000f80 <__aeabi_fsub>
 80054bc:	1c03      	adds	r3, r0, #0
 80054be:	1c1a      	adds	r2, r3, #0
 80054c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005578 <dso_decrease+0x164>)
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e024      	b.n	8005510 <dso_decrease+0xfc>
                else if (tdiv > 100) tdiv -= 100;
 80054c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005578 <dso_decrease+0x164>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	492e      	ldr	r1, [pc, #184]	@ (8005584 <dso_decrease+0x170>)
 80054cc:	1c18      	adds	r0, r3, #0
 80054ce:	f7fb f80f 	bl	80004f0 <__aeabi_fcmpgt>
 80054d2:	1e03      	subs	r3, r0, #0
 80054d4:	d00a      	beq.n	80054ec <dso_decrease+0xd8>
 80054d6:	4b28      	ldr	r3, [pc, #160]	@ (8005578 <dso_decrease+0x164>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	492a      	ldr	r1, [pc, #168]	@ (8005584 <dso_decrease+0x170>)
 80054dc:	1c18      	adds	r0, r3, #0
 80054de:	f7fb fd4f 	bl	8000f80 <__aeabi_fsub>
 80054e2:	1c03      	adds	r3, r0, #0
 80054e4:	1c1a      	adds	r2, r3, #0
 80054e6:	4b24      	ldr	r3, [pc, #144]	@ (8005578 <dso_decrease+0x164>)
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e011      	b.n	8005510 <dso_decrease+0xfc>
                else if (tdiv > 10) tdiv -= 10;
 80054ec:	4b22      	ldr	r3, [pc, #136]	@ (8005578 <dso_decrease+0x164>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4922      	ldr	r1, [pc, #136]	@ (800557c <dso_decrease+0x168>)
 80054f2:	1c18      	adds	r0, r3, #0
 80054f4:	f7fa fffc 	bl	80004f0 <__aeabi_fcmpgt>
 80054f8:	1e03      	subs	r3, r0, #0
 80054fa:	d009      	beq.n	8005510 <dso_decrease+0xfc>
 80054fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005578 <dso_decrease+0x164>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	491e      	ldr	r1, [pc, #120]	@ (800557c <dso_decrease+0x168>)
 8005502:	1c18      	adds	r0, r3, #0
 8005504:	f7fb fd3c 	bl	8000f80 <__aeabi_fsub>
 8005508:	1c03      	adds	r3, r0, #0
 800550a:	1c1a      	adds	r2, r3, #0
 800550c:	4b1a      	ldr	r3, [pc, #104]	@ (8005578 <dso_decrease+0x164>)
 800550e:	601a      	str	r2, [r3, #0]
            }
            sampRate = (PIXDIV * 1000 * 1000) / tdiv;
 8005510:	4b19      	ldr	r3, [pc, #100]	@ (8005578 <dso_decrease+0x164>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	1c19      	adds	r1, r3, #0
 8005516:	481c      	ldr	r0, [pc, #112]	@ (8005588 <dso_decrease+0x174>)
 8005518:	f7fb fa0e 	bl	8000938 <__aeabi_fdiv>
 800551c:	1c03      	adds	r3, r0, #0
 800551e:	1c18      	adds	r0, r3, #0
 8005520:	f7fa fffa 	bl	8000518 <__aeabi_f2uiz>
 8005524:	0002      	movs	r2, r0
 8005526:	4b19      	ldr	r3, [pc, #100]	@ (800558c <dso_decrease+0x178>)
 8005528:	601a      	str	r2, [r3, #0]
            sampPer = tdiv / (float)PIXDIV;
 800552a:	4b13      	ldr	r3, [pc, #76]	@ (8005578 <dso_decrease+0x164>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2183      	movs	r1, #131	@ 0x83
 8005530:	05c9      	lsls	r1, r1, #23
 8005532:	1c18      	adds	r0, r3, #0
 8005534:	f7fb fa00 	bl	8000938 <__aeabi_fdiv>
 8005538:	1c03      	adds	r3, r0, #0
 800553a:	1c1a      	adds	r2, r3, #0
 800553c:	4b14      	ldr	r3, [pc, #80]	@ (8005590 <dso_decrease+0x17c>)
 800553e:	601a      	str	r2, [r3, #0]
            SetTimerFreq(sampRate);
 8005540:	4b12      	ldr	r3, [pc, #72]	@ (800558c <dso_decrease+0x178>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	0018      	movs	r0, r3
 8005546:	f7fe fef3 	bl	8004330 <SetTimerFreq>
            break;
 800554a:	46c0      	nop			@ (mov r8, r8)
    }
    HAL_Delay(150);
 800554c:	2096      	movs	r0, #150	@ 0x96
 800554e:	f000 fb95 	bl	8005c7c <HAL_Delay>
}
 8005552:	46c0      	nop			@ (mov r8, r8)
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000768 	.word	0x20000768
 800555c:	0800ec40 	.word	0x0800ec40
 8005560:	20000008 	.word	0x20000008
 8005564:	200005d4 	.word	0x200005d4
 8005568:	9999999a 	.word	0x9999999a
 800556c:	3fb99999 	.word	0x3fb99999
 8005570:	2000000c 	.word	0x2000000c
 8005574:	20000004 	.word	0x20000004
 8005578:	20000010 	.word	0x20000010
 800557c:	41200000 	.word	0x41200000
 8005580:	447a0000 	.word	0x447a0000
 8005584:	42c80000 	.word	0x42c80000
 8005588:	4b742400 	.word	0x4b742400
 800558c:	200005d8 	.word	0x200005d8
 8005590:	200005dc 	.word	0x200005dc

08005594 <dso_select>:

void dso_select(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
    sel++;
 8005598:	4b0a      	ldr	r3, [pc, #40]	@ (80055c4 <dso_select+0x30>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	3301      	adds	r3, #1
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	4b08      	ldr	r3, [pc, #32]	@ (80055c4 <dso_select+0x30>)
 80055a4:	701a      	strb	r2, [r3, #0]
    if (sel > 4) sel = 0;
 80055a6:	4b07      	ldr	r3, [pc, #28]	@ (80055c4 <dso_select+0x30>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d902      	bls.n	80055b6 <dso_select+0x22>
 80055b0:	4b04      	ldr	r3, [pc, #16]	@ (80055c4 <dso_select+0x30>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
    HAL_Delay(150);
 80055b6:	2096      	movs	r0, #150	@ 0x96
 80055b8:	f000 fb60 	bl	8005c7c <HAL_Delay>
}
 80055bc:	46c0      	nop			@ (mov r8, r8)
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	46c0      	nop			@ (mov r8, r8)
 80055c4:	20000768 	.word	0x20000768

080055c8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	0002      	movs	r2, r0
 80055d0:	1dbb      	adds	r3, r7, #6
 80055d2:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 80055d4:	1dbb      	adds	r3, r7, #6
 80055d6:	881a      	ldrh	r2, [r3, #0]
 80055d8:	2380      	movs	r3, #128	@ 0x80
 80055da:	019b      	lsls	r3, r3, #6
 80055dc:	429a      	cmp	r2, r3
 80055de:	d10b      	bne.n	80055f8 <HAL_GPIO_EXTI_Callback+0x30>
 80055e0:	2380      	movs	r3, #128	@ 0x80
 80055e2:	019b      	lsls	r3, r3, #6
 80055e4:	4a19      	ldr	r2, [pc, #100]	@ (800564c <HAL_GPIO_EXTI_Callback+0x84>)
 80055e6:	0019      	movs	r1, r3
 80055e8:	0010      	movs	r0, r2
 80055ea:	f001 fb5f 	bl	8006cac <HAL_GPIO_ReadPin>
 80055ee:	1e03      	subs	r3, r0, #0
 80055f0:	d102      	bne.n	80055f8 <HAL_GPIO_EXTI_Callback+0x30>
    {
        dso_decrease();
 80055f2:	f7ff ff0f 	bl	8005414 <dso_decrease>
 80055f6:	e025      	b.n	8005644 <HAL_GPIO_EXTI_Callback+0x7c>
    }
    else if (GPIO_Pin == GPIO_PIN_11 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET)
 80055f8:	1dbb      	adds	r3, r7, #6
 80055fa:	881a      	ldrh	r2, [r3, #0]
 80055fc:	2380      	movs	r3, #128	@ 0x80
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	429a      	cmp	r2, r3
 8005602:	d10c      	bne.n	800561e <HAL_GPIO_EXTI_Callback+0x56>
 8005604:	2380      	movs	r3, #128	@ 0x80
 8005606:	011a      	lsls	r2, r3, #4
 8005608:	2390      	movs	r3, #144	@ 0x90
 800560a:	05db      	lsls	r3, r3, #23
 800560c:	0011      	movs	r1, r2
 800560e:	0018      	movs	r0, r3
 8005610:	f001 fb4c 	bl	8006cac <HAL_GPIO_ReadPin>
 8005614:	1e03      	subs	r3, r0, #0
 8005616:	d102      	bne.n	800561e <HAL_GPIO_EXTI_Callback+0x56>
    {
        dso_select();
 8005618:	f7ff ffbc 	bl	8005594 <dso_select>
 800561c:	e012      	b.n	8005644 <HAL_GPIO_EXTI_Callback+0x7c>
    }
    else if (GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_RESET)
 800561e:	1dbb      	adds	r3, r7, #6
 8005620:	881a      	ldrh	r2, [r3, #0]
 8005622:	2380      	movs	r3, #128	@ 0x80
 8005624:	015b      	lsls	r3, r3, #5
 8005626:	429a      	cmp	r2, r3
 8005628:	d10c      	bne.n	8005644 <HAL_GPIO_EXTI_Callback+0x7c>
 800562a:	2380      	movs	r3, #128	@ 0x80
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	2390      	movs	r3, #144	@ 0x90
 8005630:	05db      	lsls	r3, r3, #23
 8005632:	0011      	movs	r1, r2
 8005634:	0018      	movs	r0, r3
 8005636:	f001 fb39 	bl	8006cac <HAL_GPIO_ReadPin>
 800563a:	1e03      	subs	r3, r0, #0
 800563c:	d102      	bne.n	8005644 <HAL_GPIO_EXTI_Callback+0x7c>
    {
        dso_increase();
 800563e:	f7ff fe2f 	bl	80052a0 <dso_increase>
    }
}
 8005642:	e7ff      	b.n	8005644 <HAL_GPIO_EXTI_Callback+0x7c>
 8005644:	46c0      	nop			@ (mov r8, r8)
 8005646:	46bd      	mov	sp, r7
 8005648:	b002      	add	sp, #8
 800564a:	bd80      	pop	{r7, pc}
 800564c:	48000400 	.word	0x48000400

08005650 <adcToVoltage>:
extern float offsetVoltage;

uint8_t topClip, bottomClip; // Whether or not we're clipping through the graticule
// Convert ADC sample to voltage at ADC input
float adcToVoltage(uint16_t samp)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	0002      	movs	r2, r0
 8005658:	1dbb      	adds	r3, r7, #6
 800565a:	801a      	strh	r2, [r3, #0]
    return (3.3 * samp) / 4096.0;
 800565c:	1dbb      	adds	r3, r7, #6
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	0018      	movs	r0, r3
 8005662:	f7fd fd07 	bl	8003074 <__aeabi_i2d>
 8005666:	4a0b      	ldr	r2, [pc, #44]	@ (8005694 <adcToVoltage+0x44>)
 8005668:	4b0b      	ldr	r3, [pc, #44]	@ (8005698 <adcToVoltage+0x48>)
 800566a:	f7fc fe41 	bl	80022f0 <__aeabi_dmul>
 800566e:	0002      	movs	r2, r0
 8005670:	000b      	movs	r3, r1
 8005672:	0010      	movs	r0, r2
 8005674:	0019      	movs	r1, r3
 8005676:	2200      	movs	r2, #0
 8005678:	4b08      	ldr	r3, [pc, #32]	@ (800569c <adcToVoltage+0x4c>)
 800567a:	f7fc f9f5 	bl	8001a68 <__aeabi_ddiv>
 800567e:	0002      	movs	r2, r0
 8005680:	000b      	movs	r3, r1
 8005682:	0010      	movs	r0, r2
 8005684:	0019      	movs	r1, r3
 8005686:	f7fd fd8f 	bl	80031a8 <__aeabi_d2f>
 800568a:	1c03      	adds	r3, r0, #0
}
 800568c:	1c18      	adds	r0, r3, #0
 800568e:	46bd      	mov	sp, r7
 8005690:	b002      	add	sp, #8
 8005692:	bd80      	pop	{r7, pc}
 8005694:	66666666 	.word	0x66666666
 8005698:	400a6666 	.word	0x400a6666
 800569c:	40b00000 	.word	0x40b00000

080056a0 <findTrigger>:
void findTrigger(uint16_t adcBuf[])
{
 80056a0:	b5b0      	push	{r4, r5, r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
    int trigLevel = (4096.0 * (trigVoltage / (2.0 * atten) + offsetVoltage)) / 3.3; // ADC level at which we should trigger
 80056a8:	4b5c      	ldr	r3, [pc, #368]	@ (800581c <findTrigger+0x17c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	1c18      	adds	r0, r3, #0
 80056ae:	f7fd fd33 	bl	8003118 <__aeabi_f2d>
 80056b2:	0004      	movs	r4, r0
 80056b4:	000d      	movs	r5, r1
 80056b6:	4b5a      	ldr	r3, [pc, #360]	@ (8005820 <findTrigger+0x180>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f7fd fcda 	bl	8003074 <__aeabi_i2d>
 80056c0:	0002      	movs	r2, r0
 80056c2:	000b      	movs	r3, r1
 80056c4:	f7fb fe6c 	bl	80013a0 <__aeabi_dadd>
 80056c8:	0002      	movs	r2, r0
 80056ca:	000b      	movs	r3, r1
 80056cc:	0020      	movs	r0, r4
 80056ce:	0029      	movs	r1, r5
 80056d0:	f7fc f9ca 	bl	8001a68 <__aeabi_ddiv>
 80056d4:	0002      	movs	r2, r0
 80056d6:	000b      	movs	r3, r1
 80056d8:	0014      	movs	r4, r2
 80056da:	001d      	movs	r5, r3
 80056dc:	4b51      	ldr	r3, [pc, #324]	@ (8005824 <findTrigger+0x184>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	1c18      	adds	r0, r3, #0
 80056e2:	f7fd fd19 	bl	8003118 <__aeabi_f2d>
 80056e6:	0002      	movs	r2, r0
 80056e8:	000b      	movs	r3, r1
 80056ea:	0020      	movs	r0, r4
 80056ec:	0029      	movs	r1, r5
 80056ee:	f7fb fe57 	bl	80013a0 <__aeabi_dadd>
 80056f2:	0002      	movs	r2, r0
 80056f4:	000b      	movs	r3, r1
 80056f6:	0010      	movs	r0, r2
 80056f8:	0019      	movs	r1, r3
 80056fa:	2200      	movs	r2, #0
 80056fc:	4b4a      	ldr	r3, [pc, #296]	@ (8005828 <findTrigger+0x188>)
 80056fe:	f7fc fdf7 	bl	80022f0 <__aeabi_dmul>
 8005702:	0002      	movs	r2, r0
 8005704:	000b      	movs	r3, r1
 8005706:	0010      	movs	r0, r2
 8005708:	0019      	movs	r1, r3
 800570a:	4a48      	ldr	r2, [pc, #288]	@ (800582c <findTrigger+0x18c>)
 800570c:	4b48      	ldr	r3, [pc, #288]	@ (8005830 <findTrigger+0x190>)
 800570e:	f7fc f9ab 	bl	8001a68 <__aeabi_ddiv>
 8005712:	0002      	movs	r2, r0
 8005714:	000b      	movs	r3, r1
 8005716:	0010      	movs	r0, r2
 8005718:	0019      	movs	r1, r3
 800571a:	f7fd fc6f 	bl	8002ffc <__aeabi_d2iz>
 800571e:	0003      	movs	r3, r0
 8005720:	60fb      	str	r3, [r7, #12]
    int trigPoint2;                                                                 // another trigger point, this will help us determine the period of the signal

    trigPoint = 0;
 8005722:	4b44      	ldr	r3, [pc, #272]	@ (8005834 <findTrigger+0x194>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
    trigged = 0;
 8005728:	4b43      	ldr	r3, [pc, #268]	@ (8005838 <findTrigger+0x198>)
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
    measuredFreq = 0;
 800572e:	4b43      	ldr	r3, [pc, #268]	@ (800583c <findTrigger+0x19c>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

    // The trigged variable will be 0 if we're not triggering, 1 if we only found 1 trigger point and 2 if we have at least two trigger points

    for (int i = 1; i < BUFFER_LEN / 2 && trigged != 2; i++) // we're looking for trigger points in the first half of the buffer
 8005734:	2301      	movs	r3, #1
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	e044      	b.n	80057c4 <findTrigger+0x124>
        if ((trig == RISING && adcBuf[i] >= trigLevel && adcBuf[i - 1] < trigLevel) || (trig == FALLING && adcBuf[i] <= trigLevel && adcBuf[i - 1] > trigLevel))
 800573a:	4b41      	ldr	r3, [pc, #260]	@ (8005840 <findTrigger+0x1a0>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d114      	bne.n	800576c <findTrigger+0xcc>
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	18d3      	adds	r3, r2, r3
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	001a      	movs	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4293      	cmp	r3, r2
 8005752:	dc0b      	bgt.n	800576c <findTrigger+0xcc>
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4a3b      	ldr	r2, [pc, #236]	@ (8005844 <findTrigger+0x1a4>)
 8005758:	4694      	mov	ip, r2
 800575a:	4463      	add	r3, ip
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	18d3      	adds	r3, r2, r3
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	001a      	movs	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4293      	cmp	r3, r2
 800576a:	dc18      	bgt.n	800579e <findTrigger+0xfe>
 800576c:	4b34      	ldr	r3, [pc, #208]	@ (8005840 <findTrigger+0x1a0>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d124      	bne.n	80057be <findTrigger+0x11e>
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	18d3      	adds	r3, r2, r3
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	001a      	movs	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4293      	cmp	r3, r2
 8005784:	db1b      	blt.n	80057be <findTrigger+0x11e>
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4a2e      	ldr	r2, [pc, #184]	@ (8005844 <findTrigger+0x1a4>)
 800578a:	4694      	mov	ip, r2
 800578c:	4463      	add	r3, ip
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	18d3      	adds	r3, r2, r3
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	001a      	movs	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4293      	cmp	r3, r2
 800579c:	da0f      	bge.n	80057be <findTrigger+0x11e>
        {
            if (!trigged) // Looking for the first trigger point
 800579e:	4b26      	ldr	r3, [pc, #152]	@ (8005838 <findTrigger+0x198>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <findTrigger+0x114>
            {
                trigPoint = i;
 80057a6:	4b23      	ldr	r3, [pc, #140]	@ (8005834 <findTrigger+0x194>)
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	601a      	str	r2, [r3, #0]
                trigged = 1;
 80057ac:	4b22      	ldr	r3, [pc, #136]	@ (8005838 <findTrigger+0x198>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	e004      	b.n	80057be <findTrigger+0x11e>
            }
            else // Looking for the second one
            {
                trigPoint2 = i;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	617b      	str	r3, [r7, #20]
                trigged = 2;
 80057b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005838 <findTrigger+0x198>)
 80057ba:	2202      	movs	r2, #2
 80057bc:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i < BUFFER_LEN / 2 && trigged != 2; i++) // we're looking for trigger points in the first half of the buffer
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	3301      	adds	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2bef      	cmp	r3, #239	@ 0xef
 80057c8:	dc03      	bgt.n	80057d2 <findTrigger+0x132>
 80057ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005838 <findTrigger+0x198>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d1b3      	bne.n	800573a <findTrigger+0x9a>
            }
        }

    if (trigged == 2) // If we found at least two trigger points
 80057d2:	4b19      	ldr	r3, [pc, #100]	@ (8005838 <findTrigger+0x198>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d11b      	bne.n	8005812 <findTrigger+0x172>
    {
        sigPer = sampPer * (trigPoint2 - trigPoint); // we compute the period of the signal in uS
 80057da:	4b16      	ldr	r3, [pc, #88]	@ (8005834 <findTrigger+0x194>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	0018      	movs	r0, r3
 80057e4:	f7fb fd90 	bl	8001308 <__aeabi_i2f>
 80057e8:	1c02      	adds	r2, r0, #0
 80057ea:	4b17      	ldr	r3, [pc, #92]	@ (8005848 <findTrigger+0x1a8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	1c19      	adds	r1, r3, #0
 80057f0:	1c10      	adds	r0, r2, #0
 80057f2:	f7fb fa87 	bl	8000d04 <__aeabi_fmul>
 80057f6:	1c03      	adds	r3, r0, #0
 80057f8:	1c1a      	adds	r2, r3, #0
 80057fa:	4b14      	ldr	r3, [pc, #80]	@ (800584c <findTrigger+0x1ac>)
 80057fc:	601a      	str	r2, [r3, #0]
        measuredFreq = 1000000.0 / sigPer;           // and then we convert it into frequency, in Hz
 80057fe:	4b13      	ldr	r3, [pc, #76]	@ (800584c <findTrigger+0x1ac>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	1c19      	adds	r1, r3, #0
 8005804:	4812      	ldr	r0, [pc, #72]	@ (8005850 <findTrigger+0x1b0>)
 8005806:	f7fb f897 	bl	8000938 <__aeabi_fdiv>
 800580a:	1c03      	adds	r3, r0, #0
 800580c:	1c1a      	adds	r2, r3, #0
 800580e:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <findTrigger+0x19c>)
 8005810:	601a      	str	r2, [r3, #0]
    }
}
 8005812:	46c0      	nop			@ (mov r8, r8)
 8005814:	46bd      	mov	sp, r7
 8005816:	b006      	add	sp, #24
 8005818:	bdb0      	pop	{r4, r5, r7, pc}
 800581a:	46c0      	nop			@ (mov r8, r8)
 800581c:	200005d4 	.word	0x200005d4
 8005820:	20000004 	.word	0x20000004
 8005824:	20000014 	.word	0x20000014
 8005828:	40b00000 	.word	0x40b00000
 800582c:	66666666 	.word	0x66666666
 8005830:	400a6666 	.word	0x400a6666
 8005834:	200005d0 	.word	0x200005d0
 8005838:	200005cd 	.word	0x200005cd
 800583c:	200005e8 	.word	0x200005e8
 8005840:	2000000c 	.word	0x2000000c
 8005844:	7fffffff 	.word	0x7fffffff
 8005848:	200005dc 	.word	0x200005dc
 800584c:	200005ec 	.word	0x200005ec
 8005850:	49742400 	.word	0x49742400

08005854 <drawGraticule>:

void drawGraticule(uint16_t divx, uint16_t divy, uint16_t pix)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	0004      	movs	r4, r0
 800585c:	0008      	movs	r0, r1
 800585e:	0011      	movs	r1, r2
 8005860:	1dbb      	adds	r3, r7, #6
 8005862:	1c22      	adds	r2, r4, #0
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	1d3b      	adds	r3, r7, #4
 8005868:	1c02      	adds	r2, r0, #0
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	1cbb      	adds	r3, r7, #2
 800586e:	1c0a      	adds	r2, r1, #0
 8005870:	801a      	strh	r2, [r3, #0]
    uint16_t wit = divx * pix;
 8005872:	230e      	movs	r3, #14
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	1dba      	adds	r2, r7, #6
 8005878:	1cb9      	adds	r1, r7, #2
 800587a:	8812      	ldrh	r2, [r2, #0]
 800587c:	8809      	ldrh	r1, [r1, #0]
 800587e:	434a      	muls	r2, r1
 8005880:	801a      	strh	r2, [r3, #0]
    uint16_t hei = divy * pix;
 8005882:	230c      	movs	r3, #12
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	1d3a      	adds	r2, r7, #4
 8005888:	1cb9      	adds	r1, r7, #2
 800588a:	8812      	ldrh	r2, [r2, #0]
 800588c:	8809      	ldrh	r1, [r1, #0]
 800588e:	434a      	muls	r2, r1
 8005890:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i <= wit; i += pix)
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e00e      	b.n	80058b6 <drawGraticule+0x62>
    ILI9341_DrawVLine(i, 0, hei, WHITE);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	b298      	uxth	r0, r3
 800589c:	4917      	ldr	r1, [pc, #92]	@ (80058fc <drawGraticule+0xa8>)
 800589e:	230c      	movs	r3, #12
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	881a      	ldrh	r2, [r3, #0]
 80058a4:	000b      	movs	r3, r1
 80058a6:	2100      	movs	r1, #0
 80058a8:	f7fe fc70 	bl	800418c <ILI9341_DrawVLine>
    for (int i = 0; i <= wit; i += pix)
 80058ac:	1cbb      	adds	r3, r7, #2
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	18d3      	adds	r3, r2, r3
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	230e      	movs	r3, #14
 80058b8:	18fb      	adds	r3, r7, r3
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	429a      	cmp	r2, r3
 80058c0:	ddea      	ble.n	8005898 <drawGraticule+0x44>

    for (int i = 0; i <= hei; i += pix)
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	e00e      	b.n	80058e6 <drawGraticule+0x92>
    ILI9341_DrawHLine(0, i, wit, WHITE);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	b299      	uxth	r1, r3
 80058cc:	480b      	ldr	r0, [pc, #44]	@ (80058fc <drawGraticule+0xa8>)
 80058ce:	230e      	movs	r3, #14
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	0003      	movs	r3, r0
 80058d6:	2000      	movs	r0, #0
 80058d8:	f7fe fc02 	bl	80040e0 <ILI9341_DrawHLine>
    for (int i = 0; i <= hei; i += pix)
 80058dc:	1cbb      	adds	r3, r7, #2
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	18d3      	adds	r3, r2, r3
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	230c      	movs	r3, #12
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	ddea      	ble.n	80058c8 <drawGraticule+0x74>
}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	46c0      	nop			@ (mov r8, r8)
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b007      	add	sp, #28
 80058fa:	bd90      	pop	{r4, r7, pc}
 80058fc:	0000ffff 	.word	0x0000ffff

08005900 <drawTrace>:

// Draw the waveform trace on the screen
void drawTrace(uint16_t buf[], uint16_t trigPoint, uint16_t col)
{
 8005900:	b5b0      	push	{r4, r5, r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af02      	add	r7, sp, #8
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	0008      	movs	r0, r1
 800590a:	0011      	movs	r1, r2
 800590c:	1cbb      	adds	r3, r7, #2
 800590e:	1c02      	adds	r2, r0, #0
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	003b      	movs	r3, r7
 8005914:	1c0a      	adds	r2, r1, #0
 8005916:	801a      	strh	r2, [r3, #0]

    maxVoltage = LOWER_VOLTAGE;
 8005918:	4b7b      	ldr	r3, [pc, #492]	@ (8005b08 <drawTrace+0x208>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	0018      	movs	r0, r3
 800591e:	f7fd fba9 	bl	8003074 <__aeabi_i2d>
 8005922:	4a7a      	ldr	r2, [pc, #488]	@ (8005b0c <drawTrace+0x20c>)
 8005924:	4b7a      	ldr	r3, [pc, #488]	@ (8005b10 <drawTrace+0x210>)
 8005926:	f7fc fce3 	bl	80022f0 <__aeabi_dmul>
 800592a:	0002      	movs	r2, r0
 800592c:	000b      	movs	r3, r1
 800592e:	0010      	movs	r0, r2
 8005930:	0019      	movs	r1, r3
 8005932:	f7fd fc39 	bl	80031a8 <__aeabi_d2f>
 8005936:	1c02      	adds	r2, r0, #0
 8005938:	4b76      	ldr	r3, [pc, #472]	@ (8005b14 <drawTrace+0x214>)
 800593a:	601a      	str	r2, [r3, #0]
    minVoltage = UPPER_VOLTAGE;
 800593c:	4b72      	ldr	r3, [pc, #456]	@ (8005b08 <drawTrace+0x208>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	0018      	movs	r0, r3
 8005942:	f7fd fb97 	bl	8003074 <__aeabi_i2d>
 8005946:	4a71      	ldr	r2, [pc, #452]	@ (8005b0c <drawTrace+0x20c>)
 8005948:	4b73      	ldr	r3, [pc, #460]	@ (8005b18 <drawTrace+0x218>)
 800594a:	f7fc fcd1 	bl	80022f0 <__aeabi_dmul>
 800594e:	0002      	movs	r2, r0
 8005950:	000b      	movs	r3, r1
 8005952:	0010      	movs	r0, r2
 8005954:	0019      	movs	r1, r3
 8005956:	f7fd fc27 	bl	80031a8 <__aeabi_d2f>
 800595a:	1c02      	adds	r2, r0, #0
 800595c:	4b6f      	ldr	r3, [pc, #444]	@ (8005b1c <drawTrace+0x21c>)
 800595e:	601a      	str	r2, [r3, #0]

    for (int i = 0; i <= BUFFER_LEN / 2; i++)
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	e0c7      	b.n	8005af6 <drawTrace+0x1f6>
    {
        // If we're looping through the buffer, let's compute the minimum and maximum voltage values while we're at it
        float voltage1 = atten * adcToVoltage(buf[i + trigPoint]);
 8005966:	4b68      	ldr	r3, [pc, #416]	@ (8005b08 <drawTrace+0x208>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	0018      	movs	r0, r3
 800596c:	f7fb fccc 	bl	8001308 <__aeabi_i2f>
 8005970:	1c04      	adds	r4, r0, #0
 8005972:	1cbb      	adds	r3, r7, #2
 8005974:	881a      	ldrh	r2, [r3, #0]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	18d3      	adds	r3, r2, r3
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	18d3      	adds	r3, r2, r3
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	0018      	movs	r0, r3
 8005984:	f7ff fe64 	bl	8005650 <adcToVoltage>
 8005988:	1c03      	adds	r3, r0, #0
 800598a:	1c19      	adds	r1, r3, #0
 800598c:	1c20      	adds	r0, r4, #0
 800598e:	f7fb f9b9 	bl	8000d04 <__aeabi_fmul>
 8005992:	1c03      	adds	r3, r0, #0
 8005994:	60fb      	str	r3, [r7, #12]
        float voltage2 = atten * adcToVoltage(buf[i + trigPoint + 1]);
 8005996:	4b5c      	ldr	r3, [pc, #368]	@ (8005b08 <drawTrace+0x208>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	0018      	movs	r0, r3
 800599c:	f7fb fcb4 	bl	8001308 <__aeabi_i2f>
 80059a0:	1c04      	adds	r4, r0, #0
 80059a2:	1cbb      	adds	r3, r7, #2
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	18d3      	adds	r3, r2, r3
 80059aa:	3301      	adds	r3, #1
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	18d3      	adds	r3, r2, r3
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	0018      	movs	r0, r3
 80059b6:	f7ff fe4b 	bl	8005650 <adcToVoltage>
 80059ba:	1c03      	adds	r3, r0, #0
 80059bc:	1c19      	adds	r1, r3, #0
 80059be:	1c20      	adds	r0, r4, #0
 80059c0:	f7fb f9a0 	bl	8000d04 <__aeabi_fmul>
 80059c4:	1c03      	adds	r3, r0, #0
 80059c6:	60bb      	str	r3, [r7, #8]
        if (voltage2 > maxVoltage)
 80059c8:	4b52      	ldr	r3, [pc, #328]	@ (8005b14 <drawTrace+0x214>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	1c19      	adds	r1, r3, #0
 80059ce:	68b8      	ldr	r0, [r7, #8]
 80059d0:	f7fa fd8e 	bl	80004f0 <__aeabi_fcmpgt>
 80059d4:	1e03      	subs	r3, r0, #0
 80059d6:	d002      	beq.n	80059de <drawTrace+0xde>
            maxVoltage = voltage2;
 80059d8:	4b4e      	ldr	r3, [pc, #312]	@ (8005b14 <drawTrace+0x214>)
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	601a      	str	r2, [r3, #0]
        if (voltage2 < minVoltage)
 80059de:	4b4f      	ldr	r3, [pc, #316]	@ (8005b1c <drawTrace+0x21c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	1c19      	adds	r1, r3, #0
 80059e4:	68b8      	ldr	r0, [r7, #8]
 80059e6:	f7fa fd6f 	bl	80004c8 <__aeabi_fcmplt>
 80059ea:	1e03      	subs	r3, r0, #0
 80059ec:	d002      	beq.n	80059f4 <drawTrace+0xf4>
            minVoltage = voltage2;
 80059ee:	4b4b      	ldr	r3, [pc, #300]	@ (8005b1c <drawTrace+0x21c>)
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	601a      	str	r2, [r3, #0]

        // Draw lines between sample points
        topClip = 0;
 80059f4:	4b4a      	ldr	r3, [pc, #296]	@ (8005b20 <drawTrace+0x220>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	701a      	strb	r2, [r3, #0]
        bottomClip = 0;
 80059fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005b24 <drawTrace+0x224>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
        int16_t y1 = (PIXDIV * YDIV / 2 - 1) - (voltage1 * PIXDIV / vdiv);
 8005a00:	2183      	movs	r1, #131	@ 0x83
 8005a02:	05c9      	lsls	r1, r1, #23
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7fb f97d 	bl	8000d04 <__aeabi_fmul>
 8005a0a:	1c03      	adds	r3, r0, #0
 8005a0c:	1c1a      	adds	r2, r3, #0
 8005a0e:	4b46      	ldr	r3, [pc, #280]	@ (8005b28 <drawTrace+0x228>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	1c19      	adds	r1, r3, #0
 8005a14:	1c10      	adds	r0, r2, #0
 8005a16:	f7fa ff8f 	bl	8000938 <__aeabi_fdiv>
 8005a1a:	1c03      	adds	r3, r0, #0
 8005a1c:	1c19      	adds	r1, r3, #0
 8005a1e:	4843      	ldr	r0, [pc, #268]	@ (8005b2c <drawTrace+0x22c>)
 8005a20:	f7fb faae 	bl	8000f80 <__aeabi_fsub>
 8005a24:	1c03      	adds	r3, r0, #0
 8005a26:	2512      	movs	r5, #18
 8005a28:	197c      	adds	r4, r7, r5
 8005a2a:	1c18      	adds	r0, r3, #0
 8005a2c:	f7fb fc4c 	bl	80012c8 <__aeabi_f2iz>
 8005a30:	0003      	movs	r3, r0
 8005a32:	8023      	strh	r3, [r4, #0]
        int16_t y2 = (PIXDIV * YDIV / 2 - 1) - (voltage2 * PIXDIV / vdiv);
 8005a34:	2183      	movs	r1, #131	@ 0x83
 8005a36:	05c9      	lsls	r1, r1, #23
 8005a38:	68b8      	ldr	r0, [r7, #8]
 8005a3a:	f7fb f963 	bl	8000d04 <__aeabi_fmul>
 8005a3e:	1c03      	adds	r3, r0, #0
 8005a40:	1c1a      	adds	r2, r3, #0
 8005a42:	4b39      	ldr	r3, [pc, #228]	@ (8005b28 <drawTrace+0x228>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	1c19      	adds	r1, r3, #0
 8005a48:	1c10      	adds	r0, r2, #0
 8005a4a:	f7fa ff75 	bl	8000938 <__aeabi_fdiv>
 8005a4e:	1c03      	adds	r3, r0, #0
 8005a50:	1c19      	adds	r1, r3, #0
 8005a52:	4836      	ldr	r0, [pc, #216]	@ (8005b2c <drawTrace+0x22c>)
 8005a54:	f7fb fa94 	bl	8000f80 <__aeabi_fsub>
 8005a58:	1c03      	adds	r3, r0, #0
 8005a5a:	2210      	movs	r2, #16
 8005a5c:	18bc      	adds	r4, r7, r2
 8005a5e:	1c18      	adds	r0, r3, #0
 8005a60:	f7fb fc32 	bl	80012c8 <__aeabi_f2iz>
 8005a64:	0003      	movs	r3, r0
 8005a66:	8023      	strh	r3, [r4, #0]
        if (y1 > YDIV * PIXDIV)
 8005a68:	197b      	adds	r3, r7, r5
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	5e9b      	ldrsh	r3, [r3, r2]
 8005a6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a70:	dd05      	ble.n	8005a7e <drawTrace+0x17e>
        {
            y1 = YDIV * PIXDIV;
 8005a72:	197b      	adds	r3, r7, r5
 8005a74:	22a0      	movs	r2, #160	@ 0xa0
 8005a76:	801a      	strh	r2, [r3, #0]
            bottomClip = 1;
 8005a78:	4b2a      	ldr	r3, [pc, #168]	@ (8005b24 <drawTrace+0x224>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	701a      	strb	r2, [r3, #0]
        }
        if (y2 > YDIV * PIXDIV)
 8005a7e:	2210      	movs	r2, #16
 8005a80:	18bb      	adds	r3, r7, r2
 8005a82:	2100      	movs	r1, #0
 8005a84:	5e5b      	ldrsh	r3, [r3, r1]
 8005a86:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a88:	dd05      	ble.n	8005a96 <drawTrace+0x196>
        {
            y2 = YDIV * PIXDIV;
 8005a8a:	18bb      	adds	r3, r7, r2
 8005a8c:	22a0      	movs	r2, #160	@ 0xa0
 8005a8e:	801a      	strh	r2, [r3, #0]
            bottomClip = 1;
 8005a90:	4b24      	ldr	r3, [pc, #144]	@ (8005b24 <drawTrace+0x224>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	701a      	strb	r2, [r3, #0]
        }
        if (y1 < 0)
 8005a96:	2212      	movs	r2, #18
 8005a98:	18bb      	adds	r3, r7, r2
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	5e5b      	ldrsh	r3, [r3, r1]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	da05      	bge.n	8005aae <drawTrace+0x1ae>
        {
            y1 = 0;
 8005aa2:	18bb      	adds	r3, r7, r2
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	801a      	strh	r2, [r3, #0]
            topClip = 1;
 8005aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b20 <drawTrace+0x220>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	701a      	strb	r2, [r3, #0]
        }
        if (y2 < 0)
 8005aae:	2210      	movs	r2, #16
 8005ab0:	18bb      	adds	r3, r7, r2
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	5e5b      	ldrsh	r3, [r3, r1]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	da05      	bge.n	8005ac6 <drawTrace+0x1c6>
        {
            y2 = 0;
 8005aba:	18bb      	adds	r3, r7, r2
 8005abc:	2200      	movs	r2, #0
 8005abe:	801a      	strh	r2, [r3, #0]
            topClip = 1;
 8005ac0:	4b17      	ldr	r3, [pc, #92]	@ (8005b20 <drawTrace+0x220>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	701a      	strb	r2, [r3, #0]
        }
        ILI9341_DrawLine(i, y1, i + 1, y2, col);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	b218      	sxth	r0, r3
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	b21a      	sxth	r2, r3
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	2400      	movs	r4, #0
 8005ada:	5f1c      	ldrsh	r4, [r3, r4]
 8005adc:	2312      	movs	r3, #18
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	5e59      	ldrsh	r1, [r3, r1]
 8005ae4:	003b      	movs	r3, r7
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	0023      	movs	r3, r4
 8005aec:	f7fe f994 	bl	8003e18 <ILI9341_DrawLine>
    for (int i = 0; i <= BUFFER_LEN / 2; i++)
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	3301      	adds	r3, #1
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2bf0      	cmp	r3, #240	@ 0xf0
 8005afa:	dc00      	bgt.n	8005afe <drawTrace+0x1fe>
 8005afc:	e733      	b.n	8005966 <drawTrace+0x66>
    }
}
 8005afe:	46c0      	nop			@ (mov r8, r8)
 8005b00:	46c0      	nop			@ (mov r8, r8)
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b006      	add	sp, #24
 8005b06:	bdb0      	pop	{r4, r5, r7, pc}
 8005b08:	20000004 	.word	0x20000004
 8005b0c:	66666666 	.word	0x66666666
 8005b10:	c00a6666 	.word	0xc00a6666
 8005b14:	200005e0 	.word	0x200005e0
 8005b18:	400a6666 	.word	0x400a6666
 8005b1c:	200005e4 	.word	0x200005e4
 8005b20:	20000769 	.word	0x20000769
 8005b24:	2000076a 	.word	0x2000076a
 8005b28:	20000008 	.word	0x20000008
 8005b2c:	429e0000 	.word	0x429e0000

08005b30 <traceScreen>:

// Draw the trace and graticule on the screen
void traceScreen()
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
    drawGraticule(XDIV, YDIV, PIXDIV); // Draw the graticule
 8005b34:	2210      	movs	r2, #16
 8005b36:	210a      	movs	r1, #10
 8005b38:	200f      	movs	r0, #15
 8005b3a:	f7ff fe8b 	bl	8005854 <drawGraticule>
    drawTrace(adcBuf, trigPoint, WAVE_COLOR);
 8005b3e:	4b05      	ldr	r3, [pc, #20]	@ (8005b54 <traceScreen+0x24>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	b299      	uxth	r1, r3
 8005b44:	4a04      	ldr	r2, [pc, #16]	@ (8005b58 <traceScreen+0x28>)
 8005b46:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <traceScreen+0x2c>)
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f7ff fed9 	bl	8005900 <drawTrace>
}
 8005b4e:	46c0      	nop			@ (mov r8, r8)
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	200005d0 	.word	0x200005d0
 8005b58:	0000ffe0 	.word	0x0000ffe0
 8005b5c:	2000020c 	.word	0x2000020c

08005b60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005b60:	480d      	ldr	r0, [pc, #52]	@ (8005b98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005b62:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005b64:	f7ff f8c6 	bl	8004cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b68:	480c      	ldr	r0, [pc, #48]	@ (8005b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8005b6a:	490d      	ldr	r1, [pc, #52]	@ (8005ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba4 <LoopForever+0xe>)
  movs r3, #0
 8005b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b70:	e002      	b.n	8005b78 <LoopCopyDataInit>

08005b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b76:	3304      	adds	r3, #4

08005b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b7c:	d3f9      	bcc.n	8005b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005b80:	4c0a      	ldr	r4, [pc, #40]	@ (8005bac <LoopForever+0x16>)
  movs r3, #0
 8005b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b84:	e001      	b.n	8005b8a <LoopFillZerobss>

08005b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b88:	3204      	adds	r2, #4

08005b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b8c:	d3fb      	bcc.n	8005b86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005b8e:	f003 fec3 	bl	8009918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005b92:	f7fe fbf7 	bl	8004384 <main>

08005b96 <LoopForever>:

LoopForever:
    b LoopForever
 8005b96:	e7fe      	b.n	8005b96 <LoopForever>
  ldr   r0, =_estack
 8005b98:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ba0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8005ba4:	0800f0a8 	.word	0x0800f0a8
  ldr r2, =_sbss
 8005ba8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8005bac:	200008bc 	.word	0x200008bc

08005bb0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005bb0:	e7fe      	b.n	8005bb0 <ADC1_COMP_IRQHandler>
	...

08005bb4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bb8:	4b07      	ldr	r3, [pc, #28]	@ (8005bd8 <HAL_Init+0x24>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <HAL_Init+0x24>)
 8005bbe:	2110      	movs	r1, #16
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	f000 f809 	bl	8005bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bca:	f7fe fe17 	bl	80047fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	46c0      	nop			@ (mov r8, r8)
 8005bd8:	40022000 	.word	0x40022000

08005bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005be4:	4b14      	ldr	r3, [pc, #80]	@ (8005c38 <HAL_InitTick+0x5c>)
 8005be6:	681c      	ldr	r4, [r3, #0]
 8005be8:	4b14      	ldr	r3, [pc, #80]	@ (8005c3c <HAL_InitTick+0x60>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	0019      	movs	r1, r3
 8005bee:	23fa      	movs	r3, #250	@ 0xfa
 8005bf0:	0098      	lsls	r0, r3, #2
 8005bf2:	f7fa faa3 	bl	800013c <__udivsi3>
 8005bf6:	0003      	movs	r3, r0
 8005bf8:	0019      	movs	r1, r3
 8005bfa:	0020      	movs	r0, r4
 8005bfc:	f7fa fa9e 	bl	800013c <__udivsi3>
 8005c00:	0003      	movs	r3, r0
 8005c02:	0018      	movs	r0, r3
 8005c04:	f000 fd17 	bl	8006636 <HAL_SYSTICK_Config>
 8005c08:	1e03      	subs	r3, r0, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e00f      	b.n	8005c30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d80b      	bhi.n	8005c2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	2301      	movs	r3, #1
 8005c1a:	425b      	negs	r3, r3
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f000 fce4 	bl	80065ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c24:	4b06      	ldr	r3, [pc, #24]	@ (8005c40 <HAL_InitTick+0x64>)
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	e000      	b.n	8005c30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
}
 8005c30:	0018      	movs	r0, r3
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b003      	add	sp, #12
 8005c36:	bd90      	pop	{r4, r7, pc}
 8005c38:	20000018 	.word	0x20000018
 8005c3c:	20000020 	.word	0x20000020
 8005c40:	2000001c 	.word	0x2000001c

08005c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c48:	4b05      	ldr	r3, [pc, #20]	@ (8005c60 <HAL_IncTick+0x1c>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	001a      	movs	r2, r3
 8005c4e:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <HAL_IncTick+0x20>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	18d2      	adds	r2, r2, r3
 8005c54:	4b03      	ldr	r3, [pc, #12]	@ (8005c64 <HAL_IncTick+0x20>)
 8005c56:	601a      	str	r2, [r3, #0]
}
 8005c58:	46c0      	nop			@ (mov r8, r8)
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	46c0      	nop			@ (mov r8, r8)
 8005c60:	20000020 	.word	0x20000020
 8005c64:	2000076c 	.word	0x2000076c

08005c68 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c6c:	4b02      	ldr	r3, [pc, #8]	@ (8005c78 <HAL_GetTick+0x10>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
}
 8005c70:	0018      	movs	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	46c0      	nop			@ (mov r8, r8)
 8005c78:	2000076c 	.word	0x2000076c

08005c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c84:	f7ff fff0 	bl	8005c68 <HAL_GetTick>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	d005      	beq.n	8005ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c96:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc0 <HAL_Delay+0x44>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	001a      	movs	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	189b      	adds	r3, r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005ca2:	46c0      	nop			@ (mov r8, r8)
 8005ca4:	f7ff ffe0 	bl	8005c68 <HAL_GetTick>
 8005ca8:	0002      	movs	r2, r0
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d8f7      	bhi.n	8005ca4 <HAL_Delay+0x28>
  {
  }
}
 8005cb4:	46c0      	nop			@ (mov r8, r8)
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	b004      	add	sp, #16
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	20000020 	.word	0x20000020

08005cc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ccc:	230f      	movs	r3, #15
 8005cce:	18fb      	adds	r3, r7, r3
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e125      	b.n	8005f2e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2234      	movs	r2, #52	@ 0x34
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f7fe fda2 	bl	8004844 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	2210      	movs	r2, #16
 8005d06:	4013      	ands	r3, r2
 8005d08:	d000      	beq.n	8005d0c <HAL_ADC_Init+0x48>
 8005d0a:	e103      	b.n	8005f14 <HAL_ADC_Init+0x250>
 8005d0c:	230f      	movs	r3, #15
 8005d0e:	18fb      	adds	r3, r7, r3
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d000      	beq.n	8005d18 <HAL_ADC_Init+0x54>
 8005d16:	e0fd      	b.n	8005f14 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2204      	movs	r2, #4
 8005d20:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8005d22:	d000      	beq.n	8005d26 <HAL_ADC_Init+0x62>
 8005d24:	e0f6      	b.n	8005f14 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2a:	4a83      	ldr	r2, [pc, #524]	@ (8005f38 <HAL_ADC_Init+0x274>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	2202      	movs	r2, #2
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d112      	bne.n	8005d6a <HAL_ADC_Init+0xa6>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d009      	beq.n	8005d66 <HAL_ADC_Init+0xa2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	2380      	movs	r3, #128	@ 0x80
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	401a      	ands	r2, r3
 8005d5e:	2380      	movs	r3, #128	@ 0x80
 8005d60:	021b      	lsls	r3, r3, #8
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d101      	bne.n	8005d6a <HAL_ADC_Init+0xa6>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <HAL_ADC_Init+0xa8>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d116      	bne.n	8005d9e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2218      	movs	r2, #24
 8005d78:	4393      	bics	r3, r2
 8005d7a:	0019      	movs	r1, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	0899      	lsrs	r1, r3, #2
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4964      	ldr	r1, [pc, #400]	@ (8005f3c <HAL_ADC_Init+0x278>)
 8005daa:	400a      	ands	r2, r1
 8005dac:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	7e1b      	ldrb	r3, [r3, #24]
 8005db2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	7e5b      	ldrb	r3, [r3, #25]
 8005db8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005dba:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7e9b      	ldrb	r3, [r3, #26]
 8005dc0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005dc2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d002      	beq.n	8005dd2 <HAL_ADC_Init+0x10e>
 8005dcc:	2380      	movs	r3, #128	@ 0x80
 8005dce:	015b      	lsls	r3, r3, #5
 8005dd0:	e000      	b.n	8005dd4 <HAL_ADC_Init+0x110>
 8005dd2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005dd4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005dda:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d101      	bne.n	8005de8 <HAL_ADC_Init+0x124>
 8005de4:	2304      	movs	r3, #4
 8005de6:	e000      	b.n	8005dea <HAL_ADC_Init+0x126>
 8005de8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8005dea:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2124      	movs	r1, #36	@ 0x24
 8005df0:	5c5b      	ldrb	r3, [r3, r1]
 8005df2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005df4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	7edb      	ldrb	r3, [r3, #27]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d115      	bne.n	8005e30 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	7e9b      	ldrb	r3, [r3, #26]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2280      	movs	r2, #128	@ 0x80
 8005e10:	0252      	lsls	r2, r2, #9
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60bb      	str	r3, [r7, #8]
 8005e16:	e00b      	b.n	8005e30 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e28:	2201      	movs	r2, #1
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	23c2      	movs	r3, #194	@ 0xc2
 8005e36:	33ff      	adds	r3, #255	@ 0xff
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d007      	beq.n	8005e4c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8005e44:	4313      	orrs	r3, r2
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68d9      	ldr	r1, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e60:	2380      	movs	r3, #128	@ 0x80
 8005e62:	055b      	lsls	r3, r3, #21
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d01b      	beq.n	8005ea0 <HAL_ADC_Init+0x1dc>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d017      	beq.n	8005ea0 <HAL_ADC_Init+0x1dc>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d013      	beq.n	8005ea0 <HAL_ADC_Init+0x1dc>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d00f      	beq.n	8005ea0 <HAL_ADC_Init+0x1dc>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d00b      	beq.n	8005ea0 <HAL_ADC_Init+0x1dc>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8c:	2b05      	cmp	r3, #5
 8005e8e:	d007      	beq.n	8005ea0 <HAL_ADC_Init+0x1dc>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e94:	2b06      	cmp	r3, #6
 8005e96:	d003      	beq.n	8005ea0 <HAL_ADC_Init+0x1dc>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	2b07      	cmp	r3, #7
 8005e9e:	d112      	bne.n	8005ec6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695a      	ldr	r2, [r3, #20]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2107      	movs	r1, #7
 8005eac:	438a      	bics	r2, r1
 8005eae:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6959      	ldr	r1, [r3, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eba:	2207      	movs	r2, #7
 8005ebc:	401a      	ands	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8005f40 <HAL_ADC_Init+0x27c>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d10b      	bne.n	8005eee <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	4393      	bics	r3, r2
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005eec:	e01c      	b.n	8005f28 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef2:	2212      	movs	r2, #18
 8005ef4:	4393      	bics	r3, r2
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f02:	2201      	movs	r2, #1
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8005f0a:	230f      	movs	r3, #15
 8005f0c:	18fb      	adds	r3, r7, r3
 8005f0e:	2201      	movs	r2, #1
 8005f10:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005f12:	e009      	b.n	8005f28 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	2210      	movs	r2, #16
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8005f20:	230f      	movs	r3, #15
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	2201      	movs	r2, #1
 8005f26:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005f28:	230f      	movs	r3, #15
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	781b      	ldrb	r3, [r3, #0]
}
 8005f2e:	0018      	movs	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b004      	add	sp, #16
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	fffffefd 	.word	0xfffffefd
 8005f3c:	fffe0219 	.word	0xfffe0219
 8005f40:	833fffe7 	.word	0x833fffe7

08005f44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f50:	2317      	movs	r3, #23
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2204      	movs	r2, #4
 8005f60:	4013      	ands	r3, r2
 8005f62:	d15e      	bne.n	8006022 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2234      	movs	r2, #52	@ 0x34
 8005f68:	5c9b      	ldrb	r3, [r3, r2]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <HAL_ADC_Start_DMA+0x2e>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e05e      	b.n	8006030 <HAL_ADC_Start_DMA+0xec>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2234      	movs	r2, #52	@ 0x34
 8005f76:	2101      	movs	r1, #1
 8005f78:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	7e5b      	ldrb	r3, [r3, #25]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d007      	beq.n	8005f92 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005f82:	2317      	movs	r3, #23
 8005f84:	18fc      	adds	r4, r7, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f000 f97b 	bl	8006284 <ADC_Enable>
 8005f8e:	0003      	movs	r3, r0
 8005f90:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005f92:	2317      	movs	r3, #23
 8005f94:	18fb      	adds	r3, r7, r3
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d146      	bne.n	800602a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa0:	4a25      	ldr	r2, [pc, #148]	@ (8006038 <HAL_ADC_Start_DMA+0xf4>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2280      	movs	r2, #128	@ 0x80
 8005fa6:	0052      	lsls	r2, r2, #1
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2234      	movs	r2, #52	@ 0x34
 8005fb8:	2100      	movs	r1, #0
 8005fba:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800603c <HAL_ADC_Start_DMA+0xf8>)
 8005fc2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006040 <HAL_ADC_Start_DMA+0xfc>)
 8005fca:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006044 <HAL_ADC_Start_DMA+0x100>)
 8005fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	221c      	movs	r2, #28
 8005fda:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2110      	movs	r1, #16
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3340      	adds	r3, #64	@ 0x40
 8006006:	0019      	movs	r1, r3
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f000 fb68 	bl	80066e0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2104      	movs	r1, #4
 800601c:	430a      	orrs	r2, r1
 800601e:	609a      	str	r2, [r3, #8]
 8006020:	e003      	b.n	800602a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006022:	2317      	movs	r3, #23
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	2202      	movs	r2, #2
 8006028:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800602a:	2317      	movs	r3, #23
 800602c:	18fb      	adds	r3, r7, r3
 800602e:	781b      	ldrb	r3, [r3, #0]
}
 8006030:	0018      	movs	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	b007      	add	sp, #28
 8006036:	bd90      	pop	{r4, r7, pc}
 8006038:	fffff0fe 	.word	0xfffff0fe
 800603c:	0800638d 	.word	0x0800638d
 8006040:	08006441 	.word	0x08006441
 8006044:	0800645f 	.word	0x0800645f

08006048 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006050:	46c0      	nop			@ (mov r8, r8)
 8006052:	46bd      	mov	sp, r7
 8006054:	b002      	add	sp, #8
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006060:	46c0      	nop			@ (mov r8, r8)
 8006062:	46bd      	mov	sp, r7
 8006064:	b002      	add	sp, #8
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006072:	230f      	movs	r3, #15
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006082:	2380      	movs	r3, #128	@ 0x80
 8006084:	055b      	lsls	r3, r3, #21
 8006086:	429a      	cmp	r2, r3
 8006088:	d011      	beq.n	80060ae <HAL_ADC_ConfigChannel+0x46>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608e:	2b01      	cmp	r3, #1
 8006090:	d00d      	beq.n	80060ae <HAL_ADC_ConfigChannel+0x46>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006096:	2b02      	cmp	r3, #2
 8006098:	d009      	beq.n	80060ae <HAL_ADC_ConfigChannel+0x46>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d005      	beq.n	80060ae <HAL_ADC_ConfigChannel+0x46>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d001      	beq.n	80060ae <HAL_ADC_ConfigChannel+0x46>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2234      	movs	r2, #52	@ 0x34
 80060b2:	5c9b      	ldrb	r3, [r3, r2]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_ADC_ConfigChannel+0x54>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e0d0      	b.n	800625e <HAL_ADC_ConfigChannel+0x1f6>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2234      	movs	r2, #52	@ 0x34
 80060c0:	2101      	movs	r1, #1
 80060c2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2204      	movs	r2, #4
 80060cc:	4013      	ands	r3, r2
 80060ce:	d000      	beq.n	80060d2 <HAL_ADC_ConfigChannel+0x6a>
 80060d0:	e0b4      	b.n	800623c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	4a64      	ldr	r2, [pc, #400]	@ (8006268 <HAL_ADC_ConfigChannel+0x200>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d100      	bne.n	80060de <HAL_ADC_ConfigChannel+0x76>
 80060dc:	e082      	b.n	80061e4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2201      	movs	r2, #1
 80060ea:	409a      	lsls	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f8:	2380      	movs	r3, #128	@ 0x80
 80060fa:	055b      	lsls	r3, r3, #21
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d037      	beq.n	8006170 <HAL_ADC_ConfigChannel+0x108>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d033      	beq.n	8006170 <HAL_ADC_ConfigChannel+0x108>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	2b02      	cmp	r3, #2
 800610e:	d02f      	beq.n	8006170 <HAL_ADC_ConfigChannel+0x108>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	2b03      	cmp	r3, #3
 8006116:	d02b      	beq.n	8006170 <HAL_ADC_ConfigChannel+0x108>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	2b04      	cmp	r3, #4
 800611e:	d027      	beq.n	8006170 <HAL_ADC_ConfigChannel+0x108>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006124:	2b05      	cmp	r3, #5
 8006126:	d023      	beq.n	8006170 <HAL_ADC_ConfigChannel+0x108>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612c:	2b06      	cmp	r3, #6
 800612e:	d01f      	beq.n	8006170 <HAL_ADC_ConfigChannel+0x108>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	2b07      	cmp	r3, #7
 8006136:	d01b      	beq.n	8006170 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	2107      	movs	r1, #7
 8006144:	400b      	ands	r3, r1
 8006146:	429a      	cmp	r2, r3
 8006148:	d012      	beq.n	8006170 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2107      	movs	r1, #7
 8006156:	438a      	bics	r2, r1
 8006158:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6959      	ldr	r1, [r3, #20]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2207      	movs	r2, #7
 8006166:	401a      	ands	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b10      	cmp	r3, #16
 8006176:	d007      	beq.n	8006188 <HAL_ADC_ConfigChannel+0x120>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b11      	cmp	r3, #17
 800617e:	d003      	beq.n	8006188 <HAL_ADC_ConfigChannel+0x120>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b12      	cmp	r3, #18
 8006186:	d163      	bne.n	8006250 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006188:	4b38      	ldr	r3, [pc, #224]	@ (800626c <HAL_ADC_ConfigChannel+0x204>)
 800618a:	6819      	ldr	r1, [r3, #0]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b10      	cmp	r3, #16
 8006192:	d009      	beq.n	80061a8 <HAL_ADC_ConfigChannel+0x140>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b11      	cmp	r3, #17
 800619a:	d102      	bne.n	80061a2 <HAL_ADC_ConfigChannel+0x13a>
 800619c:	2380      	movs	r3, #128	@ 0x80
 800619e:	03db      	lsls	r3, r3, #15
 80061a0:	e004      	b.n	80061ac <HAL_ADC_ConfigChannel+0x144>
 80061a2:	2380      	movs	r3, #128	@ 0x80
 80061a4:	045b      	lsls	r3, r3, #17
 80061a6:	e001      	b.n	80061ac <HAL_ADC_ConfigChannel+0x144>
 80061a8:	2380      	movs	r3, #128	@ 0x80
 80061aa:	041b      	lsls	r3, r3, #16
 80061ac:	4a2f      	ldr	r2, [pc, #188]	@ (800626c <HAL_ADC_ConfigChannel+0x204>)
 80061ae:	430b      	orrs	r3, r1
 80061b0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b10      	cmp	r3, #16
 80061b8:	d14a      	bne.n	8006250 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80061ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006270 <HAL_ADC_ConfigChannel+0x208>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	492d      	ldr	r1, [pc, #180]	@ (8006274 <HAL_ADC_ConfigChannel+0x20c>)
 80061c0:	0018      	movs	r0, r3
 80061c2:	f7f9 ffbb 	bl	800013c <__udivsi3>
 80061c6:	0003      	movs	r3, r0
 80061c8:	001a      	movs	r2, r3
 80061ca:	0013      	movs	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80061d4:	e002      	b.n	80061dc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	3b01      	subs	r3, #1
 80061da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f9      	bne.n	80061d6 <HAL_ADC_ConfigChannel+0x16e>
 80061e2:	e035      	b.n	8006250 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2101      	movs	r1, #1
 80061f0:	4099      	lsls	r1, r3
 80061f2:	000b      	movs	r3, r1
 80061f4:	43d9      	mvns	r1, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	400a      	ands	r2, r1
 80061fc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b10      	cmp	r3, #16
 8006204:	d007      	beq.n	8006216 <HAL_ADC_ConfigChannel+0x1ae>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b11      	cmp	r3, #17
 800620c:	d003      	beq.n	8006216 <HAL_ADC_ConfigChannel+0x1ae>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b12      	cmp	r3, #18
 8006214:	d11c      	bne.n	8006250 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006216:	4b15      	ldr	r3, [pc, #84]	@ (800626c <HAL_ADC_ConfigChannel+0x204>)
 8006218:	6819      	ldr	r1, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b10      	cmp	r3, #16
 8006220:	d007      	beq.n	8006232 <HAL_ADC_ConfigChannel+0x1ca>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b11      	cmp	r3, #17
 8006228:	d101      	bne.n	800622e <HAL_ADC_ConfigChannel+0x1c6>
 800622a:	4b13      	ldr	r3, [pc, #76]	@ (8006278 <HAL_ADC_ConfigChannel+0x210>)
 800622c:	e002      	b.n	8006234 <HAL_ADC_ConfigChannel+0x1cc>
 800622e:	4b13      	ldr	r3, [pc, #76]	@ (800627c <HAL_ADC_ConfigChannel+0x214>)
 8006230:	e000      	b.n	8006234 <HAL_ADC_ConfigChannel+0x1cc>
 8006232:	4b13      	ldr	r3, [pc, #76]	@ (8006280 <HAL_ADC_ConfigChannel+0x218>)
 8006234:	4a0d      	ldr	r2, [pc, #52]	@ (800626c <HAL_ADC_ConfigChannel+0x204>)
 8006236:	400b      	ands	r3, r1
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	e009      	b.n	8006250 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006240:	2220      	movs	r2, #32
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006248:	230f      	movs	r3, #15
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	2201      	movs	r2, #1
 800624e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2234      	movs	r2, #52	@ 0x34
 8006254:	2100      	movs	r1, #0
 8006256:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006258:	230f      	movs	r3, #15
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	781b      	ldrb	r3, [r3, #0]
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	00001001 	.word	0x00001001
 800626c:	40012708 	.word	0x40012708
 8006270:	20000018 	.word	0x20000018
 8006274:	000f4240 	.word	0x000f4240
 8006278:	ffbfffff 	.word	0xffbfffff
 800627c:	feffffff 	.word	0xfeffffff
 8006280:	ff7fffff 	.word	0xff7fffff

08006284 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2203      	movs	r2, #3
 800629c:	4013      	ands	r3, r2
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d112      	bne.n	80062c8 <ADC_Enable+0x44>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2201      	movs	r2, #1
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d009      	beq.n	80062c4 <ADC_Enable+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	2380      	movs	r3, #128	@ 0x80
 80062b8:	021b      	lsls	r3, r3, #8
 80062ba:	401a      	ands	r2, r3
 80062bc:	2380      	movs	r3, #128	@ 0x80
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d101      	bne.n	80062c8 <ADC_Enable+0x44>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <ADC_Enable+0x46>
 80062c8:	2300      	movs	r3, #0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d152      	bne.n	8006374 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006380 <ADC_Enable+0xfc>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	d00d      	beq.n	80062f6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062de:	2210      	movs	r2, #16
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ea:	2201      	movs	r2, #1
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e03f      	b.n	8006376 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2101      	movs	r1, #1
 8006302:	430a      	orrs	r2, r1
 8006304:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006306:	4b1f      	ldr	r3, [pc, #124]	@ (8006384 <ADC_Enable+0x100>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	491f      	ldr	r1, [pc, #124]	@ (8006388 <ADC_Enable+0x104>)
 800630c:	0018      	movs	r0, r3
 800630e:	f7f9 ff15 	bl	800013c <__udivsi3>
 8006312:	0003      	movs	r3, r0
 8006314:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006316:	e002      	b.n	800631e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	3b01      	subs	r3, #1
 800631c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1f9      	bne.n	8006318 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006324:	f7ff fca0 	bl	8005c68 <HAL_GetTick>
 8006328:	0003      	movs	r3, r0
 800632a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800632c:	e01b      	b.n	8006366 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800632e:	f7ff fc9b 	bl	8005c68 <HAL_GetTick>
 8006332:	0002      	movs	r2, r0
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d914      	bls.n	8006366 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2201      	movs	r2, #1
 8006344:	4013      	ands	r3, r2
 8006346:	2b01      	cmp	r3, #1
 8006348:	d00d      	beq.n	8006366 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634e:	2210      	movs	r2, #16
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635a:	2201      	movs	r2, #1
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e007      	b.n	8006376 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2201      	movs	r2, #1
 800636e:	4013      	ands	r3, r2
 8006370:	2b01      	cmp	r3, #1
 8006372:	d1dc      	bne.n	800632e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	0018      	movs	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	b004      	add	sp, #16
 800637c:	bd80      	pop	{r7, pc}
 800637e:	46c0      	nop			@ (mov r8, r8)
 8006380:	80000017 	.word	0x80000017
 8006384:	20000018 	.word	0x20000018
 8006388:	000f4240 	.word	0x000f4240

0800638c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006398:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639e:	2250      	movs	r2, #80	@ 0x50
 80063a0:	4013      	ands	r3, r2
 80063a2:	d140      	bne.n	8006426 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	2280      	movs	r2, #128	@ 0x80
 80063aa:	0092      	lsls	r2, r2, #2
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	23c0      	movs	r3, #192	@ 0xc0
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	4013      	ands	r3, r2
 80063be:	d12d      	bne.n	800641c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d129      	bne.n	800641c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2208      	movs	r2, #8
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d122      	bne.n	800641c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2204      	movs	r2, #4
 80063de:	4013      	ands	r3, r2
 80063e0:	d110      	bne.n	8006404 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	210c      	movs	r1, #12
 80063ee:	438a      	bics	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f6:	4a11      	ldr	r2, [pc, #68]	@ (800643c <ADC_DMAConvCplt+0xb0>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	2201      	movs	r2, #1
 80063fc:	431a      	orrs	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	639a      	str	r2, [r3, #56]	@ 0x38
 8006402:	e00b      	b.n	800641c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006408:	2220      	movs	r2, #32
 800640a:	431a      	orrs	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006414:	2201      	movs	r2, #1
 8006416:	431a      	orrs	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	0018      	movs	r0, r3
 8006420:	f7fd ffa2 	bl	8004368 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8006424:	e005      	b.n	8006432 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	0010      	movs	r0, r2
 8006430:	4798      	blx	r3
}
 8006432:	46c0      	nop			@ (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	b004      	add	sp, #16
 8006438:	bd80      	pop	{r7, pc}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	fffffefe 	.word	0xfffffefe

08006440 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	0018      	movs	r0, r3
 8006452:	f7ff fdf9 	bl	8006048 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	46bd      	mov	sp, r7
 800645a:	b004      	add	sp, #16
 800645c:	bd80      	pop	{r7, pc}

0800645e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006470:	2240      	movs	r2, #64	@ 0x40
 8006472:	431a      	orrs	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647c:	2204      	movs	r2, #4
 800647e:	431a      	orrs	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	0018      	movs	r0, r3
 8006488:	f7ff fde6 	bl	8006058 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800648c:	46c0      	nop			@ (mov r8, r8)
 800648e:	46bd      	mov	sp, r7
 8006490:	b004      	add	sp, #16
 8006492:	bd80      	pop	{r7, pc}

08006494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	0002      	movs	r2, r0
 800649c:	1dfb      	adds	r3, r7, #7
 800649e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80064a0:	1dfb      	adds	r3, r7, #7
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80064a6:	d809      	bhi.n	80064bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064a8:	1dfb      	adds	r3, r7, #7
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	001a      	movs	r2, r3
 80064ae:	231f      	movs	r3, #31
 80064b0:	401a      	ands	r2, r3
 80064b2:	4b04      	ldr	r3, [pc, #16]	@ (80064c4 <__NVIC_EnableIRQ+0x30>)
 80064b4:	2101      	movs	r1, #1
 80064b6:	4091      	lsls	r1, r2
 80064b8:	000a      	movs	r2, r1
 80064ba:	601a      	str	r2, [r3, #0]
  }
}
 80064bc:	46c0      	nop			@ (mov r8, r8)
 80064be:	46bd      	mov	sp, r7
 80064c0:	b002      	add	sp, #8
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	e000e100 	.word	0xe000e100

080064c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	0002      	movs	r2, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	1dfb      	adds	r3, r7, #7
 80064d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80064d6:	1dfb      	adds	r3, r7, #7
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b7f      	cmp	r3, #127	@ 0x7f
 80064dc:	d828      	bhi.n	8006530 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064de:	4a2f      	ldr	r2, [pc, #188]	@ (800659c <__NVIC_SetPriority+0xd4>)
 80064e0:	1dfb      	adds	r3, r7, #7
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	33c0      	adds	r3, #192	@ 0xc0
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	589b      	ldr	r3, [r3, r2]
 80064ee:	1dfa      	adds	r2, r7, #7
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	0011      	movs	r1, r2
 80064f4:	2203      	movs	r2, #3
 80064f6:	400a      	ands	r2, r1
 80064f8:	00d2      	lsls	r2, r2, #3
 80064fa:	21ff      	movs	r1, #255	@ 0xff
 80064fc:	4091      	lsls	r1, r2
 80064fe:	000a      	movs	r2, r1
 8006500:	43d2      	mvns	r2, r2
 8006502:	401a      	ands	r2, r3
 8006504:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	019b      	lsls	r3, r3, #6
 800650a:	22ff      	movs	r2, #255	@ 0xff
 800650c:	401a      	ands	r2, r3
 800650e:	1dfb      	adds	r3, r7, #7
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	0018      	movs	r0, r3
 8006514:	2303      	movs	r3, #3
 8006516:	4003      	ands	r3, r0
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800651c:	481f      	ldr	r0, [pc, #124]	@ (800659c <__NVIC_SetPriority+0xd4>)
 800651e:	1dfb      	adds	r3, r7, #7
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	b25b      	sxtb	r3, r3
 8006524:	089b      	lsrs	r3, r3, #2
 8006526:	430a      	orrs	r2, r1
 8006528:	33c0      	adds	r3, #192	@ 0xc0
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800652e:	e031      	b.n	8006594 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006530:	4a1b      	ldr	r2, [pc, #108]	@ (80065a0 <__NVIC_SetPriority+0xd8>)
 8006532:	1dfb      	adds	r3, r7, #7
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	0019      	movs	r1, r3
 8006538:	230f      	movs	r3, #15
 800653a:	400b      	ands	r3, r1
 800653c:	3b08      	subs	r3, #8
 800653e:	089b      	lsrs	r3, r3, #2
 8006540:	3306      	adds	r3, #6
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	18d3      	adds	r3, r2, r3
 8006546:	3304      	adds	r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	1dfa      	adds	r2, r7, #7
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	0011      	movs	r1, r2
 8006550:	2203      	movs	r2, #3
 8006552:	400a      	ands	r2, r1
 8006554:	00d2      	lsls	r2, r2, #3
 8006556:	21ff      	movs	r1, #255	@ 0xff
 8006558:	4091      	lsls	r1, r2
 800655a:	000a      	movs	r2, r1
 800655c:	43d2      	mvns	r2, r2
 800655e:	401a      	ands	r2, r3
 8006560:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	019b      	lsls	r3, r3, #6
 8006566:	22ff      	movs	r2, #255	@ 0xff
 8006568:	401a      	ands	r2, r3
 800656a:	1dfb      	adds	r3, r7, #7
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	0018      	movs	r0, r3
 8006570:	2303      	movs	r3, #3
 8006572:	4003      	ands	r3, r0
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006578:	4809      	ldr	r0, [pc, #36]	@ (80065a0 <__NVIC_SetPriority+0xd8>)
 800657a:	1dfb      	adds	r3, r7, #7
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	001c      	movs	r4, r3
 8006580:	230f      	movs	r3, #15
 8006582:	4023      	ands	r3, r4
 8006584:	3b08      	subs	r3, #8
 8006586:	089b      	lsrs	r3, r3, #2
 8006588:	430a      	orrs	r2, r1
 800658a:	3306      	adds	r3, #6
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	18c3      	adds	r3, r0, r3
 8006590:	3304      	adds	r3, #4
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	46c0      	nop			@ (mov r8, r8)
 8006596:	46bd      	mov	sp, r7
 8006598:	b003      	add	sp, #12
 800659a:	bd90      	pop	{r4, r7, pc}
 800659c:	e000e100 	.word	0xe000e100
 80065a0:	e000ed00 	.word	0xe000ed00

080065a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	1e5a      	subs	r2, r3, #1
 80065b0:	2380      	movs	r3, #128	@ 0x80
 80065b2:	045b      	lsls	r3, r3, #17
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d301      	bcc.n	80065bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065b8:	2301      	movs	r3, #1
 80065ba:	e010      	b.n	80065de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065bc:	4b0a      	ldr	r3, [pc, #40]	@ (80065e8 <SysTick_Config+0x44>)
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	3a01      	subs	r2, #1
 80065c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065c4:	2301      	movs	r3, #1
 80065c6:	425b      	negs	r3, r3
 80065c8:	2103      	movs	r1, #3
 80065ca:	0018      	movs	r0, r3
 80065cc:	f7ff ff7c 	bl	80064c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065d0:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <SysTick_Config+0x44>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065d6:	4b04      	ldr	r3, [pc, #16]	@ (80065e8 <SysTick_Config+0x44>)
 80065d8:	2207      	movs	r2, #7
 80065da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065dc:	2300      	movs	r3, #0
}
 80065de:	0018      	movs	r0, r3
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b002      	add	sp, #8
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	46c0      	nop			@ (mov r8, r8)
 80065e8:	e000e010 	.word	0xe000e010

080065ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	210f      	movs	r1, #15
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	1c02      	adds	r2, r0, #0
 80065fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	187b      	adds	r3, r7, r1
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	b25b      	sxtb	r3, r3
 8006606:	0011      	movs	r1, r2
 8006608:	0018      	movs	r0, r3
 800660a:	f7ff ff5d 	bl	80064c8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800660e:	46c0      	nop			@ (mov r8, r8)
 8006610:	46bd      	mov	sp, r7
 8006612:	b004      	add	sp, #16
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	0002      	movs	r2, r0
 800661e:	1dfb      	adds	r3, r7, #7
 8006620:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006622:	1dfb      	adds	r3, r7, #7
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	b25b      	sxtb	r3, r3
 8006628:	0018      	movs	r0, r3
 800662a:	f7ff ff33 	bl	8006494 <__NVIC_EnableIRQ>
}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	b002      	add	sp, #8
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f7ff ffaf 	bl	80065a4 <SysTick_Config>
 8006646:	0003      	movs	r3, r0
}
 8006648:	0018      	movs	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	b002      	add	sp, #8
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e036      	b.n	80066d4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2221      	movs	r2, #33	@ 0x21
 800666a:	2102      	movs	r1, #2
 800666c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a18      	ldr	r2, [pc, #96]	@ (80066dc <HAL_DMA_Init+0x8c>)
 800667a:	4013      	ands	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006686:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800669e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	0018      	movs	r0, r3
 80066b8:	f000 f946 	bl	8006948 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2221      	movs	r2, #33	@ 0x21
 80066c6:	2101      	movs	r1, #1
 80066c8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	2100      	movs	r1, #0
 80066d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	0018      	movs	r0, r3
 80066d6:	46bd      	mov	sp, r7
 80066d8:	b004      	add	sp, #16
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	ffffc00f 	.word	0xffffc00f

080066e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ee:	2317      	movs	r3, #23
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2220      	movs	r2, #32
 80066fa:	5c9b      	ldrb	r3, [r3, r2]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_DMA_Start_IT+0x24>
 8006700:	2302      	movs	r3, #2
 8006702:	e04f      	b.n	80067a4 <HAL_DMA_Start_IT+0xc4>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	2101      	movs	r1, #1
 800670a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2221      	movs	r2, #33	@ 0x21
 8006710:	5c9b      	ldrb	r3, [r3, r2]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	d13a      	bne.n	800678e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2221      	movs	r2, #33	@ 0x21
 800671c:	2102      	movs	r1, #2
 800671e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2101      	movs	r1, #1
 8006732:	438a      	bics	r2, r1
 8006734:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f8d7 	bl	80068f0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d008      	beq.n	800675c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	210e      	movs	r1, #14
 8006756:	430a      	orrs	r2, r1
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	e00f      	b.n	800677c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	210a      	movs	r1, #10
 8006768:	430a      	orrs	r2, r1
 800676a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2104      	movs	r1, #4
 8006778:	438a      	bics	r2, r1
 800677a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2101      	movs	r1, #1
 8006788:	430a      	orrs	r2, r1
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e007      	b.n	800679e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	2100      	movs	r1, #0
 8006794:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006796:	2317      	movs	r3, #23
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	2202      	movs	r2, #2
 800679c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800679e:	2317      	movs	r3, #23
 80067a0:	18fb      	adds	r3, r7, r3
 80067a2:	781b      	ldrb	r3, [r3, #0]
}
 80067a4:	0018      	movs	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b006      	add	sp, #24
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c8:	2204      	movs	r2, #4
 80067ca:	409a      	lsls	r2, r3
 80067cc:	0013      	movs	r3, r2
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4013      	ands	r3, r2
 80067d2:	d024      	beq.n	800681e <HAL_DMA_IRQHandler+0x72>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2204      	movs	r2, #4
 80067d8:	4013      	ands	r3, r2
 80067da:	d020      	beq.n	800681e <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2220      	movs	r2, #32
 80067e4:	4013      	ands	r3, r2
 80067e6:	d107      	bne.n	80067f8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2104      	movs	r1, #4
 80067f4:	438a      	bics	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006800:	2104      	movs	r1, #4
 8006802:	4091      	lsls	r1, r2
 8006804:	000a      	movs	r2, r1
 8006806:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d100      	bne.n	8006812 <HAL_DMA_IRQHandler+0x66>
 8006810:	e06a      	b.n	80068e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	0010      	movs	r0, r2
 800681a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800681c:	e064      	b.n	80068e8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	2202      	movs	r2, #2
 8006824:	409a      	lsls	r2, r3
 8006826:	0013      	movs	r3, r2
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4013      	ands	r3, r2
 800682c:	d02b      	beq.n	8006886 <HAL_DMA_IRQHandler+0xda>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2202      	movs	r2, #2
 8006832:	4013      	ands	r3, r2
 8006834:	d027      	beq.n	8006886 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2220      	movs	r2, #32
 800683e:	4013      	ands	r3, r2
 8006840:	d10b      	bne.n	800685a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	210a      	movs	r1, #10
 800684e:	438a      	bics	r2, r1
 8006850:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2221      	movs	r2, #33	@ 0x21
 8006856:	2101      	movs	r1, #1
 8006858:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006862:	2102      	movs	r1, #2
 8006864:	4091      	lsls	r1, r2
 8006866:	000a      	movs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	2100      	movs	r1, #0
 8006870:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006876:	2b00      	cmp	r3, #0
 8006878:	d036      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	0010      	movs	r0, r2
 8006882:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006884:	e030      	b.n	80068e8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688a:	2208      	movs	r2, #8
 800688c:	409a      	lsls	r2, r3
 800688e:	0013      	movs	r3, r2
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4013      	ands	r3, r2
 8006894:	d028      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x13c>
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2208      	movs	r2, #8
 800689a:	4013      	ands	r3, r2
 800689c:	d024      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	210e      	movs	r1, #14
 80068aa:	438a      	bics	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b6:	2101      	movs	r1, #1
 80068b8:	4091      	lsls	r1, r2
 80068ba:	000a      	movs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2221      	movs	r2, #33	@ 0x21
 80068c8:	2101      	movs	r1, #1
 80068ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	2100      	movs	r1, #0
 80068d2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	0010      	movs	r0, r2
 80068e4:	4798      	blx	r3
    }
  }
}
 80068e6:	e7ff      	b.n	80068e8 <HAL_DMA_IRQHandler+0x13c>
 80068e8:	46c0      	nop			@ (mov r8, r8)
 80068ea:	46bd      	mov	sp, r7
 80068ec:	b004      	add	sp, #16
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006906:	2101      	movs	r1, #1
 8006908:	4091      	lsls	r1, r2
 800690a:	000a      	movs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b10      	cmp	r3, #16
 800691c:	d108      	bne.n	8006930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800692e:	e007      	b.n	8006940 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	60da      	str	r2, [r3, #12]
}
 8006940:	46c0      	nop			@ (mov r8, r8)
 8006942:	46bd      	mov	sp, r7
 8006944:	b004      	add	sp, #16
 8006946:	bd80      	pop	{r7, pc}

08006948 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	001a      	movs	r2, r3
 8006956:	4b14      	ldr	r3, [pc, #80]	@ (80069a8 <DMA_CalcBaseAndBitshift+0x60>)
 8006958:	429a      	cmp	r2, r3
 800695a:	d810      	bhi.n	800697e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a12      	ldr	r2, [pc, #72]	@ (80069ac <DMA_CalcBaseAndBitshift+0x64>)
 8006962:	4694      	mov	ip, r2
 8006964:	4463      	add	r3, ip
 8006966:	2114      	movs	r1, #20
 8006968:	0018      	movs	r0, r3
 800696a:	f7f9 fbe7 	bl	800013c <__udivsi3>
 800696e:	0003      	movs	r3, r0
 8006970:	009a      	lsls	r2, r3, #2
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a0d      	ldr	r2, [pc, #52]	@ (80069b0 <DMA_CalcBaseAndBitshift+0x68>)
 800697a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800697c:	e00f      	b.n	800699e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a0c      	ldr	r2, [pc, #48]	@ (80069b4 <DMA_CalcBaseAndBitshift+0x6c>)
 8006984:	4694      	mov	ip, r2
 8006986:	4463      	add	r3, ip
 8006988:	2114      	movs	r1, #20
 800698a:	0018      	movs	r0, r3
 800698c:	f7f9 fbd6 	bl	800013c <__udivsi3>
 8006990:	0003      	movs	r3, r0
 8006992:	009a      	lsls	r2, r3, #2
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a07      	ldr	r2, [pc, #28]	@ (80069b8 <DMA_CalcBaseAndBitshift+0x70>)
 800699c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800699e:	46c0      	nop			@ (mov r8, r8)
 80069a0:	46bd      	mov	sp, r7
 80069a2:	b002      	add	sp, #8
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			@ (mov r8, r8)
 80069a8:	40020407 	.word	0x40020407
 80069ac:	bffdfff8 	.word	0xbffdfff8
 80069b0:	40020000 	.word	0x40020000
 80069b4:	bffdfbf8 	.word	0xbffdfbf8
 80069b8:	40020400 	.word	0x40020400

080069bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069ca:	e155      	b.n	8006c78 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2101      	movs	r1, #1
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4091      	lsls	r1, r2
 80069d6:	000a      	movs	r2, r1
 80069d8:	4013      	ands	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d100      	bne.n	80069e4 <HAL_GPIO_Init+0x28>
 80069e2:	e146      	b.n	8006c72 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2203      	movs	r2, #3
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d005      	beq.n	80069fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2203      	movs	r2, #3
 80069f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d130      	bne.n	8006a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	2203      	movs	r2, #3
 8006a08:	409a      	lsls	r2, r3
 8006a0a:	0013      	movs	r3, r2
 8006a0c:	43da      	mvns	r2, r3
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	4013      	ands	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	409a      	lsls	r2, r3
 8006a1e:	0013      	movs	r3, r2
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a32:	2201      	movs	r2, #1
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	409a      	lsls	r2, r3
 8006a38:	0013      	movs	r3, r2
 8006a3a:	43da      	mvns	r2, r3
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	091b      	lsrs	r3, r3, #4
 8006a48:	2201      	movs	r2, #1
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	409a      	lsls	r2, r3
 8006a50:	0013      	movs	r3, r2
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2203      	movs	r2, #3
 8006a64:	4013      	ands	r3, r2
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d017      	beq.n	8006a9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	2203      	movs	r2, #3
 8006a76:	409a      	lsls	r2, r3
 8006a78:	0013      	movs	r3, r2
 8006a7a:	43da      	mvns	r2, r3
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	0013      	movs	r3, r2
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2203      	movs	r2, #3
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d123      	bne.n	8006aee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	08da      	lsrs	r2, r3, #3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3208      	adds	r2, #8
 8006aae:	0092      	lsls	r2, r2, #2
 8006ab0:	58d3      	ldr	r3, [r2, r3]
 8006ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2207      	movs	r2, #7
 8006ab8:	4013      	ands	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	220f      	movs	r2, #15
 8006abe:	409a      	lsls	r2, r3
 8006ac0:	0013      	movs	r3, r2
 8006ac2:	43da      	mvns	r2, r3
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2107      	movs	r1, #7
 8006ad2:	400b      	ands	r3, r1
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	0013      	movs	r3, r2
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	08da      	lsrs	r2, r3, #3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3208      	adds	r2, #8
 8006ae8:	0092      	lsls	r2, r2, #2
 8006aea:	6939      	ldr	r1, [r7, #16]
 8006aec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	2203      	movs	r2, #3
 8006afa:	409a      	lsls	r2, r3
 8006afc:	0013      	movs	r3, r2
 8006afe:	43da      	mvns	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4013      	ands	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	401a      	ands	r2, r3
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	409a      	lsls	r2, r3
 8006b14:	0013      	movs	r3, r2
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	23c0      	movs	r3, #192	@ 0xc0
 8006b28:	029b      	lsls	r3, r3, #10
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	d100      	bne.n	8006b30 <HAL_GPIO_Init+0x174>
 8006b2e:	e0a0      	b.n	8006c72 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b30:	4b57      	ldr	r3, [pc, #348]	@ (8006c90 <HAL_GPIO_Init+0x2d4>)
 8006b32:	699a      	ldr	r2, [r3, #24]
 8006b34:	4b56      	ldr	r3, [pc, #344]	@ (8006c90 <HAL_GPIO_Init+0x2d4>)
 8006b36:	2101      	movs	r1, #1
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	619a      	str	r2, [r3, #24]
 8006b3c:	4b54      	ldr	r3, [pc, #336]	@ (8006c90 <HAL_GPIO_Init+0x2d4>)
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	2201      	movs	r2, #1
 8006b42:	4013      	ands	r3, r2
 8006b44:	60bb      	str	r3, [r7, #8]
 8006b46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006b48:	4a52      	ldr	r2, [pc, #328]	@ (8006c94 <HAL_GPIO_Init+0x2d8>)
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	089b      	lsrs	r3, r3, #2
 8006b4e:	3302      	adds	r3, #2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	589b      	ldr	r3, [r3, r2]
 8006b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2203      	movs	r2, #3
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	220f      	movs	r2, #15
 8006b60:	409a      	lsls	r2, r3
 8006b62:	0013      	movs	r3, r2
 8006b64:	43da      	mvns	r2, r3
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	2390      	movs	r3, #144	@ 0x90
 8006b70:	05db      	lsls	r3, r3, #23
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d019      	beq.n	8006baa <HAL_GPIO_Init+0x1ee>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a47      	ldr	r2, [pc, #284]	@ (8006c98 <HAL_GPIO_Init+0x2dc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_GPIO_Init+0x1ea>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a46      	ldr	r2, [pc, #280]	@ (8006c9c <HAL_GPIO_Init+0x2e0>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00d      	beq.n	8006ba2 <HAL_GPIO_Init+0x1e6>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a45      	ldr	r2, [pc, #276]	@ (8006ca0 <HAL_GPIO_Init+0x2e4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d007      	beq.n	8006b9e <HAL_GPIO_Init+0x1e2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a44      	ldr	r2, [pc, #272]	@ (8006ca4 <HAL_GPIO_Init+0x2e8>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d101      	bne.n	8006b9a <HAL_GPIO_Init+0x1de>
 8006b96:	2304      	movs	r3, #4
 8006b98:	e008      	b.n	8006bac <HAL_GPIO_Init+0x1f0>
 8006b9a:	2305      	movs	r3, #5
 8006b9c:	e006      	b.n	8006bac <HAL_GPIO_Init+0x1f0>
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e004      	b.n	8006bac <HAL_GPIO_Init+0x1f0>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	e002      	b.n	8006bac <HAL_GPIO_Init+0x1f0>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <HAL_GPIO_Init+0x1f0>
 8006baa:	2300      	movs	r3, #0
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	2103      	movs	r1, #3
 8006bb0:	400a      	ands	r2, r1
 8006bb2:	0092      	lsls	r2, r2, #2
 8006bb4:	4093      	lsls	r3, r2
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006bbc:	4935      	ldr	r1, [pc, #212]	@ (8006c94 <HAL_GPIO_Init+0x2d8>)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	089b      	lsrs	r3, r3, #2
 8006bc2:	3302      	adds	r3, #2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bca:	4b37      	ldr	r3, [pc, #220]	@ (8006ca8 <HAL_GPIO_Init+0x2ec>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	43da      	mvns	r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	2380      	movs	r3, #128	@ 0x80
 8006be0:	035b      	lsls	r3, r3, #13
 8006be2:	4013      	ands	r3, r2
 8006be4:	d003      	beq.n	8006bee <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006bee:	4b2e      	ldr	r3, [pc, #184]	@ (8006ca8 <HAL_GPIO_Init+0x2ec>)
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8006ca8 <HAL_GPIO_Init+0x2ec>)
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	43da      	mvns	r2, r3
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	4013      	ands	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	2380      	movs	r3, #128	@ 0x80
 8006c0a:	039b      	lsls	r3, r3, #14
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006c18:	4b23      	ldr	r3, [pc, #140]	@ (8006ca8 <HAL_GPIO_Init+0x2ec>)
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8006c1e:	4b22      	ldr	r3, [pc, #136]	@ (8006ca8 <HAL_GPIO_Init+0x2ec>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	43da      	mvns	r2, r3
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	2380      	movs	r3, #128	@ 0x80
 8006c34:	029b      	lsls	r3, r3, #10
 8006c36:	4013      	ands	r3, r2
 8006c38:	d003      	beq.n	8006c42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006c42:	4b19      	ldr	r3, [pc, #100]	@ (8006ca8 <HAL_GPIO_Init+0x2ec>)
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8006c48:	4b17      	ldr	r3, [pc, #92]	@ (8006ca8 <HAL_GPIO_Init+0x2ec>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	43da      	mvns	r2, r3
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4013      	ands	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	2380      	movs	r3, #128	@ 0x80
 8006c5e:	025b      	lsls	r3, r3, #9
 8006c60:	4013      	ands	r3, r2
 8006c62:	d003      	beq.n	8006c6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca8 <HAL_GPIO_Init+0x2ec>)
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	3301      	adds	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	40da      	lsrs	r2, r3
 8006c80:	1e13      	subs	r3, r2, #0
 8006c82:	d000      	beq.n	8006c86 <HAL_GPIO_Init+0x2ca>
 8006c84:	e6a2      	b.n	80069cc <HAL_GPIO_Init+0x10>
  } 
}
 8006c86:	46c0      	nop			@ (mov r8, r8)
 8006c88:	46c0      	nop			@ (mov r8, r8)
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	b006      	add	sp, #24
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40021000 	.word	0x40021000
 8006c94:	40010000 	.word	0x40010000
 8006c98:	48000400 	.word	0x48000400
 8006c9c:	48000800 	.word	0x48000800
 8006ca0:	48000c00 	.word	0x48000c00
 8006ca4:	48001000 	.word	0x48001000
 8006ca8:	40010400 	.word	0x40010400

08006cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	000a      	movs	r2, r1
 8006cb6:	1cbb      	adds	r3, r7, #2
 8006cb8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	1cba      	adds	r2, r7, #2
 8006cc0:	8812      	ldrh	r2, [r2, #0]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d004      	beq.n	8006cd0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006cc6:	230f      	movs	r3, #15
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	2201      	movs	r2, #1
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	e003      	b.n	8006cd8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cd0:	230f      	movs	r3, #15
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006cd8:	230f      	movs	r3, #15
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	781b      	ldrb	r3, [r3, #0]
  }
 8006cde:	0018      	movs	r0, r3
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	b004      	add	sp, #16
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	0008      	movs	r0, r1
 8006cf0:	0011      	movs	r1, r2
 8006cf2:	1cbb      	adds	r3, r7, #2
 8006cf4:	1c02      	adds	r2, r0, #0
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	1c7b      	adds	r3, r7, #1
 8006cfa:	1c0a      	adds	r2, r1, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cfe:	1c7b      	adds	r3, r7, #1
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d004      	beq.n	8006d10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d06:	1cbb      	adds	r3, r7, #2
 8006d08:	881a      	ldrh	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d0e:	e003      	b.n	8006d18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d10:	1cbb      	adds	r3, r7, #2
 8006d12:	881a      	ldrh	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006d18:	46c0      	nop			@ (mov r8, r8)
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b002      	add	sp, #8
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	0002      	movs	r2, r0
 8006d28:	1dbb      	adds	r3, r7, #6
 8006d2a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006d2c:	4b09      	ldr	r3, [pc, #36]	@ (8006d54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	1dba      	adds	r2, r7, #6
 8006d32:	8812      	ldrh	r2, [r2, #0]
 8006d34:	4013      	ands	r3, r2
 8006d36:	d008      	beq.n	8006d4a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d38:	4b06      	ldr	r3, [pc, #24]	@ (8006d54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006d3a:	1dba      	adds	r2, r7, #6
 8006d3c:	8812      	ldrh	r2, [r2, #0]
 8006d3e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d40:	1dbb      	adds	r3, r7, #6
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	0018      	movs	r0, r3
 8006d46:	f7fe fc3f 	bl	80055c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d4a:	46c0      	nop			@ (mov r8, r8)
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b002      	add	sp, #8
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	46c0      	nop			@ (mov r8, r8)
 8006d54:	40010400 	.word	0x40010400

08006d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d102      	bne.n	8006d6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f000 fb76 	bl	8007458 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2201      	movs	r2, #1
 8006d72:	4013      	ands	r3, r2
 8006d74:	d100      	bne.n	8006d78 <HAL_RCC_OscConfig+0x20>
 8006d76:	e08e      	b.n	8006e96 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006d78:	4bc5      	ldr	r3, [pc, #788]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	220c      	movs	r2, #12
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d00e      	beq.n	8006da2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d84:	4bc2      	ldr	r3, [pc, #776]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	220c      	movs	r2, #12
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d117      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x68>
 8006d90:	4bbf      	ldr	r3, [pc, #764]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	23c0      	movs	r3, #192	@ 0xc0
 8006d96:	025b      	lsls	r3, r3, #9
 8006d98:	401a      	ands	r2, r3
 8006d9a:	2380      	movs	r3, #128	@ 0x80
 8006d9c:	025b      	lsls	r3, r3, #9
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d10e      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da2:	4bbb      	ldr	r3, [pc, #748]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	2380      	movs	r3, #128	@ 0x80
 8006da8:	029b      	lsls	r3, r3, #10
 8006daa:	4013      	ands	r3, r2
 8006dac:	d100      	bne.n	8006db0 <HAL_RCC_OscConfig+0x58>
 8006dae:	e071      	b.n	8006e94 <HAL_RCC_OscConfig+0x13c>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d000      	beq.n	8006dba <HAL_RCC_OscConfig+0x62>
 8006db8:	e06c      	b.n	8006e94 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f000 fb4c 	bl	8007458 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d107      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x80>
 8006dc8:	4bb1      	ldr	r3, [pc, #708]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4bb0      	ldr	r3, [pc, #704]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006dce:	2180      	movs	r1, #128	@ 0x80
 8006dd0:	0249      	lsls	r1, r1, #9
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	e02f      	b.n	8006e38 <HAL_RCC_OscConfig+0xe0>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10c      	bne.n	8006dfa <HAL_RCC_OscConfig+0xa2>
 8006de0:	4bab      	ldr	r3, [pc, #684]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	4baa      	ldr	r3, [pc, #680]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006de6:	49ab      	ldr	r1, [pc, #684]	@ (8007094 <HAL_RCC_OscConfig+0x33c>)
 8006de8:	400a      	ands	r2, r1
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	4ba8      	ldr	r3, [pc, #672]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	4ba7      	ldr	r3, [pc, #668]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006df2:	49a9      	ldr	r1, [pc, #676]	@ (8007098 <HAL_RCC_OscConfig+0x340>)
 8006df4:	400a      	ands	r2, r1
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	e01e      	b.n	8006e38 <HAL_RCC_OscConfig+0xe0>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b05      	cmp	r3, #5
 8006e00:	d10e      	bne.n	8006e20 <HAL_RCC_OscConfig+0xc8>
 8006e02:	4ba3      	ldr	r3, [pc, #652]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4ba2      	ldr	r3, [pc, #648]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006e08:	2180      	movs	r1, #128	@ 0x80
 8006e0a:	02c9      	lsls	r1, r1, #11
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	4b9f      	ldr	r3, [pc, #636]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	4b9e      	ldr	r3, [pc, #632]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006e16:	2180      	movs	r1, #128	@ 0x80
 8006e18:	0249      	lsls	r1, r1, #9
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e00b      	b.n	8006e38 <HAL_RCC_OscConfig+0xe0>
 8006e20:	4b9b      	ldr	r3, [pc, #620]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	4b9a      	ldr	r3, [pc, #616]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006e26:	499b      	ldr	r1, [pc, #620]	@ (8007094 <HAL_RCC_OscConfig+0x33c>)
 8006e28:	400a      	ands	r2, r1
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	4b98      	ldr	r3, [pc, #608]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	4b97      	ldr	r3, [pc, #604]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006e32:	4999      	ldr	r1, [pc, #612]	@ (8007098 <HAL_RCC_OscConfig+0x340>)
 8006e34:	400a      	ands	r2, r1
 8006e36:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d014      	beq.n	8006e6a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e40:	f7fe ff12 	bl	8005c68 <HAL_GetTick>
 8006e44:	0003      	movs	r3, r0
 8006e46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e4a:	f7fe ff0d 	bl	8005c68 <HAL_GetTick>
 8006e4e:	0002      	movs	r2, r0
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b64      	cmp	r3, #100	@ 0x64
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e2fd      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e5c:	4b8c      	ldr	r3, [pc, #560]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	2380      	movs	r3, #128	@ 0x80
 8006e62:	029b      	lsls	r3, r3, #10
 8006e64:	4013      	ands	r3, r2
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0xf2>
 8006e68:	e015      	b.n	8006e96 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6a:	f7fe fefd 	bl	8005c68 <HAL_GetTick>
 8006e6e:	0003      	movs	r3, r0
 8006e70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e74:	f7fe fef8 	bl	8005c68 <HAL_GetTick>
 8006e78:	0002      	movs	r2, r0
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b64      	cmp	r3, #100	@ 0x64
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e2e8      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e86:	4b82      	ldr	r3, [pc, #520]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	2380      	movs	r3, #128	@ 0x80
 8006e8c:	029b      	lsls	r3, r3, #10
 8006e8e:	4013      	ands	r3, r2
 8006e90:	d1f0      	bne.n	8006e74 <HAL_RCC_OscConfig+0x11c>
 8006e92:	e000      	b.n	8006e96 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e94:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	d100      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x14a>
 8006ea0:	e06c      	b.n	8006f7c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	220c      	movs	r2, #12
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	d00e      	beq.n	8006eca <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006eac:	4b78      	ldr	r3, [pc, #480]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	220c      	movs	r2, #12
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d11f      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x1a0>
 8006eb8:	4b75      	ldr	r3, [pc, #468]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	23c0      	movs	r3, #192	@ 0xc0
 8006ebe:	025b      	lsls	r3, r3, #9
 8006ec0:	401a      	ands	r2, r3
 8006ec2:	2380      	movs	r3, #128	@ 0x80
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d116      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eca:	4b71      	ldr	r3, [pc, #452]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	d005      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x188>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d001      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e2bb      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	22f8      	movs	r2, #248	@ 0xf8
 8006ee6:	4393      	bics	r3, r2
 8006ee8:	0019      	movs	r1, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	00da      	lsls	r2, r3, #3
 8006ef0:	4b67      	ldr	r3, [pc, #412]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ef6:	e041      	b.n	8006f7c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d024      	beq.n	8006f4a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f00:	4b63      	ldr	r3, [pc, #396]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	4b62      	ldr	r3, [pc, #392]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006f06:	2101      	movs	r1, #1
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0c:	f7fe feac 	bl	8005c68 <HAL_GetTick>
 8006f10:	0003      	movs	r3, r0
 8006f12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f14:	e008      	b.n	8006f28 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f16:	f7fe fea7 	bl	8005c68 <HAL_GetTick>
 8006f1a:	0002      	movs	r2, r0
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e297      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f28:	4b59      	ldr	r3, [pc, #356]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d0f1      	beq.n	8006f16 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f32:	4b57      	ldr	r3, [pc, #348]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	22f8      	movs	r2, #248	@ 0xf8
 8006f38:	4393      	bics	r3, r2
 8006f3a:	0019      	movs	r1, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	00da      	lsls	r2, r3, #3
 8006f42:	4b53      	ldr	r3, [pc, #332]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006f44:	430a      	orrs	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	e018      	b.n	8006f7c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f4a:	4b51      	ldr	r3, [pc, #324]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	4b50      	ldr	r3, [pc, #320]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006f50:	2101      	movs	r1, #1
 8006f52:	438a      	bics	r2, r1
 8006f54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f56:	f7fe fe87 	bl	8005c68 <HAL_GetTick>
 8006f5a:	0003      	movs	r3, r0
 8006f5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f60:	f7fe fe82 	bl	8005c68 <HAL_GetTick>
 8006f64:	0002      	movs	r2, r0
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e272      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f72:	4b47      	ldr	r3, [pc, #284]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2202      	movs	r2, #2
 8006f78:	4013      	ands	r3, r2
 8006f7a:	d1f1      	bne.n	8006f60 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2208      	movs	r2, #8
 8006f82:	4013      	ands	r3, r2
 8006f84:	d036      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d019      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f8e:	4b40      	ldr	r3, [pc, #256]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f92:	4b3f      	ldr	r3, [pc, #252]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006f94:	2101      	movs	r1, #1
 8006f96:	430a      	orrs	r2, r1
 8006f98:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f9a:	f7fe fe65 	bl	8005c68 <HAL_GetTick>
 8006f9e:	0003      	movs	r3, r0
 8006fa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fa4:	f7fe fe60 	bl	8005c68 <HAL_GetTick>
 8006fa8:	0002      	movs	r2, r0
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e250      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fb6:	4b36      	ldr	r3, [pc, #216]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	2202      	movs	r2, #2
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d0f1      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x24c>
 8006fc0:	e018      	b.n	8006ff4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fc2:	4b33      	ldr	r3, [pc, #204]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fc6:	4b32      	ldr	r3, [pc, #200]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006fc8:	2101      	movs	r1, #1
 8006fca:	438a      	bics	r2, r1
 8006fcc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fce:	f7fe fe4b 	bl	8005c68 <HAL_GetTick>
 8006fd2:	0003      	movs	r3, r0
 8006fd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fd8:	f7fe fe46 	bl	8005c68 <HAL_GetTick>
 8006fdc:	0002      	movs	r2, r0
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e236      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fea:	4b29      	ldr	r3, [pc, #164]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8006fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fee:	2202      	movs	r2, #2
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	d1f1      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2204      	movs	r2, #4
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d100      	bne.n	8007000 <HAL_RCC_OscConfig+0x2a8>
 8006ffe:	e0b5      	b.n	800716c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007000:	201f      	movs	r0, #31
 8007002:	183b      	adds	r3, r7, r0
 8007004:	2200      	movs	r2, #0
 8007006:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007008:	4b21      	ldr	r3, [pc, #132]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	2380      	movs	r3, #128	@ 0x80
 800700e:	055b      	lsls	r3, r3, #21
 8007010:	4013      	ands	r3, r2
 8007012:	d110      	bne.n	8007036 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007014:	4b1e      	ldr	r3, [pc, #120]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8007016:	69da      	ldr	r2, [r3, #28]
 8007018:	4b1d      	ldr	r3, [pc, #116]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 800701a:	2180      	movs	r1, #128	@ 0x80
 800701c:	0549      	lsls	r1, r1, #21
 800701e:	430a      	orrs	r2, r1
 8007020:	61da      	str	r2, [r3, #28]
 8007022:	4b1b      	ldr	r3, [pc, #108]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8007024:	69da      	ldr	r2, [r3, #28]
 8007026:	2380      	movs	r3, #128	@ 0x80
 8007028:	055b      	lsls	r3, r3, #21
 800702a:	4013      	ands	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007030:	183b      	adds	r3, r7, r0
 8007032:	2201      	movs	r2, #1
 8007034:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007036:	4b19      	ldr	r3, [pc, #100]	@ (800709c <HAL_RCC_OscConfig+0x344>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	2380      	movs	r3, #128	@ 0x80
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	4013      	ands	r3, r2
 8007040:	d11a      	bne.n	8007078 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007042:	4b16      	ldr	r3, [pc, #88]	@ (800709c <HAL_RCC_OscConfig+0x344>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	4b15      	ldr	r3, [pc, #84]	@ (800709c <HAL_RCC_OscConfig+0x344>)
 8007048:	2180      	movs	r1, #128	@ 0x80
 800704a:	0049      	lsls	r1, r1, #1
 800704c:	430a      	orrs	r2, r1
 800704e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007050:	f7fe fe0a 	bl	8005c68 <HAL_GetTick>
 8007054:	0003      	movs	r3, r0
 8007056:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007058:	e008      	b.n	800706c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800705a:	f7fe fe05 	bl	8005c68 <HAL_GetTick>
 800705e:	0002      	movs	r2, r0
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b64      	cmp	r3, #100	@ 0x64
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e1f5      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800706c:	4b0b      	ldr	r3, [pc, #44]	@ (800709c <HAL_RCC_OscConfig+0x344>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	2380      	movs	r3, #128	@ 0x80
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	4013      	ands	r3, r2
 8007076:	d0f0      	beq.n	800705a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d10f      	bne.n	80070a0 <HAL_RCC_OscConfig+0x348>
 8007080:	4b03      	ldr	r3, [pc, #12]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8007082:	6a1a      	ldr	r2, [r3, #32]
 8007084:	4b02      	ldr	r3, [pc, #8]	@ (8007090 <HAL_RCC_OscConfig+0x338>)
 8007086:	2101      	movs	r1, #1
 8007088:	430a      	orrs	r2, r1
 800708a:	621a      	str	r2, [r3, #32]
 800708c:	e036      	b.n	80070fc <HAL_RCC_OscConfig+0x3a4>
 800708e:	46c0      	nop			@ (mov r8, r8)
 8007090:	40021000 	.word	0x40021000
 8007094:	fffeffff 	.word	0xfffeffff
 8007098:	fffbffff 	.word	0xfffbffff
 800709c:	40007000 	.word	0x40007000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10c      	bne.n	80070c2 <HAL_RCC_OscConfig+0x36a>
 80070a8:	4bca      	ldr	r3, [pc, #808]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070aa:	6a1a      	ldr	r2, [r3, #32]
 80070ac:	4bc9      	ldr	r3, [pc, #804]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070ae:	2101      	movs	r1, #1
 80070b0:	438a      	bics	r2, r1
 80070b2:	621a      	str	r2, [r3, #32]
 80070b4:	4bc7      	ldr	r3, [pc, #796]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070b6:	6a1a      	ldr	r2, [r3, #32]
 80070b8:	4bc6      	ldr	r3, [pc, #792]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070ba:	2104      	movs	r1, #4
 80070bc:	438a      	bics	r2, r1
 80070be:	621a      	str	r2, [r3, #32]
 80070c0:	e01c      	b.n	80070fc <HAL_RCC_OscConfig+0x3a4>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	2b05      	cmp	r3, #5
 80070c8:	d10c      	bne.n	80070e4 <HAL_RCC_OscConfig+0x38c>
 80070ca:	4bc2      	ldr	r3, [pc, #776]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070cc:	6a1a      	ldr	r2, [r3, #32]
 80070ce:	4bc1      	ldr	r3, [pc, #772]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070d0:	2104      	movs	r1, #4
 80070d2:	430a      	orrs	r2, r1
 80070d4:	621a      	str	r2, [r3, #32]
 80070d6:	4bbf      	ldr	r3, [pc, #764]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070d8:	6a1a      	ldr	r2, [r3, #32]
 80070da:	4bbe      	ldr	r3, [pc, #760]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070dc:	2101      	movs	r1, #1
 80070de:	430a      	orrs	r2, r1
 80070e0:	621a      	str	r2, [r3, #32]
 80070e2:	e00b      	b.n	80070fc <HAL_RCC_OscConfig+0x3a4>
 80070e4:	4bbb      	ldr	r3, [pc, #748]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070e6:	6a1a      	ldr	r2, [r3, #32]
 80070e8:	4bba      	ldr	r3, [pc, #744]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070ea:	2101      	movs	r1, #1
 80070ec:	438a      	bics	r2, r1
 80070ee:	621a      	str	r2, [r3, #32]
 80070f0:	4bb8      	ldr	r3, [pc, #736]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070f2:	6a1a      	ldr	r2, [r3, #32]
 80070f4:	4bb7      	ldr	r3, [pc, #732]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80070f6:	2104      	movs	r1, #4
 80070f8:	438a      	bics	r2, r1
 80070fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d014      	beq.n	800712e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007104:	f7fe fdb0 	bl	8005c68 <HAL_GetTick>
 8007108:	0003      	movs	r3, r0
 800710a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800710c:	e009      	b.n	8007122 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800710e:	f7fe fdab 	bl	8005c68 <HAL_GetTick>
 8007112:	0002      	movs	r2, r0
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	4aaf      	ldr	r2, [pc, #700]	@ (80073d8 <HAL_RCC_OscConfig+0x680>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e19a      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007122:	4bac      	ldr	r3, [pc, #688]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	2202      	movs	r2, #2
 8007128:	4013      	ands	r3, r2
 800712a:	d0f0      	beq.n	800710e <HAL_RCC_OscConfig+0x3b6>
 800712c:	e013      	b.n	8007156 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800712e:	f7fe fd9b 	bl	8005c68 <HAL_GetTick>
 8007132:	0003      	movs	r3, r0
 8007134:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007136:	e009      	b.n	800714c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007138:	f7fe fd96 	bl	8005c68 <HAL_GetTick>
 800713c:	0002      	movs	r2, r0
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	4aa5      	ldr	r2, [pc, #660]	@ (80073d8 <HAL_RCC_OscConfig+0x680>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e185      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800714c:	4ba1      	ldr	r3, [pc, #644]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	2202      	movs	r2, #2
 8007152:	4013      	ands	r3, r2
 8007154:	d1f0      	bne.n	8007138 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007156:	231f      	movs	r3, #31
 8007158:	18fb      	adds	r3, r7, r3
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d105      	bne.n	800716c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007160:	4b9c      	ldr	r3, [pc, #624]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007162:	69da      	ldr	r2, [r3, #28]
 8007164:	4b9b      	ldr	r3, [pc, #620]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007166:	499d      	ldr	r1, [pc, #628]	@ (80073dc <HAL_RCC_OscConfig+0x684>)
 8007168:	400a      	ands	r2, r1
 800716a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2210      	movs	r2, #16
 8007172:	4013      	ands	r3, r2
 8007174:	d063      	beq.n	800723e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d12a      	bne.n	80071d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800717e:	4b95      	ldr	r3, [pc, #596]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007182:	4b94      	ldr	r3, [pc, #592]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007184:	2104      	movs	r1, #4
 8007186:	430a      	orrs	r2, r1
 8007188:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800718a:	4b92      	ldr	r3, [pc, #584]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 800718c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800718e:	4b91      	ldr	r3, [pc, #580]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007190:	2101      	movs	r1, #1
 8007192:	430a      	orrs	r2, r1
 8007194:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007196:	f7fe fd67 	bl	8005c68 <HAL_GetTick>
 800719a:	0003      	movs	r3, r0
 800719c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800719e:	e008      	b.n	80071b2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80071a0:	f7fe fd62 	bl	8005c68 <HAL_GetTick>
 80071a4:	0002      	movs	r2, r0
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e152      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80071b2:	4b88      	ldr	r3, [pc, #544]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80071b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071b6:	2202      	movs	r2, #2
 80071b8:	4013      	ands	r3, r2
 80071ba:	d0f1      	beq.n	80071a0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80071bc:	4b85      	ldr	r3, [pc, #532]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80071be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071c0:	22f8      	movs	r2, #248	@ 0xf8
 80071c2:	4393      	bics	r3, r2
 80071c4:	0019      	movs	r1, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	00da      	lsls	r2, r3, #3
 80071cc:	4b81      	ldr	r3, [pc, #516]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80071ce:	430a      	orrs	r2, r1
 80071d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80071d2:	e034      	b.n	800723e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	3305      	adds	r3, #5
 80071da:	d111      	bne.n	8007200 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80071dc:	4b7d      	ldr	r3, [pc, #500]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80071de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071e0:	4b7c      	ldr	r3, [pc, #496]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80071e2:	2104      	movs	r1, #4
 80071e4:	438a      	bics	r2, r1
 80071e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80071e8:	4b7a      	ldr	r3, [pc, #488]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80071ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ec:	22f8      	movs	r2, #248	@ 0xf8
 80071ee:	4393      	bics	r3, r2
 80071f0:	0019      	movs	r1, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	00da      	lsls	r2, r3, #3
 80071f8:	4b76      	ldr	r3, [pc, #472]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80071fa:	430a      	orrs	r2, r1
 80071fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80071fe:	e01e      	b.n	800723e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007200:	4b74      	ldr	r3, [pc, #464]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007204:	4b73      	ldr	r3, [pc, #460]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007206:	2104      	movs	r1, #4
 8007208:	430a      	orrs	r2, r1
 800720a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800720c:	4b71      	ldr	r3, [pc, #452]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 800720e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007210:	4b70      	ldr	r3, [pc, #448]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007212:	2101      	movs	r1, #1
 8007214:	438a      	bics	r2, r1
 8007216:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007218:	f7fe fd26 	bl	8005c68 <HAL_GetTick>
 800721c:	0003      	movs	r3, r0
 800721e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007222:	f7fe fd21 	bl	8005c68 <HAL_GetTick>
 8007226:	0002      	movs	r2, r0
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e111      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007234:	4b67      	ldr	r3, [pc, #412]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007238:	2202      	movs	r2, #2
 800723a:	4013      	ands	r3, r2
 800723c:	d1f1      	bne.n	8007222 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2220      	movs	r2, #32
 8007244:	4013      	ands	r3, r2
 8007246:	d05c      	beq.n	8007302 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8007248:	4b62      	ldr	r3, [pc, #392]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	220c      	movs	r2, #12
 800724e:	4013      	ands	r3, r2
 8007250:	2b0c      	cmp	r3, #12
 8007252:	d00e      	beq.n	8007272 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8007254:	4b5f      	ldr	r3, [pc, #380]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	220c      	movs	r2, #12
 800725a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800725c:	2b08      	cmp	r3, #8
 800725e:	d114      	bne.n	800728a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8007260:	4b5c      	ldr	r3, [pc, #368]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	23c0      	movs	r3, #192	@ 0xc0
 8007266:	025b      	lsls	r3, r3, #9
 8007268:	401a      	ands	r2, r3
 800726a:	23c0      	movs	r3, #192	@ 0xc0
 800726c:	025b      	lsls	r3, r3, #9
 800726e:	429a      	cmp	r2, r3
 8007270:	d10b      	bne.n	800728a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007272:	4b58      	ldr	r3, [pc, #352]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007276:	2380      	movs	r3, #128	@ 0x80
 8007278:	029b      	lsls	r3, r3, #10
 800727a:	4013      	ands	r3, r2
 800727c:	d040      	beq.n	8007300 <HAL_RCC_OscConfig+0x5a8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d03c      	beq.n	8007300 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e0e6      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d01b      	beq.n	80072ca <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007292:	4b50      	ldr	r3, [pc, #320]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007296:	4b4f      	ldr	r3, [pc, #316]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007298:	2180      	movs	r1, #128	@ 0x80
 800729a:	0249      	lsls	r1, r1, #9
 800729c:	430a      	orrs	r2, r1
 800729e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a0:	f7fe fce2 	bl	8005c68 <HAL_GetTick>
 80072a4:	0003      	movs	r3, r0
 80072a6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072aa:	f7fe fcdd 	bl	8005c68 <HAL_GetTick>
 80072ae:	0002      	movs	r2, r0
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e0cd      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80072bc:	4b45      	ldr	r3, [pc, #276]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80072be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072c0:	2380      	movs	r3, #128	@ 0x80
 80072c2:	029b      	lsls	r3, r3, #10
 80072c4:	4013      	ands	r3, r2
 80072c6:	d0f0      	beq.n	80072aa <HAL_RCC_OscConfig+0x552>
 80072c8:	e01b      	b.n	8007302 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80072ca:	4b42      	ldr	r3, [pc, #264]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80072cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072ce:	4b41      	ldr	r3, [pc, #260]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80072d0:	4943      	ldr	r1, [pc, #268]	@ (80073e0 <HAL_RCC_OscConfig+0x688>)
 80072d2:	400a      	ands	r2, r1
 80072d4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d6:	f7fe fcc7 	bl	8005c68 <HAL_GetTick>
 80072da:	0003      	movs	r3, r0
 80072dc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072e0:	f7fe fcc2 	bl	8005c68 <HAL_GetTick>
 80072e4:	0002      	movs	r2, r0
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e0b2      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80072f2:	4b38      	ldr	r3, [pc, #224]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80072f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072f6:	2380      	movs	r3, #128	@ 0x80
 80072f8:	029b      	lsls	r3, r3, #10
 80072fa:	4013      	ands	r3, r2
 80072fc:	d1f0      	bne.n	80072e0 <HAL_RCC_OscConfig+0x588>
 80072fe:	e000      	b.n	8007302 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007300:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	d100      	bne.n	800730c <HAL_RCC_OscConfig+0x5b4>
 800730a:	e0a4      	b.n	8007456 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800730c:	4b31      	ldr	r3, [pc, #196]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	220c      	movs	r2, #12
 8007312:	4013      	ands	r3, r2
 8007314:	2b08      	cmp	r3, #8
 8007316:	d100      	bne.n	800731a <HAL_RCC_OscConfig+0x5c2>
 8007318:	e078      	b.n	800740c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731e:	2b02      	cmp	r3, #2
 8007320:	d14c      	bne.n	80073bc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007322:	4b2c      	ldr	r3, [pc, #176]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	4b2b      	ldr	r3, [pc, #172]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007328:	492e      	ldr	r1, [pc, #184]	@ (80073e4 <HAL_RCC_OscConfig+0x68c>)
 800732a:	400a      	ands	r2, r1
 800732c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800732e:	f7fe fc9b 	bl	8005c68 <HAL_GetTick>
 8007332:	0003      	movs	r3, r0
 8007334:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007336:	e008      	b.n	800734a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007338:	f7fe fc96 	bl	8005c68 <HAL_GetTick>
 800733c:	0002      	movs	r2, r0
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b02      	cmp	r3, #2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e086      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800734a:	4b22      	ldr	r3, [pc, #136]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	2380      	movs	r3, #128	@ 0x80
 8007350:	049b      	lsls	r3, r3, #18
 8007352:	4013      	ands	r3, r2
 8007354:	d1f0      	bne.n	8007338 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007356:	4b1f      	ldr	r3, [pc, #124]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735a:	220f      	movs	r2, #15
 800735c:	4393      	bics	r3, r2
 800735e:	0019      	movs	r1, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007364:	4b1b      	ldr	r3, [pc, #108]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007366:	430a      	orrs	r2, r1
 8007368:	62da      	str	r2, [r3, #44]	@ 0x2c
 800736a:	4b1a      	ldr	r3, [pc, #104]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	4a1e      	ldr	r2, [pc, #120]	@ (80073e8 <HAL_RCC_OscConfig+0x690>)
 8007370:	4013      	ands	r3, r2
 8007372:	0019      	movs	r1, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	431a      	orrs	r2, r3
 800737e:	4b15      	ldr	r3, [pc, #84]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007384:	4b13      	ldr	r3, [pc, #76]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	4b12      	ldr	r3, [pc, #72]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 800738a:	2180      	movs	r1, #128	@ 0x80
 800738c:	0449      	lsls	r1, r1, #17
 800738e:	430a      	orrs	r2, r1
 8007390:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007392:	f7fe fc69 	bl	8005c68 <HAL_GetTick>
 8007396:	0003      	movs	r3, r0
 8007398:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800739a:	e008      	b.n	80073ae <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800739c:	f7fe fc64 	bl	8005c68 <HAL_GetTick>
 80073a0:	0002      	movs	r2, r0
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e054      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073ae:	4b09      	ldr	r3, [pc, #36]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	2380      	movs	r3, #128	@ 0x80
 80073b4:	049b      	lsls	r3, r3, #18
 80073b6:	4013      	ands	r3, r2
 80073b8:	d0f0      	beq.n	800739c <HAL_RCC_OscConfig+0x644>
 80073ba:	e04c      	b.n	8007456 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073bc:	4b05      	ldr	r3, [pc, #20]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4b04      	ldr	r3, [pc, #16]	@ (80073d4 <HAL_RCC_OscConfig+0x67c>)
 80073c2:	4908      	ldr	r1, [pc, #32]	@ (80073e4 <HAL_RCC_OscConfig+0x68c>)
 80073c4:	400a      	ands	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c8:	f7fe fc4e 	bl	8005c68 <HAL_GetTick>
 80073cc:	0003      	movs	r3, r0
 80073ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073d0:	e015      	b.n	80073fe <HAL_RCC_OscConfig+0x6a6>
 80073d2:	46c0      	nop			@ (mov r8, r8)
 80073d4:	40021000 	.word	0x40021000
 80073d8:	00001388 	.word	0x00001388
 80073dc:	efffffff 	.word	0xefffffff
 80073e0:	fffeffff 	.word	0xfffeffff
 80073e4:	feffffff 	.word	0xfeffffff
 80073e8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ec:	f7fe fc3c 	bl	8005c68 <HAL_GetTick>
 80073f0:	0002      	movs	r2, r0
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e02c      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073fe:	4b18      	ldr	r3, [pc, #96]	@ (8007460 <HAL_RCC_OscConfig+0x708>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	2380      	movs	r3, #128	@ 0x80
 8007404:	049b      	lsls	r3, r3, #18
 8007406:	4013      	ands	r3, r2
 8007408:	d1f0      	bne.n	80073ec <HAL_RCC_OscConfig+0x694>
 800740a:	e024      	b.n	8007456 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e01f      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007418:	4b11      	ldr	r3, [pc, #68]	@ (8007460 <HAL_RCC_OscConfig+0x708>)
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800741e:	4b10      	ldr	r3, [pc, #64]	@ (8007460 <HAL_RCC_OscConfig+0x708>)
 8007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007422:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	23c0      	movs	r3, #192	@ 0xc0
 8007428:	025b      	lsls	r3, r3, #9
 800742a:	401a      	ands	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007430:	429a      	cmp	r2, r3
 8007432:	d10e      	bne.n	8007452 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	220f      	movs	r2, #15
 8007438:	401a      	ands	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800743e:	429a      	cmp	r2, r3
 8007440:	d107      	bne.n	8007452 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	23f0      	movs	r3, #240	@ 0xf0
 8007446:	039b      	lsls	r3, r3, #14
 8007448:	401a      	ands	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800744e:	429a      	cmp	r2, r3
 8007450:	d001      	beq.n	8007456 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	0018      	movs	r0, r3
 800745a:	46bd      	mov	sp, r7
 800745c:	b008      	add	sp, #32
 800745e:	bd80      	pop	{r7, pc}
 8007460:	40021000 	.word	0x40021000

08007464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e0bf      	b.n	80075f8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007478:	4b61      	ldr	r3, [pc, #388]	@ (8007600 <HAL_RCC_ClockConfig+0x19c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2201      	movs	r2, #1
 800747e:	4013      	ands	r3, r2
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	d911      	bls.n	80074aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007486:	4b5e      	ldr	r3, [pc, #376]	@ (8007600 <HAL_RCC_ClockConfig+0x19c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2201      	movs	r2, #1
 800748c:	4393      	bics	r3, r2
 800748e:	0019      	movs	r1, r3
 8007490:	4b5b      	ldr	r3, [pc, #364]	@ (8007600 <HAL_RCC_ClockConfig+0x19c>)
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007498:	4b59      	ldr	r3, [pc, #356]	@ (8007600 <HAL_RCC_ClockConfig+0x19c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2201      	movs	r2, #1
 800749e:	4013      	ands	r3, r2
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d001      	beq.n	80074aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e0a6      	b.n	80075f8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2202      	movs	r2, #2
 80074b0:	4013      	ands	r3, r2
 80074b2:	d015      	beq.n	80074e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2204      	movs	r2, #4
 80074ba:	4013      	ands	r3, r2
 80074bc:	d006      	beq.n	80074cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80074be:	4b51      	ldr	r3, [pc, #324]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	4b50      	ldr	r3, [pc, #320]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 80074c4:	21e0      	movs	r1, #224	@ 0xe0
 80074c6:	00c9      	lsls	r1, r1, #3
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074cc:	4b4d      	ldr	r3, [pc, #308]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	22f0      	movs	r2, #240	@ 0xf0
 80074d2:	4393      	bics	r3, r2
 80074d4:	0019      	movs	r1, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	4b4a      	ldr	r3, [pc, #296]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 80074dc:	430a      	orrs	r2, r1
 80074de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2201      	movs	r2, #1
 80074e6:	4013      	ands	r3, r2
 80074e8:	d04c      	beq.n	8007584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d107      	bne.n	8007502 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074f2:	4b44      	ldr	r3, [pc, #272]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	2380      	movs	r3, #128	@ 0x80
 80074f8:	029b      	lsls	r3, r3, #10
 80074fa:	4013      	ands	r3, r2
 80074fc:	d120      	bne.n	8007540 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e07a      	b.n	80075f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	2b02      	cmp	r3, #2
 8007508:	d107      	bne.n	800751a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800750a:	4b3e      	ldr	r3, [pc, #248]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	2380      	movs	r3, #128	@ 0x80
 8007510:	049b      	lsls	r3, r3, #18
 8007512:	4013      	ands	r3, r2
 8007514:	d114      	bne.n	8007540 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e06e      	b.n	80075f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b03      	cmp	r3, #3
 8007520:	d107      	bne.n	8007532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007522:	4b38      	ldr	r3, [pc, #224]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 8007524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007526:	2380      	movs	r3, #128	@ 0x80
 8007528:	029b      	lsls	r3, r3, #10
 800752a:	4013      	ands	r3, r2
 800752c:	d108      	bne.n	8007540 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e062      	b.n	80075f8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007532:	4b34      	ldr	r3, [pc, #208]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2202      	movs	r2, #2
 8007538:	4013      	ands	r3, r2
 800753a:	d101      	bne.n	8007540 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e05b      	b.n	80075f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007540:	4b30      	ldr	r3, [pc, #192]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2203      	movs	r2, #3
 8007546:	4393      	bics	r3, r2
 8007548:	0019      	movs	r1, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	4b2d      	ldr	r3, [pc, #180]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 8007550:	430a      	orrs	r2, r1
 8007552:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007554:	f7fe fb88 	bl	8005c68 <HAL_GetTick>
 8007558:	0003      	movs	r3, r0
 800755a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800755c:	e009      	b.n	8007572 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800755e:	f7fe fb83 	bl	8005c68 <HAL_GetTick>
 8007562:	0002      	movs	r2, r0
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	4a27      	ldr	r2, [pc, #156]	@ (8007608 <HAL_RCC_ClockConfig+0x1a4>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d901      	bls.n	8007572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e042      	b.n	80075f8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007572:	4b24      	ldr	r3, [pc, #144]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	220c      	movs	r2, #12
 8007578:	401a      	ands	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	429a      	cmp	r2, r3
 8007582:	d1ec      	bne.n	800755e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007584:	4b1e      	ldr	r3, [pc, #120]	@ (8007600 <HAL_RCC_ClockConfig+0x19c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2201      	movs	r2, #1
 800758a:	4013      	ands	r3, r2
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d211      	bcs.n	80075b6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007592:	4b1b      	ldr	r3, [pc, #108]	@ (8007600 <HAL_RCC_ClockConfig+0x19c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2201      	movs	r2, #1
 8007598:	4393      	bics	r3, r2
 800759a:	0019      	movs	r1, r3
 800759c:	4b18      	ldr	r3, [pc, #96]	@ (8007600 <HAL_RCC_ClockConfig+0x19c>)
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075a4:	4b16      	ldr	r3, [pc, #88]	@ (8007600 <HAL_RCC_ClockConfig+0x19c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2201      	movs	r2, #1
 80075aa:	4013      	ands	r3, r2
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d001      	beq.n	80075b6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e020      	b.n	80075f8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2204      	movs	r2, #4
 80075bc:	4013      	ands	r3, r2
 80075be:	d009      	beq.n	80075d4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80075c0:	4b10      	ldr	r3, [pc, #64]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	4a11      	ldr	r2, [pc, #68]	@ (800760c <HAL_RCC_ClockConfig+0x1a8>)
 80075c6:	4013      	ands	r3, r2
 80075c8:	0019      	movs	r1, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 80075d0:	430a      	orrs	r2, r1
 80075d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80075d4:	f000 f820 	bl	8007618 <HAL_RCC_GetSysClockFreq>
 80075d8:	0001      	movs	r1, r0
 80075da:	4b0a      	ldr	r3, [pc, #40]	@ (8007604 <HAL_RCC_ClockConfig+0x1a0>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	091b      	lsrs	r3, r3, #4
 80075e0:	220f      	movs	r2, #15
 80075e2:	4013      	ands	r3, r2
 80075e4:	4a0a      	ldr	r2, [pc, #40]	@ (8007610 <HAL_RCC_ClockConfig+0x1ac>)
 80075e6:	5cd3      	ldrb	r3, [r2, r3]
 80075e8:	000a      	movs	r2, r1
 80075ea:	40da      	lsrs	r2, r3
 80075ec:	4b09      	ldr	r3, [pc, #36]	@ (8007614 <HAL_RCC_ClockConfig+0x1b0>)
 80075ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80075f0:	2000      	movs	r0, #0
 80075f2:	f7fe faf3 	bl	8005bdc <HAL_InitTick>
  
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	0018      	movs	r0, r3
 80075fa:	46bd      	mov	sp, r7
 80075fc:	b004      	add	sp, #16
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	40022000 	.word	0x40022000
 8007604:	40021000 	.word	0x40021000
 8007608:	00001388 	.word	0x00001388
 800760c:	fffff8ff 	.word	0xfffff8ff
 8007610:	0800ec1c 	.word	0x0800ec1c
 8007614:	20000018 	.word	0x20000018

08007618 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	2300      	movs	r3, #0
 8007624:	60bb      	str	r3, [r7, #8]
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	2300      	movs	r3, #0
 800762c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007632:	4b2d      	ldr	r3, [pc, #180]	@ (80076e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	220c      	movs	r2, #12
 800763c:	4013      	ands	r3, r2
 800763e:	2b0c      	cmp	r3, #12
 8007640:	d046      	beq.n	80076d0 <HAL_RCC_GetSysClockFreq+0xb8>
 8007642:	d848      	bhi.n	80076d6 <HAL_RCC_GetSysClockFreq+0xbe>
 8007644:	2b04      	cmp	r3, #4
 8007646:	d002      	beq.n	800764e <HAL_RCC_GetSysClockFreq+0x36>
 8007648:	2b08      	cmp	r3, #8
 800764a:	d003      	beq.n	8007654 <HAL_RCC_GetSysClockFreq+0x3c>
 800764c:	e043      	b.n	80076d6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800764e:	4b27      	ldr	r3, [pc, #156]	@ (80076ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8007650:	613b      	str	r3, [r7, #16]
      break;
 8007652:	e043      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	0c9b      	lsrs	r3, r3, #18
 8007658:	220f      	movs	r2, #15
 800765a:	4013      	ands	r3, r2
 800765c:	4a24      	ldr	r2, [pc, #144]	@ (80076f0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800765e:	5cd3      	ldrb	r3, [r2, r3]
 8007660:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007662:	4b21      	ldr	r3, [pc, #132]	@ (80076e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007666:	220f      	movs	r2, #15
 8007668:	4013      	ands	r3, r2
 800766a:	4a22      	ldr	r2, [pc, #136]	@ (80076f4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800766c:	5cd3      	ldrb	r3, [r2, r3]
 800766e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	23c0      	movs	r3, #192	@ 0xc0
 8007674:	025b      	lsls	r3, r3, #9
 8007676:	401a      	ands	r2, r3
 8007678:	2380      	movs	r3, #128	@ 0x80
 800767a:	025b      	lsls	r3, r3, #9
 800767c:	429a      	cmp	r2, r3
 800767e:	d109      	bne.n	8007694 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007680:	68b9      	ldr	r1, [r7, #8]
 8007682:	481a      	ldr	r0, [pc, #104]	@ (80076ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8007684:	f7f8 fd5a 	bl	800013c <__udivsi3>
 8007688:	0003      	movs	r3, r0
 800768a:	001a      	movs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4353      	muls	r3, r2
 8007690:	617b      	str	r3, [r7, #20]
 8007692:	e01a      	b.n	80076ca <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	23c0      	movs	r3, #192	@ 0xc0
 8007698:	025b      	lsls	r3, r3, #9
 800769a:	401a      	ands	r2, r3
 800769c:	23c0      	movs	r3, #192	@ 0xc0
 800769e:	025b      	lsls	r3, r3, #9
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d109      	bne.n	80076b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	4814      	ldr	r0, [pc, #80]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80076a8:	f7f8 fd48 	bl	800013c <__udivsi3>
 80076ac:	0003      	movs	r3, r0
 80076ae:	001a      	movs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4353      	muls	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	e008      	b.n	80076ca <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	480c      	ldr	r0, [pc, #48]	@ (80076ec <HAL_RCC_GetSysClockFreq+0xd4>)
 80076bc:	f7f8 fd3e 	bl	800013c <__udivsi3>
 80076c0:	0003      	movs	r3, r0
 80076c2:	001a      	movs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4353      	muls	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	613b      	str	r3, [r7, #16]
      break;
 80076ce:	e005      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80076d0:	4b09      	ldr	r3, [pc, #36]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80076d2:	613b      	str	r3, [r7, #16]
      break;
 80076d4:	e002      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80076d6:	4b05      	ldr	r3, [pc, #20]	@ (80076ec <HAL_RCC_GetSysClockFreq+0xd4>)
 80076d8:	613b      	str	r3, [r7, #16]
      break;
 80076da:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80076dc:	693b      	ldr	r3, [r7, #16]
}
 80076de:	0018      	movs	r0, r3
 80076e0:	46bd      	mov	sp, r7
 80076e2:	b006      	add	sp, #24
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	46c0      	nop			@ (mov r8, r8)
 80076e8:	40021000 	.word	0x40021000
 80076ec:	007a1200 	.word	0x007a1200
 80076f0:	0800ec54 	.word	0x0800ec54
 80076f4:	0800ec64 	.word	0x0800ec64
 80076f8:	02dc6c00 	.word	0x02dc6c00

080076fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e0a8      	b.n	8007860 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	2382      	movs	r3, #130	@ 0x82
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	429a      	cmp	r2, r3
 8007720:	d009      	beq.n	8007736 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	61da      	str	r2, [r3, #28]
 8007728:	e005      	b.n	8007736 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	225d      	movs	r2, #93	@ 0x5d
 8007740:	5c9b      	ldrb	r3, [r3, r2]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d107      	bne.n	8007758 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	225c      	movs	r2, #92	@ 0x5c
 800774c:	2100      	movs	r1, #0
 800774e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	0018      	movs	r0, r3
 8007754:	f7fd f8fa 	bl	800494c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	225d      	movs	r2, #93	@ 0x5d
 800775c:	2102      	movs	r1, #2
 800775e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2140      	movs	r1, #64	@ 0x40
 800776c:	438a      	bics	r2, r1
 800776e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	23e0      	movs	r3, #224	@ 0xe0
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	429a      	cmp	r2, r3
 800777a:	d902      	bls.n	8007782 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800777c:	2300      	movs	r3, #0
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	e002      	b.n	8007788 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007782:	2380      	movs	r3, #128	@ 0x80
 8007784:	015b      	lsls	r3, r3, #5
 8007786:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	23f0      	movs	r3, #240	@ 0xf0
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	429a      	cmp	r2, r3
 8007792:	d008      	beq.n	80077a6 <HAL_SPI_Init+0xaa>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	23e0      	movs	r3, #224	@ 0xe0
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	429a      	cmp	r2, r3
 800779e:	d002      	beq.n	80077a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	2382      	movs	r3, #130	@ 0x82
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	401a      	ands	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6899      	ldr	r1, [r3, #8]
 80077b4:	2384      	movs	r3, #132	@ 0x84
 80077b6:	021b      	lsls	r3, r3, #8
 80077b8:	400b      	ands	r3, r1
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	2102      	movs	r1, #2
 80077c2:	400b      	ands	r3, r1
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	2101      	movs	r1, #1
 80077cc:	400b      	ands	r3, r1
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6999      	ldr	r1, [r3, #24]
 80077d4:	2380      	movs	r3, #128	@ 0x80
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	400b      	ands	r3, r1
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	2138      	movs	r1, #56	@ 0x38
 80077e2:	400b      	ands	r3, r1
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	2180      	movs	r1, #128	@ 0x80
 80077ec:	400b      	ands	r3, r1
 80077ee:	431a      	orrs	r2, r3
 80077f0:	0011      	movs	r1, r2
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077f6:	2380      	movs	r3, #128	@ 0x80
 80077f8:	019b      	lsls	r3, r3, #6
 80077fa:	401a      	ands	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	0c1b      	lsrs	r3, r3, #16
 800780a:	2204      	movs	r2, #4
 800780c:	401a      	ands	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007812:	2110      	movs	r1, #16
 8007814:	400b      	ands	r3, r1
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800781c:	2108      	movs	r1, #8
 800781e:	400b      	ands	r3, r1
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68d9      	ldr	r1, [r3, #12]
 8007826:	23f0      	movs	r3, #240	@ 0xf0
 8007828:	011b      	lsls	r3, r3, #4
 800782a:	400b      	ands	r3, r1
 800782c:	431a      	orrs	r2, r3
 800782e:	0011      	movs	r1, r2
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	2380      	movs	r3, #128	@ 0x80
 8007834:	015b      	lsls	r3, r3, #5
 8007836:	401a      	ands	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69da      	ldr	r2, [r3, #28]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4907      	ldr	r1, [pc, #28]	@ (8007868 <HAL_SPI_Init+0x16c>)
 800784c:	400a      	ands	r2, r1
 800784e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	225d      	movs	r2, #93	@ 0x5d
 800785a:	2101      	movs	r1, #1
 800785c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	0018      	movs	r0, r3
 8007862:	46bd      	mov	sp, r7
 8007864:	b004      	add	sp, #16
 8007866:	bd80      	pop	{r7, pc}
 8007868:	fffff7ff 	.word	0xfffff7ff

0800786c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	1dbb      	adds	r3, r7, #6
 800787a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800787c:	231f      	movs	r3, #31
 800787e:	18fb      	adds	r3, r7, r3
 8007880:	2200      	movs	r2, #0
 8007882:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	225c      	movs	r2, #92	@ 0x5c
 8007888:	5c9b      	ldrb	r3, [r3, r2]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_SPI_Transmit+0x26>
 800788e:	2302      	movs	r3, #2
 8007890:	e147      	b.n	8007b22 <HAL_SPI_Transmit+0x2b6>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	225c      	movs	r2, #92	@ 0x5c
 8007896:	2101      	movs	r1, #1
 8007898:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800789a:	f7fe f9e5 	bl	8005c68 <HAL_GetTick>
 800789e:	0003      	movs	r3, r0
 80078a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80078a2:	2316      	movs	r3, #22
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	1dba      	adds	r2, r7, #6
 80078a8:	8812      	ldrh	r2, [r2, #0]
 80078aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	225d      	movs	r2, #93	@ 0x5d
 80078b0:	5c9b      	ldrb	r3, [r3, r2]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d004      	beq.n	80078c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80078b8:	231f      	movs	r3, #31
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	2202      	movs	r2, #2
 80078be:	701a      	strb	r2, [r3, #0]
    goto error;
 80078c0:	e128      	b.n	8007b14 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <HAL_SPI_Transmit+0x64>
 80078c8:	1dbb      	adds	r3, r7, #6
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80078d0:	231f      	movs	r3, #31
 80078d2:	18fb      	adds	r3, r7, r3
 80078d4:	2201      	movs	r2, #1
 80078d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80078d8:	e11c      	b.n	8007b14 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	225d      	movs	r2, #93	@ 0x5d
 80078de:	2103      	movs	r1, #3
 80078e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	1dba      	adds	r2, r7, #6
 80078f2:	8812      	ldrh	r2, [r2, #0]
 80078f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	1dba      	adds	r2, r7, #6
 80078fa:	8812      	ldrh	r2, [r2, #0]
 80078fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2244      	movs	r2, #68	@ 0x44
 8007908:	2100      	movs	r1, #0
 800790a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2246      	movs	r2, #70	@ 0x46
 8007910:	2100      	movs	r1, #0
 8007912:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	2380      	movs	r3, #128	@ 0x80
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	429a      	cmp	r2, r3
 800792a:	d110      	bne.n	800794e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2140      	movs	r1, #64	@ 0x40
 8007938:	438a      	bics	r2, r1
 800793a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2180      	movs	r1, #128	@ 0x80
 8007948:	01c9      	lsls	r1, r1, #7
 800794a:	430a      	orrs	r2, r1
 800794c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2240      	movs	r2, #64	@ 0x40
 8007956:	4013      	ands	r3, r2
 8007958:	2b40      	cmp	r3, #64	@ 0x40
 800795a:	d007      	beq.n	800796c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2140      	movs	r1, #64	@ 0x40
 8007968:	430a      	orrs	r2, r1
 800796a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	68da      	ldr	r2, [r3, #12]
 8007970:	23e0      	movs	r3, #224	@ 0xe0
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	429a      	cmp	r2, r3
 8007976:	d952      	bls.n	8007a1e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d004      	beq.n	800798a <HAL_SPI_Transmit+0x11e>
 8007980:	2316      	movs	r3, #22
 8007982:	18fb      	adds	r3, r7, r3
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d143      	bne.n	8007a12 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	881a      	ldrh	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799a:	1c9a      	adds	r2, r3, #2
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079ae:	e030      	b.n	8007a12 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2202      	movs	r2, #2
 80079b8:	4013      	ands	r3, r2
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d112      	bne.n	80079e4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c2:	881a      	ldrh	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ce:	1c9a      	adds	r2, r3, #2
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079e2:	e016      	b.n	8007a12 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079e4:	f7fe f940 	bl	8005c68 <HAL_GetTick>
 80079e8:	0002      	movs	r2, r0
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d802      	bhi.n	80079fa <HAL_SPI_Transmit+0x18e>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	3301      	adds	r3, #1
 80079f8:	d102      	bne.n	8007a00 <HAL_SPI_Transmit+0x194>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d108      	bne.n	8007a12 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8007a00:	231f      	movs	r3, #31
 8007a02:	18fb      	adds	r3, r7, r3
 8007a04:	2203      	movs	r2, #3
 8007a06:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	225d      	movs	r2, #93	@ 0x5d
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	5499      	strb	r1, [r3, r2]
          goto error;
 8007a10:	e080      	b.n	8007b14 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1c9      	bne.n	80079b0 <HAL_SPI_Transmit+0x144>
 8007a1c:	e053      	b.n	8007ac6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d004      	beq.n	8007a30 <HAL_SPI_Transmit+0x1c4>
 8007a26:	2316      	movs	r3, #22
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d145      	bne.n	8007abc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	330c      	adds	r3, #12
 8007a3a:	7812      	ldrb	r2, [r2, #0]
 8007a3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007a56:	e031      	b.n	8007abc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	4013      	ands	r3, r2
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d113      	bne.n	8007a8e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	7812      	ldrb	r2, [r2, #0]
 8007a72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a8c:	e016      	b.n	8007abc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a8e:	f7fe f8eb 	bl	8005c68 <HAL_GetTick>
 8007a92:	0002      	movs	r2, r0
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d802      	bhi.n	8007aa4 <HAL_SPI_Transmit+0x238>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	d102      	bne.n	8007aaa <HAL_SPI_Transmit+0x23e>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d108      	bne.n	8007abc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8007aaa:	231f      	movs	r3, #31
 8007aac:	18fb      	adds	r3, r7, r3
 8007aae:	2203      	movs	r2, #3
 8007ab0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	225d      	movs	r2, #93	@ 0x5d
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	5499      	strb	r1, [r3, r2]
          goto error;
 8007aba:	e02b      	b.n	8007b14 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1c8      	bne.n	8007a58 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	0018      	movs	r0, r3
 8007ace:	f000 faf5 	bl	80080bc <SPI_EndRxTxTransaction>
 8007ad2:	1e03      	subs	r3, r0, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10a      	bne.n	8007afa <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	613b      	str	r3, [r7, #16]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d004      	beq.n	8007b0c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8007b02:	231f      	movs	r3, #31
 8007b04:	18fb      	adds	r3, r7, r3
 8007b06:	2201      	movs	r2, #1
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	e003      	b.n	8007b14 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	225d      	movs	r2, #93	@ 0x5d
 8007b10:	2101      	movs	r1, #1
 8007b12:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	225c      	movs	r2, #92	@ 0x5c
 8007b18:	2100      	movs	r1, #0
 8007b1a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007b1c:	231f      	movs	r3, #31
 8007b1e:	18fb      	adds	r3, r7, r3
 8007b20:	781b      	ldrb	r3, [r3, #0]
}
 8007b22:	0018      	movs	r0, r3
 8007b24:	46bd      	mov	sp, r7
 8007b26:	b008      	add	sp, #32
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	1dbb      	adds	r3, r7, #6
 8007b38:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b3a:	2317      	movs	r3, #23
 8007b3c:	18fb      	adds	r3, r7, r3
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	225c      	movs	r2, #92	@ 0x5c
 8007b46:	5c9b      	ldrb	r3, [r3, r2]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_SPI_Transmit_DMA+0x24>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e0e3      	b.n	8007d18 <HAL_SPI_Transmit_DMA+0x1ec>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	225c      	movs	r2, #92	@ 0x5c
 8007b54:	2101      	movs	r1, #1
 8007b56:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	225d      	movs	r2, #93	@ 0x5d
 8007b5c:	5c9b      	ldrb	r3, [r3, r2]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d004      	beq.n	8007b6e <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8007b64:	2317      	movs	r3, #23
 8007b66:	18fb      	adds	r3, r7, r3
 8007b68:	2202      	movs	r2, #2
 8007b6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8007b6c:	e0cd      	b.n	8007d0a <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_SPI_Transmit_DMA+0x50>
 8007b74:	1dbb      	adds	r3, r7, #6
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d104      	bne.n	8007b86 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8007b7c:	2317      	movs	r3, #23
 8007b7e:	18fb      	adds	r3, r7, r3
 8007b80:	2201      	movs	r2, #1
 8007b82:	701a      	strb	r2, [r3, #0]
    goto error;
 8007b84:	e0c1      	b.n	8007d0a <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	225d      	movs	r2, #93	@ 0x5d
 8007b8a:	2103      	movs	r1, #3
 8007b8c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	1dba      	adds	r2, r7, #6
 8007b9e:	8812      	ldrh	r2, [r2, #0]
 8007ba0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	1dba      	adds	r2, r7, #6
 8007ba6:	8812      	ldrh	r2, [r2, #0]
 8007ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2244      	movs	r2, #68	@ 0x44
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2246      	movs	r2, #70	@ 0x46
 8007bc8:	2100      	movs	r1, #0
 8007bca:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	2380      	movs	r3, #128	@ 0x80
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d110      	bne.n	8007bfa <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2140      	movs	r1, #64	@ 0x40
 8007be4:	438a      	bics	r2, r1
 8007be6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2180      	movs	r1, #128	@ 0x80
 8007bf4:	01c9      	lsls	r1, r1, #7
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bfe:	4a48      	ldr	r2, [pc, #288]	@ (8007d20 <HAL_SPI_Transmit_DMA+0x1f4>)
 8007c00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c06:	4a47      	ldr	r2, [pc, #284]	@ (8007d24 <HAL_SPI_Transmit_DMA+0x1f8>)
 8007c08:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c0e:	4a46      	ldr	r2, [pc, #280]	@ (8007d28 <HAL_SPI_Transmit_DMA+0x1fc>)
 8007c10:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c16:	2200      	movs	r2, #0
 8007c18:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4941      	ldr	r1, [pc, #260]	@ (8007d2c <HAL_SPI_Transmit_DMA+0x200>)
 8007c26:	400a      	ands	r2, r1
 8007c28:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	23e0      	movs	r3, #224	@ 0xe0
 8007c30:	00db      	lsls	r3, r3, #3
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d82f      	bhi.n	8007c96 <HAL_SPI_Transmit_DMA+0x16a>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c3a:	695a      	ldr	r2, [r3, #20]
 8007c3c:	2380      	movs	r3, #128	@ 0x80
 8007c3e:	00db      	lsls	r3, r3, #3
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d128      	bne.n	8007c96 <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	001a      	movs	r2, r3
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4013      	ands	r3, r2
 8007c50:	d10f      	bne.n	8007c72 <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4933      	ldr	r1, [pc, #204]	@ (8007d2c <HAL_SPI_Transmit_DMA+0x200>)
 8007c5e:	400a      	ands	r2, r1
 8007c60:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	085b      	lsrs	r3, r3, #1
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c70:	e011      	b.n	8007c96 <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2180      	movs	r1, #128	@ 0x80
 8007c7e:	01c9      	lsls	r1, r1, #7
 8007c80:	430a      	orrs	r2, r1
 8007c82:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	085b      	lsrs	r3, r3, #1
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3301      	adds	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c9e:	0019      	movs	r1, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	330c      	adds	r3, #12
 8007ca6:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007cae:	f7fe fd17 	bl	80066e0 <HAL_DMA_Start_IT>
 8007cb2:	1e03      	subs	r3, r0, #0
 8007cb4:	d00a      	beq.n	8007ccc <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cba:	2210      	movs	r2, #16
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007cc2:	2317      	movs	r3, #23
 8007cc4:	18fb      	adds	r3, r7, r3
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	701a      	strb	r2, [r3, #0]

    goto error;
 8007cca:	e01e      	b.n	8007d0a <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2240      	movs	r2, #64	@ 0x40
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b40      	cmp	r3, #64	@ 0x40
 8007cd8:	d007      	beq.n	8007cea <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2140      	movs	r1, #64	@ 0x40
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2120      	movs	r1, #32
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2102      	movs	r1, #2
 8007d06:	430a      	orrs	r2, r1
 8007d08:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	225c      	movs	r2, #92	@ 0x5c
 8007d0e:	2100      	movs	r1, #0
 8007d10:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007d12:	2317      	movs	r3, #23
 8007d14:	18fb      	adds	r3, r7, r3
 8007d16:	781b      	ldrb	r3, [r3, #0]
}
 8007d18:	0018      	movs	r0, r3
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	b006      	add	sp, #24
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	08007dfd 	.word	0x08007dfd
 8007d24:	08007d51 	.word	0x08007d51
 8007d28:	08007e1b 	.word	0x08007e1b
 8007d2c:	ffffbfff 	.word	0xffffbfff

08007d30 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007d38:	46c0      	nop			@ (mov r8, r8)
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	b002      	add	sp, #8
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007d48:	46c0      	nop			@ (mov r8, r8)
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	b002      	add	sp, #8
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d5e:	f7fd ff83 	bl	8005c68 <HAL_GetTick>
 8007d62:	0003      	movs	r3, r0
 8007d64:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	4013      	ands	r3, r2
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d03c      	beq.n	8007dee <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2120      	movs	r1, #32
 8007d80:	438a      	bics	r2, r1
 8007d82:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2102      	movs	r1, #2
 8007d90:	438a      	bics	r2, r1
 8007d92:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2164      	movs	r1, #100	@ 0x64
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f000 f98e 	bl	80080bc <SPI_EndRxTxTransaction>
 8007da0:	1e03      	subs	r3, r0, #0
 8007da2:	d005      	beq.n	8007db0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007da8:	2220      	movs	r2, #32
 8007daa:	431a      	orrs	r2, r3
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	225d      	movs	r2, #93	@ 0x5d
 8007dd8:	2101      	movs	r1, #1
 8007dda:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d004      	beq.n	8007dee <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	0018      	movs	r0, r3
 8007de8:	f7ff ffaa 	bl	8007d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007dec:	e003      	b.n	8007df6 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	0018      	movs	r0, r3
 8007df2:	f7fb fc4b 	bl	800368c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007df6:	46bd      	mov	sp, r7
 8007df8:	b006      	add	sp, #24
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f7ff ff8f 	bl	8007d30 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e12:	46c0      	nop			@ (mov r8, r8)
 8007e14:	46bd      	mov	sp, r7
 8007e16:	b004      	add	sp, #16
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2103      	movs	r1, #3
 8007e34:	438a      	bics	r2, r1
 8007e36:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e3c:	2210      	movs	r2, #16
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	225d      	movs	r2, #93	@ 0x5d
 8007e48:	2101      	movs	r1, #1
 8007e4a:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f7ff ff76 	bl	8007d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e54:	46c0      	nop			@ (mov r8, r8)
 8007e56:	46bd      	mov	sp, r7
 8007e58:	b004      	add	sp, #16
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	1dfb      	adds	r3, r7, #7
 8007e6a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e6c:	f7fd fefc 	bl	8005c68 <HAL_GetTick>
 8007e70:	0002      	movs	r2, r0
 8007e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e74:	1a9b      	subs	r3, r3, r2
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	18d3      	adds	r3, r2, r3
 8007e7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e7c:	f7fd fef4 	bl	8005c68 <HAL_GetTick>
 8007e80:	0003      	movs	r3, r0
 8007e82:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e84:	4b3a      	ldr	r3, [pc, #232]	@ (8007f70 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	015b      	lsls	r3, r3, #5
 8007e8a:	0d1b      	lsrs	r3, r3, #20
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	4353      	muls	r3, r2
 8007e90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e92:	e058      	b.n	8007f46 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	3301      	adds	r3, #1
 8007e98:	d055      	beq.n	8007f46 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e9a:	f7fd fee5 	bl	8005c68 <HAL_GetTick>
 8007e9e:	0002      	movs	r2, r0
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	69fa      	ldr	r2, [r7, #28]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d902      	bls.n	8007eb0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d142      	bne.n	8007f36 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	21e0      	movs	r1, #224	@ 0xe0
 8007ebc:	438a      	bics	r2, r1
 8007ebe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	2382      	movs	r3, #130	@ 0x82
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d113      	bne.n	8007ef4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	2380      	movs	r3, #128	@ 0x80
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d005      	beq.n	8007ee4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	2380      	movs	r3, #128	@ 0x80
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d107      	bne.n	8007ef4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2140      	movs	r1, #64	@ 0x40
 8007ef0:	438a      	bics	r2, r1
 8007ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ef8:	2380      	movs	r3, #128	@ 0x80
 8007efa:	019b      	lsls	r3, r3, #6
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d110      	bne.n	8007f22 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	491a      	ldr	r1, [pc, #104]	@ (8007f74 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007f0c:	400a      	ands	r2, r1
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2180      	movs	r1, #128	@ 0x80
 8007f1c:	0189      	lsls	r1, r1, #6
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	225d      	movs	r2, #93	@ 0x5d
 8007f26:	2101      	movs	r1, #1
 8007f28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	225c      	movs	r2, #92	@ 0x5c
 8007f2e:	2100      	movs	r1, #0
 8007f30:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e017      	b.n	8007f66 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	4013      	ands	r3, r2
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	425a      	negs	r2, r3
 8007f56:	4153      	adcs	r3, r2
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	001a      	movs	r2, r3
 8007f5c:	1dfb      	adds	r3, r7, #7
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d197      	bne.n	8007e94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	0018      	movs	r0, r3
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	b008      	add	sp, #32
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	46c0      	nop			@ (mov r8, r8)
 8007f70:	20000018 	.word	0x20000018
 8007f74:	ffffdfff 	.word	0xffffdfff

08007f78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	@ 0x28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007f86:	2317      	movs	r3, #23
 8007f88:	18fb      	adds	r3, r7, r3
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f8e:	f7fd fe6b 	bl	8005c68 <HAL_GetTick>
 8007f92:	0002      	movs	r2, r0
 8007f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f96:	1a9b      	subs	r3, r3, r2
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	18d3      	adds	r3, r2, r3
 8007f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007f9e:	f7fd fe63 	bl	8005c68 <HAL_GetTick>
 8007fa2:	0003      	movs	r3, r0
 8007fa4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	330c      	adds	r3, #12
 8007fac:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007fae:	4b41      	ldr	r3, [pc, #260]	@ (80080b4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	0013      	movs	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	189b      	adds	r3, r3, r2
 8007fb8:	00da      	lsls	r2, r3, #3
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	0d1b      	lsrs	r3, r3, #20
 8007fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc0:	4353      	muls	r3, r2
 8007fc2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007fc4:	e068      	b.n	8008098 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	23c0      	movs	r3, #192	@ 0xc0
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d10a      	bne.n	8007fe6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d107      	bne.n	8007fe6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	2117      	movs	r1, #23
 8007fde:	187b      	adds	r3, r7, r1
 8007fe0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007fe2:	187b      	adds	r3, r7, r1
 8007fe4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	d055      	beq.n	8008098 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fec:	f7fd fe3c 	bl	8005c68 <HAL_GetTick>
 8007ff0:	0002      	movs	r2, r0
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d902      	bls.n	8008002 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d142      	bne.n	8008088 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	21e0      	movs	r1, #224	@ 0xe0
 800800e:	438a      	bics	r2, r1
 8008010:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	2382      	movs	r3, #130	@ 0x82
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	429a      	cmp	r2, r3
 800801c:	d113      	bne.n	8008046 <SPI_WaitFifoStateUntilTimeout+0xce>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	689a      	ldr	r2, [r3, #8]
 8008022:	2380      	movs	r3, #128	@ 0x80
 8008024:	021b      	lsls	r3, r3, #8
 8008026:	429a      	cmp	r2, r3
 8008028:	d005      	beq.n	8008036 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	2380      	movs	r3, #128	@ 0x80
 8008030:	00db      	lsls	r3, r3, #3
 8008032:	429a      	cmp	r2, r3
 8008034:	d107      	bne.n	8008046 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2140      	movs	r1, #64	@ 0x40
 8008042:	438a      	bics	r2, r1
 8008044:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800804a:	2380      	movs	r3, #128	@ 0x80
 800804c:	019b      	lsls	r3, r3, #6
 800804e:	429a      	cmp	r2, r3
 8008050:	d110      	bne.n	8008074 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4916      	ldr	r1, [pc, #88]	@ (80080b8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800805e:	400a      	ands	r2, r1
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2180      	movs	r1, #128	@ 0x80
 800806e:	0189      	lsls	r1, r1, #6
 8008070:	430a      	orrs	r2, r1
 8008072:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	225d      	movs	r2, #93	@ 0x5d
 8008078:	2101      	movs	r1, #1
 800807a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	225c      	movs	r2, #92	@ 0x5c
 8008080:	2100      	movs	r1, #0
 8008082:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e010      	b.n	80080aa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	3b01      	subs	r3, #1
 8008096:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	4013      	ands	r3, r2
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d18e      	bne.n	8007fc6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	0018      	movs	r0, r3
 80080ac:	46bd      	mov	sp, r7
 80080ae:	b00a      	add	sp, #40	@ 0x28
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	46c0      	nop			@ (mov r8, r8)
 80080b4:	20000018 	.word	0x20000018
 80080b8:	ffffdfff 	.word	0xffffdfff

080080bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	23c0      	movs	r3, #192	@ 0xc0
 80080cc:	0159      	lsls	r1, r3, #5
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	0013      	movs	r3, r2
 80080d6:	2200      	movs	r2, #0
 80080d8:	f7ff ff4e 	bl	8007f78 <SPI_WaitFifoStateUntilTimeout>
 80080dc:	1e03      	subs	r3, r0, #0
 80080de:	d007      	beq.n	80080f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080e4:	2220      	movs	r2, #32
 80080e6:	431a      	orrs	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e027      	b.n	8008140 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	0013      	movs	r3, r2
 80080fa:	2200      	movs	r2, #0
 80080fc:	2180      	movs	r1, #128	@ 0x80
 80080fe:	f7ff fead 	bl	8007e5c <SPI_WaitFlagStateUntilTimeout>
 8008102:	1e03      	subs	r3, r0, #0
 8008104:	d007      	beq.n	8008116 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800810a:	2220      	movs	r2, #32
 800810c:	431a      	orrs	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e014      	b.n	8008140 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	23c0      	movs	r3, #192	@ 0xc0
 800811a:	00d9      	lsls	r1, r3, #3
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	0013      	movs	r3, r2
 8008124:	2200      	movs	r2, #0
 8008126:	f7ff ff27 	bl	8007f78 <SPI_WaitFifoStateUntilTimeout>
 800812a:	1e03      	subs	r3, r0, #0
 800812c:	d007      	beq.n	800813e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008132:	2220      	movs	r2, #32
 8008134:	431a      	orrs	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e000      	b.n	8008140 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	0018      	movs	r0, r3
 8008142:	46bd      	mov	sp, r7
 8008144:	b004      	add	sp, #16
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e042      	b.n	80081e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	223d      	movs	r2, #61	@ 0x3d
 800815e:	5c9b      	ldrb	r3, [r3, r2]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d107      	bne.n	8008176 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	223c      	movs	r2, #60	@ 0x3c
 800816a:	2100      	movs	r1, #0
 800816c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	0018      	movs	r0, r3
 8008172:	f7fc fc9d 	bl	8004ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	223d      	movs	r2, #61	@ 0x3d
 800817a:	2102      	movs	r1, #2
 800817c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3304      	adds	r3, #4
 8008186:	0019      	movs	r1, r3
 8008188:	0010      	movs	r0, r2
 800818a:	f000 f971 	bl	8008470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2246      	movs	r2, #70	@ 0x46
 8008192:	2101      	movs	r1, #1
 8008194:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	223e      	movs	r2, #62	@ 0x3e
 800819a:	2101      	movs	r1, #1
 800819c:	5499      	strb	r1, [r3, r2]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	223f      	movs	r2, #63	@ 0x3f
 80081a2:	2101      	movs	r1, #1
 80081a4:	5499      	strb	r1, [r3, r2]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2240      	movs	r2, #64	@ 0x40
 80081aa:	2101      	movs	r1, #1
 80081ac:	5499      	strb	r1, [r3, r2]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2241      	movs	r2, #65	@ 0x41
 80081b2:	2101      	movs	r1, #1
 80081b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2242      	movs	r2, #66	@ 0x42
 80081ba:	2101      	movs	r1, #1
 80081bc:	5499      	strb	r1, [r3, r2]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2243      	movs	r2, #67	@ 0x43
 80081c2:	2101      	movs	r1, #1
 80081c4:	5499      	strb	r1, [r3, r2]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2244      	movs	r2, #68	@ 0x44
 80081ca:	2101      	movs	r1, #1
 80081cc:	5499      	strb	r1, [r3, r2]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2245      	movs	r2, #69	@ 0x45
 80081d2:	2101      	movs	r1, #1
 80081d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	223d      	movs	r2, #61	@ 0x3d
 80081da:	2101      	movs	r1, #1
 80081dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	0018      	movs	r0, r3
 80081e2:	46bd      	mov	sp, r7
 80081e4:	b002      	add	sp, #8
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	223d      	movs	r2, #61	@ 0x3d
 80081f4:	5c9b      	ldrb	r3, [r3, r2]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d001      	beq.n	8008200 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e033      	b.n	8008268 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	223d      	movs	r2, #61	@ 0x3d
 8008204:	2102      	movs	r1, #2
 8008206:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a18      	ldr	r2, [pc, #96]	@ (8008270 <HAL_TIM_Base_Start+0x88>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d00f      	beq.n	8008232 <HAL_TIM_Base_Start+0x4a>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	2380      	movs	r3, #128	@ 0x80
 8008218:	05db      	lsls	r3, r3, #23
 800821a:	429a      	cmp	r2, r3
 800821c:	d009      	beq.n	8008232 <HAL_TIM_Base_Start+0x4a>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a14      	ldr	r2, [pc, #80]	@ (8008274 <HAL_TIM_Base_Start+0x8c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d004      	beq.n	8008232 <HAL_TIM_Base_Start+0x4a>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a12      	ldr	r2, [pc, #72]	@ (8008278 <HAL_TIM_Base_Start+0x90>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d111      	bne.n	8008256 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2207      	movs	r2, #7
 800823a:	4013      	ands	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b06      	cmp	r3, #6
 8008242:	d010      	beq.n	8008266 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2101      	movs	r1, #1
 8008250:	430a      	orrs	r2, r1
 8008252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008254:	e007      	b.n	8008266 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2101      	movs	r1, #1
 8008262:	430a      	orrs	r2, r1
 8008264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	0018      	movs	r0, r3
 800826a:	46bd      	mov	sp, r7
 800826c:	b004      	add	sp, #16
 800826e:	bd80      	pop	{r7, pc}
 8008270:	40012c00 	.word	0x40012c00
 8008274:	40000400 	.word	0x40000400
 8008278:	40014000 	.word	0x40014000

0800827c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	4a0d      	ldr	r2, [pc, #52]	@ (80082c0 <HAL_TIM_Base_Stop+0x44>)
 800828c:	4013      	ands	r3, r2
 800828e:	d10d      	bne.n	80082ac <HAL_TIM_Base_Stop+0x30>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	4a0b      	ldr	r2, [pc, #44]	@ (80082c4 <HAL_TIM_Base_Stop+0x48>)
 8008298:	4013      	ands	r3, r2
 800829a:	d107      	bne.n	80082ac <HAL_TIM_Base_Stop+0x30>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2101      	movs	r1, #1
 80082a8:	438a      	bics	r2, r1
 80082aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	223d      	movs	r2, #61	@ 0x3d
 80082b0:	2101      	movs	r1, #1
 80082b2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	0018      	movs	r0, r3
 80082b8:	46bd      	mov	sp, r7
 80082ba:	b002      	add	sp, #8
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	46c0      	nop			@ (mov r8, r8)
 80082c0:	00001111 	.word	0x00001111
 80082c4:	00000444 	.word	0x00000444

080082c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082d2:	230f      	movs	r3, #15
 80082d4:	18fb      	adds	r3, r7, r3
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	223c      	movs	r2, #60	@ 0x3c
 80082de:	5c9b      	ldrb	r3, [r3, r2]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_TIM_ConfigClockSource+0x20>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e0bc      	b.n	8008462 <HAL_TIM_ConfigClockSource+0x19a>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	223c      	movs	r2, #60	@ 0x3c
 80082ec:	2101      	movs	r1, #1
 80082ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	223d      	movs	r2, #61	@ 0x3d
 80082f4:	2102      	movs	r1, #2
 80082f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2277      	movs	r2, #119	@ 0x77
 8008304:	4393      	bics	r3, r2
 8008306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	4a58      	ldr	r2, [pc, #352]	@ (800846c <HAL_TIM_ConfigClockSource+0x1a4>)
 800830c:	4013      	ands	r3, r2
 800830e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2280      	movs	r2, #128	@ 0x80
 800831e:	0192      	lsls	r2, r2, #6
 8008320:	4293      	cmp	r3, r2
 8008322:	d040      	beq.n	80083a6 <HAL_TIM_ConfigClockSource+0xde>
 8008324:	2280      	movs	r2, #128	@ 0x80
 8008326:	0192      	lsls	r2, r2, #6
 8008328:	4293      	cmp	r3, r2
 800832a:	d900      	bls.n	800832e <HAL_TIM_ConfigClockSource+0x66>
 800832c:	e088      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x178>
 800832e:	2280      	movs	r2, #128	@ 0x80
 8008330:	0152      	lsls	r2, r2, #5
 8008332:	4293      	cmp	r3, r2
 8008334:	d100      	bne.n	8008338 <HAL_TIM_ConfigClockSource+0x70>
 8008336:	e088      	b.n	800844a <HAL_TIM_ConfigClockSource+0x182>
 8008338:	2280      	movs	r2, #128	@ 0x80
 800833a:	0152      	lsls	r2, r2, #5
 800833c:	4293      	cmp	r3, r2
 800833e:	d900      	bls.n	8008342 <HAL_TIM_ConfigClockSource+0x7a>
 8008340:	e07e      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x178>
 8008342:	2b70      	cmp	r3, #112	@ 0x70
 8008344:	d018      	beq.n	8008378 <HAL_TIM_ConfigClockSource+0xb0>
 8008346:	d900      	bls.n	800834a <HAL_TIM_ConfigClockSource+0x82>
 8008348:	e07a      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x178>
 800834a:	2b60      	cmp	r3, #96	@ 0x60
 800834c:	d04f      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0x126>
 800834e:	d900      	bls.n	8008352 <HAL_TIM_ConfigClockSource+0x8a>
 8008350:	e076      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x178>
 8008352:	2b50      	cmp	r3, #80	@ 0x50
 8008354:	d03b      	beq.n	80083ce <HAL_TIM_ConfigClockSource+0x106>
 8008356:	d900      	bls.n	800835a <HAL_TIM_ConfigClockSource+0x92>
 8008358:	e072      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x178>
 800835a:	2b40      	cmp	r3, #64	@ 0x40
 800835c:	d057      	beq.n	800840e <HAL_TIM_ConfigClockSource+0x146>
 800835e:	d900      	bls.n	8008362 <HAL_TIM_ConfigClockSource+0x9a>
 8008360:	e06e      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x178>
 8008362:	2b30      	cmp	r3, #48	@ 0x30
 8008364:	d063      	beq.n	800842e <HAL_TIM_ConfigClockSource+0x166>
 8008366:	d86b      	bhi.n	8008440 <HAL_TIM_ConfigClockSource+0x178>
 8008368:	2b20      	cmp	r3, #32
 800836a:	d060      	beq.n	800842e <HAL_TIM_ConfigClockSource+0x166>
 800836c:	d868      	bhi.n	8008440 <HAL_TIM_ConfigClockSource+0x178>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d05d      	beq.n	800842e <HAL_TIM_ConfigClockSource+0x166>
 8008372:	2b10      	cmp	r3, #16
 8008374:	d05b      	beq.n	800842e <HAL_TIM_ConfigClockSource+0x166>
 8008376:	e063      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008388:	f000 f97a 	bl	8008680 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	2277      	movs	r2, #119	@ 0x77
 8008398:	4313      	orrs	r3, r2
 800839a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	609a      	str	r2, [r3, #8]
      break;
 80083a4:	e052      	b.n	800844c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083b6:	f000 f963 	bl	8008680 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2180      	movs	r1, #128	@ 0x80
 80083c6:	01c9      	lsls	r1, r1, #7
 80083c8:	430a      	orrs	r2, r1
 80083ca:	609a      	str	r2, [r3, #8]
      break;
 80083cc:	e03e      	b.n	800844c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083da:	001a      	movs	r2, r3
 80083dc:	f000 f8d6 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2150      	movs	r1, #80	@ 0x50
 80083e6:	0018      	movs	r0, r3
 80083e8:	f000 f930 	bl	800864c <TIM_ITRx_SetConfig>
      break;
 80083ec:	e02e      	b.n	800844c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083fa:	001a      	movs	r2, r3
 80083fc:	f000 f8f4 	bl	80085e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2160      	movs	r1, #96	@ 0x60
 8008406:	0018      	movs	r0, r3
 8008408:	f000 f920 	bl	800864c <TIM_ITRx_SetConfig>
      break;
 800840c:	e01e      	b.n	800844c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800841a:	001a      	movs	r2, r3
 800841c:	f000 f8b6 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2140      	movs	r1, #64	@ 0x40
 8008426:	0018      	movs	r0, r3
 8008428:	f000 f910 	bl	800864c <TIM_ITRx_SetConfig>
      break;
 800842c:	e00e      	b.n	800844c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	0019      	movs	r1, r3
 8008438:	0010      	movs	r0, r2
 800843a:	f000 f907 	bl	800864c <TIM_ITRx_SetConfig>
      break;
 800843e:	e005      	b.n	800844c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008440:	230f      	movs	r3, #15
 8008442:	18fb      	adds	r3, r7, r3
 8008444:	2201      	movs	r2, #1
 8008446:	701a      	strb	r2, [r3, #0]
      break;
 8008448:	e000      	b.n	800844c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800844a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	223d      	movs	r2, #61	@ 0x3d
 8008450:	2101      	movs	r1, #1
 8008452:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	223c      	movs	r2, #60	@ 0x3c
 8008458:	2100      	movs	r1, #0
 800845a:	5499      	strb	r1, [r3, r2]

  return status;
 800845c:	230f      	movs	r3, #15
 800845e:	18fb      	adds	r3, r7, r3
 8008460:	781b      	ldrb	r3, [r3, #0]
}
 8008462:	0018      	movs	r0, r3
 8008464:	46bd      	mov	sp, r7
 8008466:	b004      	add	sp, #16
 8008468:	bd80      	pop	{r7, pc}
 800846a:	46c0      	nop			@ (mov r8, r8)
 800846c:	ffff00ff 	.word	0xffff00ff

08008470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a3b      	ldr	r2, [pc, #236]	@ (8008570 <TIM_Base_SetConfig+0x100>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d008      	beq.n	800849a <TIM_Base_SetConfig+0x2a>
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	2380      	movs	r3, #128	@ 0x80
 800848c:	05db      	lsls	r3, r3, #23
 800848e:	429a      	cmp	r2, r3
 8008490:	d003      	beq.n	800849a <TIM_Base_SetConfig+0x2a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a37      	ldr	r2, [pc, #220]	@ (8008574 <TIM_Base_SetConfig+0x104>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d108      	bne.n	80084ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2270      	movs	r2, #112	@ 0x70
 800849e:	4393      	bics	r3, r2
 80084a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a30      	ldr	r2, [pc, #192]	@ (8008570 <TIM_Base_SetConfig+0x100>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d018      	beq.n	80084e6 <TIM_Base_SetConfig+0x76>
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	2380      	movs	r3, #128	@ 0x80
 80084b8:	05db      	lsls	r3, r3, #23
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d013      	beq.n	80084e6 <TIM_Base_SetConfig+0x76>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a2c      	ldr	r2, [pc, #176]	@ (8008574 <TIM_Base_SetConfig+0x104>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00f      	beq.n	80084e6 <TIM_Base_SetConfig+0x76>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a2b      	ldr	r2, [pc, #172]	@ (8008578 <TIM_Base_SetConfig+0x108>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00b      	beq.n	80084e6 <TIM_Base_SetConfig+0x76>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a2a      	ldr	r2, [pc, #168]	@ (800857c <TIM_Base_SetConfig+0x10c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d007      	beq.n	80084e6 <TIM_Base_SetConfig+0x76>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a29      	ldr	r2, [pc, #164]	@ (8008580 <TIM_Base_SetConfig+0x110>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d003      	beq.n	80084e6 <TIM_Base_SetConfig+0x76>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a28      	ldr	r2, [pc, #160]	@ (8008584 <TIM_Base_SetConfig+0x114>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d108      	bne.n	80084f8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4a27      	ldr	r2, [pc, #156]	@ (8008588 <TIM_Base_SetConfig+0x118>)
 80084ea:	4013      	ands	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2280      	movs	r2, #128	@ 0x80
 80084fc:	4393      	bics	r3, r2
 80084fe:	001a      	movs	r2, r3
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	4313      	orrs	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a13      	ldr	r2, [pc, #76]	@ (8008570 <TIM_Base_SetConfig+0x100>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00b      	beq.n	800853e <TIM_Base_SetConfig+0xce>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a14      	ldr	r2, [pc, #80]	@ (800857c <TIM_Base_SetConfig+0x10c>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d007      	beq.n	800853e <TIM_Base_SetConfig+0xce>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a13      	ldr	r2, [pc, #76]	@ (8008580 <TIM_Base_SetConfig+0x110>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d003      	beq.n	800853e <TIM_Base_SetConfig+0xce>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a12      	ldr	r2, [pc, #72]	@ (8008584 <TIM_Base_SetConfig+0x114>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d103      	bne.n	8008546 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2201      	movs	r2, #1
 8008552:	4013      	ands	r3, r2
 8008554:	2b01      	cmp	r3, #1
 8008556:	d106      	bne.n	8008566 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	2201      	movs	r2, #1
 800855e:	4393      	bics	r3, r2
 8008560:	001a      	movs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	611a      	str	r2, [r3, #16]
  }
}
 8008566:	46c0      	nop			@ (mov r8, r8)
 8008568:	46bd      	mov	sp, r7
 800856a:	b004      	add	sp, #16
 800856c:	bd80      	pop	{r7, pc}
 800856e:	46c0      	nop			@ (mov r8, r8)
 8008570:	40012c00 	.word	0x40012c00
 8008574:	40000400 	.word	0x40000400
 8008578:	40002000 	.word	0x40002000
 800857c:	40014000 	.word	0x40014000
 8008580:	40014400 	.word	0x40014400
 8008584:	40014800 	.word	0x40014800
 8008588:	fffffcff 	.word	0xfffffcff

0800858c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	2201      	movs	r2, #1
 80085a4:	4393      	bics	r3, r2
 80085a6:	001a      	movs	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	22f0      	movs	r2, #240	@ 0xf0
 80085b6:	4393      	bics	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	220a      	movs	r2, #10
 80085c8:	4393      	bics	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	621a      	str	r2, [r3, #32]
}
 80085e0:	46c0      	nop			@ (mov r8, r8)
 80085e2:	46bd      	mov	sp, r7
 80085e4:	b006      	add	sp, #24
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	2210      	movs	r2, #16
 8008600:	4393      	bics	r3, r2
 8008602:	001a      	movs	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	4a0d      	ldr	r2, [pc, #52]	@ (8008648 <TIM_TI2_ConfigInputStage+0x60>)
 8008612:	4013      	ands	r3, r2
 8008614:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	031b      	lsls	r3, r3, #12
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	4313      	orrs	r3, r2
 800861e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	22a0      	movs	r2, #160	@ 0xa0
 8008624:	4393      	bics	r3, r2
 8008626:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	621a      	str	r2, [r3, #32]
}
 800863e:	46c0      	nop			@ (mov r8, r8)
 8008640:	46bd      	mov	sp, r7
 8008642:	b006      	add	sp, #24
 8008644:	bd80      	pop	{r7, pc}
 8008646:	46c0      	nop			@ (mov r8, r8)
 8008648:	ffff0fff 	.word	0xffff0fff

0800864c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2270      	movs	r2, #112	@ 0x70
 8008660:	4393      	bics	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	4313      	orrs	r3, r2
 800866a:	2207      	movs	r2, #7
 800866c:	4313      	orrs	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	609a      	str	r2, [r3, #8]
}
 8008676:	46c0      	nop			@ (mov r8, r8)
 8008678:	46bd      	mov	sp, r7
 800867a:	b004      	add	sp, #16
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	4a09      	ldr	r2, [pc, #36]	@ (80086bc <TIM_ETR_SetConfig+0x3c>)
 8008698:	4013      	ands	r3, r2
 800869a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	021a      	lsls	r2, r3, #8
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	431a      	orrs	r2, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	609a      	str	r2, [r3, #8]
}
 80086b4:	46c0      	nop			@ (mov r8, r8)
 80086b6:	46bd      	mov	sp, r7
 80086b8:	b006      	add	sp, #24
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	ffff00ff 	.word	0xffff00ff

080086c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	223c      	movs	r2, #60	@ 0x3c
 80086ce:	5c9b      	ldrb	r3, [r3, r2]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d101      	bne.n	80086d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086d4:	2302      	movs	r3, #2
 80086d6:	e047      	b.n	8008768 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	223c      	movs	r2, #60	@ 0x3c
 80086dc:	2101      	movs	r1, #1
 80086de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	223d      	movs	r2, #61	@ 0x3d
 80086e4:	2102      	movs	r1, #2
 80086e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2270      	movs	r2, #112	@ 0x70
 80086fc:	4393      	bics	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	4313      	orrs	r3, r2
 8008708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a16      	ldr	r2, [pc, #88]	@ (8008770 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d00f      	beq.n	800873c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	2380      	movs	r3, #128	@ 0x80
 8008722:	05db      	lsls	r3, r3, #23
 8008724:	429a      	cmp	r2, r3
 8008726:	d009      	beq.n	800873c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a11      	ldr	r2, [pc, #68]	@ (8008774 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d004      	beq.n	800873c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a10      	ldr	r2, [pc, #64]	@ (8008778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d10c      	bne.n	8008756 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2280      	movs	r2, #128	@ 0x80
 8008740:	4393      	bics	r3, r2
 8008742:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	4313      	orrs	r3, r2
 800874c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	223d      	movs	r2, #61	@ 0x3d
 800875a:	2101      	movs	r1, #1
 800875c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	223c      	movs	r2, #60	@ 0x3c
 8008762:	2100      	movs	r1, #0
 8008764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	0018      	movs	r0, r3
 800876a:	46bd      	mov	sp, r7
 800876c:	b004      	add	sp, #16
 800876e:	bd80      	pop	{r7, pc}
 8008770:	40012c00 	.word	0x40012c00
 8008774:	40000400 	.word	0x40000400
 8008778:	40014000 	.word	0x40014000

0800877c <malloc>:
 800877c:	b510      	push	{r4, lr}
 800877e:	4b03      	ldr	r3, [pc, #12]	@ (800878c <malloc+0x10>)
 8008780:	0001      	movs	r1, r0
 8008782:	6818      	ldr	r0, [r3, #0]
 8008784:	f000 f826 	bl	80087d4 <_malloc_r>
 8008788:	bd10      	pop	{r4, pc}
 800878a:	46c0      	nop			@ (mov r8, r8)
 800878c:	20000030 	.word	0x20000030

08008790 <sbrk_aligned>:
 8008790:	b570      	push	{r4, r5, r6, lr}
 8008792:	4e0f      	ldr	r6, [pc, #60]	@ (80087d0 <sbrk_aligned+0x40>)
 8008794:	000d      	movs	r5, r1
 8008796:	6831      	ldr	r1, [r6, #0]
 8008798:	0004      	movs	r4, r0
 800879a:	2900      	cmp	r1, #0
 800879c:	d102      	bne.n	80087a4 <sbrk_aligned+0x14>
 800879e:	f001 f88f 	bl	80098c0 <_sbrk_r>
 80087a2:	6030      	str	r0, [r6, #0]
 80087a4:	0029      	movs	r1, r5
 80087a6:	0020      	movs	r0, r4
 80087a8:	f001 f88a 	bl	80098c0 <_sbrk_r>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d103      	bne.n	80087b8 <sbrk_aligned+0x28>
 80087b0:	2501      	movs	r5, #1
 80087b2:	426d      	negs	r5, r5
 80087b4:	0028      	movs	r0, r5
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	2303      	movs	r3, #3
 80087ba:	1cc5      	adds	r5, r0, #3
 80087bc:	439d      	bics	r5, r3
 80087be:	42a8      	cmp	r0, r5
 80087c0:	d0f8      	beq.n	80087b4 <sbrk_aligned+0x24>
 80087c2:	1a29      	subs	r1, r5, r0
 80087c4:	0020      	movs	r0, r4
 80087c6:	f001 f87b 	bl	80098c0 <_sbrk_r>
 80087ca:	3001      	adds	r0, #1
 80087cc:	d1f2      	bne.n	80087b4 <sbrk_aligned+0x24>
 80087ce:	e7ef      	b.n	80087b0 <sbrk_aligned+0x20>
 80087d0:	20000770 	.word	0x20000770

080087d4 <_malloc_r>:
 80087d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087d6:	2203      	movs	r2, #3
 80087d8:	1ccb      	adds	r3, r1, #3
 80087da:	4393      	bics	r3, r2
 80087dc:	3308      	adds	r3, #8
 80087de:	0005      	movs	r5, r0
 80087e0:	001f      	movs	r7, r3
 80087e2:	2b0c      	cmp	r3, #12
 80087e4:	d234      	bcs.n	8008850 <_malloc_r+0x7c>
 80087e6:	270c      	movs	r7, #12
 80087e8:	42b9      	cmp	r1, r7
 80087ea:	d833      	bhi.n	8008854 <_malloc_r+0x80>
 80087ec:	0028      	movs	r0, r5
 80087ee:	f000 f871 	bl	80088d4 <__malloc_lock>
 80087f2:	4e37      	ldr	r6, [pc, #220]	@ (80088d0 <_malloc_r+0xfc>)
 80087f4:	6833      	ldr	r3, [r6, #0]
 80087f6:	001c      	movs	r4, r3
 80087f8:	2c00      	cmp	r4, #0
 80087fa:	d12f      	bne.n	800885c <_malloc_r+0x88>
 80087fc:	0039      	movs	r1, r7
 80087fe:	0028      	movs	r0, r5
 8008800:	f7ff ffc6 	bl	8008790 <sbrk_aligned>
 8008804:	0004      	movs	r4, r0
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d15f      	bne.n	80088ca <_malloc_r+0xf6>
 800880a:	6834      	ldr	r4, [r6, #0]
 800880c:	9400      	str	r4, [sp, #0]
 800880e:	9b00      	ldr	r3, [sp, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d14a      	bne.n	80088aa <_malloc_r+0xd6>
 8008814:	2c00      	cmp	r4, #0
 8008816:	d052      	beq.n	80088be <_malloc_r+0xea>
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	0028      	movs	r0, r5
 800881c:	18e3      	adds	r3, r4, r3
 800881e:	9900      	ldr	r1, [sp, #0]
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	f001 f84d 	bl	80098c0 <_sbrk_r>
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	4283      	cmp	r3, r0
 800882a:	d148      	bne.n	80088be <_malloc_r+0xea>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	0028      	movs	r0, r5
 8008830:	1aff      	subs	r7, r7, r3
 8008832:	0039      	movs	r1, r7
 8008834:	f7ff ffac 	bl	8008790 <sbrk_aligned>
 8008838:	3001      	adds	r0, #1
 800883a:	d040      	beq.n	80088be <_malloc_r+0xea>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	19db      	adds	r3, r3, r7
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	6833      	ldr	r3, [r6, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	2a00      	cmp	r2, #0
 8008848:	d133      	bne.n	80088b2 <_malloc_r+0xde>
 800884a:	9b00      	ldr	r3, [sp, #0]
 800884c:	6033      	str	r3, [r6, #0]
 800884e:	e019      	b.n	8008884 <_malloc_r+0xb0>
 8008850:	2b00      	cmp	r3, #0
 8008852:	dac9      	bge.n	80087e8 <_malloc_r+0x14>
 8008854:	230c      	movs	r3, #12
 8008856:	602b      	str	r3, [r5, #0]
 8008858:	2000      	movs	r0, #0
 800885a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800885c:	6821      	ldr	r1, [r4, #0]
 800885e:	1bc9      	subs	r1, r1, r7
 8008860:	d420      	bmi.n	80088a4 <_malloc_r+0xd0>
 8008862:	290b      	cmp	r1, #11
 8008864:	d90a      	bls.n	800887c <_malloc_r+0xa8>
 8008866:	19e2      	adds	r2, r4, r7
 8008868:	6027      	str	r7, [r4, #0]
 800886a:	42a3      	cmp	r3, r4
 800886c:	d104      	bne.n	8008878 <_malloc_r+0xa4>
 800886e:	6032      	str	r2, [r6, #0]
 8008870:	6863      	ldr	r3, [r4, #4]
 8008872:	6011      	str	r1, [r2, #0]
 8008874:	6053      	str	r3, [r2, #4]
 8008876:	e005      	b.n	8008884 <_malloc_r+0xb0>
 8008878:	605a      	str	r2, [r3, #4]
 800887a:	e7f9      	b.n	8008870 <_malloc_r+0x9c>
 800887c:	6862      	ldr	r2, [r4, #4]
 800887e:	42a3      	cmp	r3, r4
 8008880:	d10e      	bne.n	80088a0 <_malloc_r+0xcc>
 8008882:	6032      	str	r2, [r6, #0]
 8008884:	0028      	movs	r0, r5
 8008886:	f000 f82d 	bl	80088e4 <__malloc_unlock>
 800888a:	0020      	movs	r0, r4
 800888c:	2207      	movs	r2, #7
 800888e:	300b      	adds	r0, #11
 8008890:	1d23      	adds	r3, r4, #4
 8008892:	4390      	bics	r0, r2
 8008894:	1ac2      	subs	r2, r0, r3
 8008896:	4298      	cmp	r0, r3
 8008898:	d0df      	beq.n	800885a <_malloc_r+0x86>
 800889a:	1a1b      	subs	r3, r3, r0
 800889c:	50a3      	str	r3, [r4, r2]
 800889e:	e7dc      	b.n	800885a <_malloc_r+0x86>
 80088a0:	605a      	str	r2, [r3, #4]
 80088a2:	e7ef      	b.n	8008884 <_malloc_r+0xb0>
 80088a4:	0023      	movs	r3, r4
 80088a6:	6864      	ldr	r4, [r4, #4]
 80088a8:	e7a6      	b.n	80087f8 <_malloc_r+0x24>
 80088aa:	9c00      	ldr	r4, [sp, #0]
 80088ac:	6863      	ldr	r3, [r4, #4]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	e7ad      	b.n	800880e <_malloc_r+0x3a>
 80088b2:	001a      	movs	r2, r3
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	42a3      	cmp	r3, r4
 80088b8:	d1fb      	bne.n	80088b2 <_malloc_r+0xde>
 80088ba:	2300      	movs	r3, #0
 80088bc:	e7da      	b.n	8008874 <_malloc_r+0xa0>
 80088be:	230c      	movs	r3, #12
 80088c0:	0028      	movs	r0, r5
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	f000 f80e 	bl	80088e4 <__malloc_unlock>
 80088c8:	e7c6      	b.n	8008858 <_malloc_r+0x84>
 80088ca:	6007      	str	r7, [r0, #0]
 80088cc:	e7da      	b.n	8008884 <_malloc_r+0xb0>
 80088ce:	46c0      	nop			@ (mov r8, r8)
 80088d0:	20000774 	.word	0x20000774

080088d4 <__malloc_lock>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	4802      	ldr	r0, [pc, #8]	@ (80088e0 <__malloc_lock+0xc>)
 80088d8:	f001 f843 	bl	8009962 <__retarget_lock_acquire_recursive>
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	46c0      	nop			@ (mov r8, r8)
 80088e0:	200008b8 	.word	0x200008b8

080088e4 <__malloc_unlock>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	4802      	ldr	r0, [pc, #8]	@ (80088f0 <__malloc_unlock+0xc>)
 80088e8:	f001 f83c 	bl	8009964 <__retarget_lock_release_recursive>
 80088ec:	bd10      	pop	{r4, pc}
 80088ee:	46c0      	nop			@ (mov r8, r8)
 80088f0:	200008b8 	.word	0x200008b8

080088f4 <__cvt>:
 80088f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088f6:	001f      	movs	r7, r3
 80088f8:	2300      	movs	r3, #0
 80088fa:	0016      	movs	r6, r2
 80088fc:	b08b      	sub	sp, #44	@ 0x2c
 80088fe:	429f      	cmp	r7, r3
 8008900:	da04      	bge.n	800890c <__cvt+0x18>
 8008902:	2180      	movs	r1, #128	@ 0x80
 8008904:	0609      	lsls	r1, r1, #24
 8008906:	187b      	adds	r3, r7, r1
 8008908:	001f      	movs	r7, r3
 800890a:	232d      	movs	r3, #45	@ 0x2d
 800890c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800890e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008910:	7013      	strb	r3, [r2, #0]
 8008912:	2320      	movs	r3, #32
 8008914:	2203      	movs	r2, #3
 8008916:	439d      	bics	r5, r3
 8008918:	2d46      	cmp	r5, #70	@ 0x46
 800891a:	d007      	beq.n	800892c <__cvt+0x38>
 800891c:	002b      	movs	r3, r5
 800891e:	3b45      	subs	r3, #69	@ 0x45
 8008920:	4259      	negs	r1, r3
 8008922:	414b      	adcs	r3, r1
 8008924:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008926:	3a01      	subs	r2, #1
 8008928:	18cb      	adds	r3, r1, r3
 800892a:	9310      	str	r3, [sp, #64]	@ 0x40
 800892c:	ab09      	add	r3, sp, #36	@ 0x24
 800892e:	9304      	str	r3, [sp, #16]
 8008930:	ab08      	add	r3, sp, #32
 8008932:	9303      	str	r3, [sp, #12]
 8008934:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008936:	9200      	str	r2, [sp, #0]
 8008938:	9302      	str	r3, [sp, #8]
 800893a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800893c:	0032      	movs	r2, r6
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	003b      	movs	r3, r7
 8008942:	f001 f8ad 	bl	8009aa0 <_dtoa_r>
 8008946:	0004      	movs	r4, r0
 8008948:	2d47      	cmp	r5, #71	@ 0x47
 800894a:	d11b      	bne.n	8008984 <__cvt+0x90>
 800894c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800894e:	07db      	lsls	r3, r3, #31
 8008950:	d511      	bpl.n	8008976 <__cvt+0x82>
 8008952:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008954:	18c3      	adds	r3, r0, r3
 8008956:	9307      	str	r3, [sp, #28]
 8008958:	2200      	movs	r2, #0
 800895a:	2300      	movs	r3, #0
 800895c:	0030      	movs	r0, r6
 800895e:	0039      	movs	r1, r7
 8008960:	f7f7 fd72 	bl	8000448 <__aeabi_dcmpeq>
 8008964:	2800      	cmp	r0, #0
 8008966:	d001      	beq.n	800896c <__cvt+0x78>
 8008968:	9b07      	ldr	r3, [sp, #28]
 800896a:	9309      	str	r3, [sp, #36]	@ 0x24
 800896c:	2230      	movs	r2, #48	@ 0x30
 800896e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008970:	9907      	ldr	r1, [sp, #28]
 8008972:	428b      	cmp	r3, r1
 8008974:	d320      	bcc.n	80089b8 <__cvt+0xc4>
 8008976:	0020      	movs	r0, r4
 8008978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800897a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800897c:	1b1b      	subs	r3, r3, r4
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	b00b      	add	sp, #44	@ 0x2c
 8008982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008984:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008986:	18c3      	adds	r3, r0, r3
 8008988:	9307      	str	r3, [sp, #28]
 800898a:	2d46      	cmp	r5, #70	@ 0x46
 800898c:	d1e4      	bne.n	8008958 <__cvt+0x64>
 800898e:	7803      	ldrb	r3, [r0, #0]
 8008990:	2b30      	cmp	r3, #48	@ 0x30
 8008992:	d10c      	bne.n	80089ae <__cvt+0xba>
 8008994:	2200      	movs	r2, #0
 8008996:	2300      	movs	r3, #0
 8008998:	0030      	movs	r0, r6
 800899a:	0039      	movs	r1, r7
 800899c:	f7f7 fd54 	bl	8000448 <__aeabi_dcmpeq>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d104      	bne.n	80089ae <__cvt+0xba>
 80089a4:	2301      	movs	r3, #1
 80089a6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80089a8:	1a9b      	subs	r3, r3, r2
 80089aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089b0:	9a07      	ldr	r2, [sp, #28]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	18d3      	adds	r3, r2, r3
 80089b6:	e7ce      	b.n	8008956 <__cvt+0x62>
 80089b8:	1c59      	adds	r1, r3, #1
 80089ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80089bc:	701a      	strb	r2, [r3, #0]
 80089be:	e7d6      	b.n	800896e <__cvt+0x7a>

080089c0 <__exponent>:
 80089c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089c2:	232b      	movs	r3, #43	@ 0x2b
 80089c4:	0005      	movs	r5, r0
 80089c6:	000c      	movs	r4, r1
 80089c8:	b085      	sub	sp, #20
 80089ca:	7002      	strb	r2, [r0, #0]
 80089cc:	2900      	cmp	r1, #0
 80089ce:	da01      	bge.n	80089d4 <__exponent+0x14>
 80089d0:	424c      	negs	r4, r1
 80089d2:	3302      	adds	r3, #2
 80089d4:	706b      	strb	r3, [r5, #1]
 80089d6:	2c09      	cmp	r4, #9
 80089d8:	dd2c      	ble.n	8008a34 <__exponent+0x74>
 80089da:	ab02      	add	r3, sp, #8
 80089dc:	1dde      	adds	r6, r3, #7
 80089de:	0020      	movs	r0, r4
 80089e0:	210a      	movs	r1, #10
 80089e2:	f7f7 fd1b 	bl	800041c <__aeabi_idivmod>
 80089e6:	0037      	movs	r7, r6
 80089e8:	3130      	adds	r1, #48	@ 0x30
 80089ea:	3e01      	subs	r6, #1
 80089ec:	0020      	movs	r0, r4
 80089ee:	7031      	strb	r1, [r6, #0]
 80089f0:	210a      	movs	r1, #10
 80089f2:	9401      	str	r4, [sp, #4]
 80089f4:	f7f7 fc2c 	bl	8000250 <__divsi3>
 80089f8:	9b01      	ldr	r3, [sp, #4]
 80089fa:	0004      	movs	r4, r0
 80089fc:	2b63      	cmp	r3, #99	@ 0x63
 80089fe:	dcee      	bgt.n	80089de <__exponent+0x1e>
 8008a00:	1eba      	subs	r2, r7, #2
 8008a02:	1ca8      	adds	r0, r5, #2
 8008a04:	0001      	movs	r1, r0
 8008a06:	0013      	movs	r3, r2
 8008a08:	3430      	adds	r4, #48	@ 0x30
 8008a0a:	7014      	strb	r4, [r2, #0]
 8008a0c:	ac02      	add	r4, sp, #8
 8008a0e:	3407      	adds	r4, #7
 8008a10:	429c      	cmp	r4, r3
 8008a12:	d80a      	bhi.n	8008a2a <__exponent+0x6a>
 8008a14:	2300      	movs	r3, #0
 8008a16:	42a2      	cmp	r2, r4
 8008a18:	d803      	bhi.n	8008a22 <__exponent+0x62>
 8008a1a:	3309      	adds	r3, #9
 8008a1c:	aa02      	add	r2, sp, #8
 8008a1e:	189b      	adds	r3, r3, r2
 8008a20:	1bdb      	subs	r3, r3, r7
 8008a22:	18c0      	adds	r0, r0, r3
 8008a24:	1b40      	subs	r0, r0, r5
 8008a26:	b005      	add	sp, #20
 8008a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a2a:	781c      	ldrb	r4, [r3, #0]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	700c      	strb	r4, [r1, #0]
 8008a30:	3101      	adds	r1, #1
 8008a32:	e7eb      	b.n	8008a0c <__exponent+0x4c>
 8008a34:	2330      	movs	r3, #48	@ 0x30
 8008a36:	18e4      	adds	r4, r4, r3
 8008a38:	70ab      	strb	r3, [r5, #2]
 8008a3a:	1d28      	adds	r0, r5, #4
 8008a3c:	70ec      	strb	r4, [r5, #3]
 8008a3e:	e7f1      	b.n	8008a24 <__exponent+0x64>

08008a40 <_printf_float>:
 8008a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a42:	b097      	sub	sp, #92	@ 0x5c
 8008a44:	000d      	movs	r5, r1
 8008a46:	920a      	str	r2, [sp, #40]	@ 0x28
 8008a48:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8008a4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a4e:	f000 fef9 	bl	8009844 <_localeconv_r>
 8008a52:	6803      	ldr	r3, [r0, #0]
 8008a54:	0018      	movs	r0, r3
 8008a56:	930d      	str	r3, [sp, #52]	@ 0x34
 8008a58:	f7f7 fb54 	bl	8000104 <strlen>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008a60:	9314      	str	r3, [sp, #80]	@ 0x50
 8008a62:	7e2b      	ldrb	r3, [r5, #24]
 8008a64:	2207      	movs	r2, #7
 8008a66:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a6c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	05c9      	lsls	r1, r1, #23
 8008a72:	d545      	bpl.n	8008b00 <_printf_float+0xc0>
 8008a74:	189b      	adds	r3, r3, r2
 8008a76:	4393      	bics	r3, r2
 8008a78:	001a      	movs	r2, r3
 8008a7a:	3208      	adds	r2, #8
 8008a7c:	6022      	str	r2, [r4, #0]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	681e      	ldr	r6, [r3, #0]
 8008a82:	685f      	ldr	r7, [r3, #4]
 8008a84:	007b      	lsls	r3, r7, #1
 8008a86:	085b      	lsrs	r3, r3, #1
 8008a88:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a8a:	9610      	str	r6, [sp, #64]	@ 0x40
 8008a8c:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008a8e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008a90:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008a92:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008a94:	4ba7      	ldr	r3, [pc, #668]	@ (8008d34 <_printf_float+0x2f4>)
 8008a96:	4252      	negs	r2, r2
 8008a98:	f7fa fa8e 	bl	8002fb8 <__aeabi_dcmpun>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d131      	bne.n	8008b04 <_printf_float+0xc4>
 8008aa0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008aa2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	4ba3      	ldr	r3, [pc, #652]	@ (8008d34 <_printf_float+0x2f4>)
 8008aa8:	4252      	negs	r2, r2
 8008aaa:	f7f7 fcdd 	bl	8000468 <__aeabi_dcmple>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d128      	bne.n	8008b04 <_printf_float+0xc4>
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	0030      	movs	r0, r6
 8008ab8:	0039      	movs	r1, r7
 8008aba:	f7f7 fccb 	bl	8000454 <__aeabi_dcmplt>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d003      	beq.n	8008aca <_printf_float+0x8a>
 8008ac2:	002b      	movs	r3, r5
 8008ac4:	222d      	movs	r2, #45	@ 0x2d
 8008ac6:	3343      	adds	r3, #67	@ 0x43
 8008ac8:	701a      	strb	r2, [r3, #0]
 8008aca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008acc:	4f9a      	ldr	r7, [pc, #616]	@ (8008d38 <_printf_float+0x2f8>)
 8008ace:	2b47      	cmp	r3, #71	@ 0x47
 8008ad0:	d900      	bls.n	8008ad4 <_printf_float+0x94>
 8008ad2:	4f9a      	ldr	r7, [pc, #616]	@ (8008d3c <_printf_float+0x2fc>)
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	2400      	movs	r4, #0
 8008ad8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ada:	612b      	str	r3, [r5, #16]
 8008adc:	3301      	adds	r3, #1
 8008ade:	439a      	bics	r2, r3
 8008ae0:	602a      	str	r2, [r5, #0]
 8008ae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ae4:	0029      	movs	r1, r5
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008aea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aec:	aa15      	add	r2, sp, #84	@ 0x54
 8008aee:	f000 f9e5 	bl	8008ebc <_printf_common>
 8008af2:	3001      	adds	r0, #1
 8008af4:	d000      	beq.n	8008af8 <_printf_float+0xb8>
 8008af6:	e09f      	b.n	8008c38 <_printf_float+0x1f8>
 8008af8:	2001      	movs	r0, #1
 8008afa:	4240      	negs	r0, r0
 8008afc:	b017      	add	sp, #92	@ 0x5c
 8008afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b00:	3307      	adds	r3, #7
 8008b02:	e7b8      	b.n	8008a76 <_printf_float+0x36>
 8008b04:	0032      	movs	r2, r6
 8008b06:	003b      	movs	r3, r7
 8008b08:	0030      	movs	r0, r6
 8008b0a:	0039      	movs	r1, r7
 8008b0c:	f7fa fa54 	bl	8002fb8 <__aeabi_dcmpun>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d00b      	beq.n	8008b2c <_printf_float+0xec>
 8008b14:	2f00      	cmp	r7, #0
 8008b16:	da03      	bge.n	8008b20 <_printf_float+0xe0>
 8008b18:	002b      	movs	r3, r5
 8008b1a:	222d      	movs	r2, #45	@ 0x2d
 8008b1c:	3343      	adds	r3, #67	@ 0x43
 8008b1e:	701a      	strb	r2, [r3, #0]
 8008b20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b22:	4f87      	ldr	r7, [pc, #540]	@ (8008d40 <_printf_float+0x300>)
 8008b24:	2b47      	cmp	r3, #71	@ 0x47
 8008b26:	d9d5      	bls.n	8008ad4 <_printf_float+0x94>
 8008b28:	4f86      	ldr	r7, [pc, #536]	@ (8008d44 <_printf_float+0x304>)
 8008b2a:	e7d3      	b.n	8008ad4 <_printf_float+0x94>
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008b30:	686b      	ldr	r3, [r5, #4]
 8008b32:	4394      	bics	r4, r2
 8008b34:	1c5a      	adds	r2, r3, #1
 8008b36:	d146      	bne.n	8008bc6 <_printf_float+0x186>
 8008b38:	3307      	adds	r3, #7
 8008b3a:	606b      	str	r3, [r5, #4]
 8008b3c:	2380      	movs	r3, #128	@ 0x80
 8008b3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b40:	00db      	lsls	r3, r3, #3
 8008b42:	4313      	orrs	r3, r2
 8008b44:	2200      	movs	r2, #0
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	9206      	str	r2, [sp, #24]
 8008b4a:	aa14      	add	r2, sp, #80	@ 0x50
 8008b4c:	9205      	str	r2, [sp, #20]
 8008b4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b50:	a90a      	add	r1, sp, #40	@ 0x28
 8008b52:	9204      	str	r2, [sp, #16]
 8008b54:	aa13      	add	r2, sp, #76	@ 0x4c
 8008b56:	9203      	str	r2, [sp, #12]
 8008b58:	2223      	movs	r2, #35	@ 0x23
 8008b5a:	1852      	adds	r2, r2, r1
 8008b5c:	9202      	str	r2, [sp, #8]
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	686b      	ldr	r3, [r5, #4]
 8008b62:	0032      	movs	r2, r6
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b68:	003b      	movs	r3, r7
 8008b6a:	f7ff fec3 	bl	80088f4 <__cvt>
 8008b6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008b70:	0007      	movs	r7, r0
 8008b72:	2c47      	cmp	r4, #71	@ 0x47
 8008b74:	d12d      	bne.n	8008bd2 <_printf_float+0x192>
 8008b76:	1cd3      	adds	r3, r2, #3
 8008b78:	db02      	blt.n	8008b80 <_printf_float+0x140>
 8008b7a:	686b      	ldr	r3, [r5, #4]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	dd48      	ble.n	8008c12 <_printf_float+0x1d2>
 8008b80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b82:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008b84:	3b02      	subs	r3, #2
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b8a:	0028      	movs	r0, r5
 8008b8c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b8e:	3901      	subs	r1, #1
 8008b90:	3050      	adds	r0, #80	@ 0x50
 8008b92:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008b94:	f7ff ff14 	bl	80089c0 <__exponent>
 8008b98:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008b9a:	0004      	movs	r4, r0
 8008b9c:	1813      	adds	r3, r2, r0
 8008b9e:	612b      	str	r3, [r5, #16]
 8008ba0:	2a01      	cmp	r2, #1
 8008ba2:	dc02      	bgt.n	8008baa <_printf_float+0x16a>
 8008ba4:	682a      	ldr	r2, [r5, #0]
 8008ba6:	07d2      	lsls	r2, r2, #31
 8008ba8:	d501      	bpl.n	8008bae <_printf_float+0x16e>
 8008baa:	3301      	adds	r3, #1
 8008bac:	612b      	str	r3, [r5, #16]
 8008bae:	2323      	movs	r3, #35	@ 0x23
 8008bb0:	aa0a      	add	r2, sp, #40	@ 0x28
 8008bb2:	189b      	adds	r3, r3, r2
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d100      	bne.n	8008bbc <_printf_float+0x17c>
 8008bba:	e792      	b.n	8008ae2 <_printf_float+0xa2>
 8008bbc:	002b      	movs	r3, r5
 8008bbe:	222d      	movs	r2, #45	@ 0x2d
 8008bc0:	3343      	adds	r3, #67	@ 0x43
 8008bc2:	701a      	strb	r2, [r3, #0]
 8008bc4:	e78d      	b.n	8008ae2 <_printf_float+0xa2>
 8008bc6:	2c47      	cmp	r4, #71	@ 0x47
 8008bc8:	d1b8      	bne.n	8008b3c <_printf_float+0xfc>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1b6      	bne.n	8008b3c <_printf_float+0xfc>
 8008bce:	3301      	adds	r3, #1
 8008bd0:	e7b3      	b.n	8008b3a <_printf_float+0xfa>
 8008bd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bd4:	0011      	movs	r1, r2
 8008bd6:	2b65      	cmp	r3, #101	@ 0x65
 8008bd8:	d9d7      	bls.n	8008b8a <_printf_float+0x14a>
 8008bda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bdc:	2b66      	cmp	r3, #102	@ 0x66
 8008bde:	d11a      	bne.n	8008c16 <_printf_float+0x1d6>
 8008be0:	686b      	ldr	r3, [r5, #4]
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	dd09      	ble.n	8008bfa <_printf_float+0x1ba>
 8008be6:	612a      	str	r2, [r5, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <_printf_float+0x1b2>
 8008bec:	6829      	ldr	r1, [r5, #0]
 8008bee:	07c9      	lsls	r1, r1, #31
 8008bf0:	d50b      	bpl.n	8008c0a <_printf_float+0x1ca>
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	189b      	adds	r3, r3, r2
 8008bf6:	612b      	str	r3, [r5, #16]
 8008bf8:	e007      	b.n	8008c0a <_printf_float+0x1ca>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <_printf_float+0x1c6>
 8008bfe:	2201      	movs	r2, #1
 8008c00:	6829      	ldr	r1, [r5, #0]
 8008c02:	4211      	tst	r1, r2
 8008c04:	d000      	beq.n	8008c08 <_printf_float+0x1c8>
 8008c06:	1c9a      	adds	r2, r3, #2
 8008c08:	612a      	str	r2, [r5, #16]
 8008c0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c0c:	2400      	movs	r4, #0
 8008c0e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8008c10:	e7cd      	b.n	8008bae <_printf_float+0x16e>
 8008c12:	2367      	movs	r3, #103	@ 0x67
 8008c14:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c16:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008c18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c1a:	4299      	cmp	r1, r3
 8008c1c:	db06      	blt.n	8008c2c <_printf_float+0x1ec>
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	6129      	str	r1, [r5, #16]
 8008c22:	07db      	lsls	r3, r3, #31
 8008c24:	d5f1      	bpl.n	8008c0a <_printf_float+0x1ca>
 8008c26:	3101      	adds	r1, #1
 8008c28:	6129      	str	r1, [r5, #16]
 8008c2a:	e7ee      	b.n	8008c0a <_printf_float+0x1ca>
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	2900      	cmp	r1, #0
 8008c30:	dce0      	bgt.n	8008bf4 <_printf_float+0x1b4>
 8008c32:	1892      	adds	r2, r2, r2
 8008c34:	1a52      	subs	r2, r2, r1
 8008c36:	e7dd      	b.n	8008bf4 <_printf_float+0x1b4>
 8008c38:	682a      	ldr	r2, [r5, #0]
 8008c3a:	0553      	lsls	r3, r2, #21
 8008c3c:	d408      	bmi.n	8008c50 <_printf_float+0x210>
 8008c3e:	692b      	ldr	r3, [r5, #16]
 8008c40:	003a      	movs	r2, r7
 8008c42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c46:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008c48:	47a0      	blx	r4
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d129      	bne.n	8008ca2 <_printf_float+0x262>
 8008c4e:	e753      	b.n	8008af8 <_printf_float+0xb8>
 8008c50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c52:	2b65      	cmp	r3, #101	@ 0x65
 8008c54:	d800      	bhi.n	8008c58 <_printf_float+0x218>
 8008c56:	e0da      	b.n	8008e0e <_printf_float+0x3ce>
 8008c58:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008c5a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f7f7 fbf2 	bl	8000448 <__aeabi_dcmpeq>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d033      	beq.n	8008cd0 <_printf_float+0x290>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	4a37      	ldr	r2, [pc, #220]	@ (8008d48 <_printf_float+0x308>)
 8008c6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c70:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008c72:	47a0      	blx	r4
 8008c74:	3001      	adds	r0, #1
 8008c76:	d100      	bne.n	8008c7a <_printf_float+0x23a>
 8008c78:	e73e      	b.n	8008af8 <_printf_float+0xb8>
 8008c7a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008c7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c7e:	42b3      	cmp	r3, r6
 8008c80:	db02      	blt.n	8008c88 <_printf_float+0x248>
 8008c82:	682b      	ldr	r3, [r5, #0]
 8008c84:	07db      	lsls	r3, r3, #31
 8008c86:	d50c      	bpl.n	8008ca2 <_printf_float+0x262>
 8008c88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008c8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c92:	47a0      	blx	r4
 8008c94:	2400      	movs	r4, #0
 8008c96:	3001      	adds	r0, #1
 8008c98:	d100      	bne.n	8008c9c <_printf_float+0x25c>
 8008c9a:	e72d      	b.n	8008af8 <_printf_float+0xb8>
 8008c9c:	1e73      	subs	r3, r6, #1
 8008c9e:	42a3      	cmp	r3, r4
 8008ca0:	dc0a      	bgt.n	8008cb8 <_printf_float+0x278>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	079b      	lsls	r3, r3, #30
 8008ca6:	d500      	bpl.n	8008caa <_printf_float+0x26a>
 8008ca8:	e105      	b.n	8008eb6 <_printf_float+0x476>
 8008caa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008cac:	68e8      	ldr	r0, [r5, #12]
 8008cae:	4298      	cmp	r0, r3
 8008cb0:	db00      	blt.n	8008cb4 <_printf_float+0x274>
 8008cb2:	e723      	b.n	8008afc <_printf_float+0xbc>
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	e721      	b.n	8008afc <_printf_float+0xbc>
 8008cb8:	002a      	movs	r2, r5
 8008cba:	2301      	movs	r3, #1
 8008cbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cc0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008cc2:	321a      	adds	r2, #26
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d100      	bne.n	8008ccc <_printf_float+0x28c>
 8008cca:	e715      	b.n	8008af8 <_printf_float+0xb8>
 8008ccc:	3401      	adds	r4, #1
 8008cce:	e7e5      	b.n	8008c9c <_printf_float+0x25c>
 8008cd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dc3a      	bgt.n	8008d4c <_printf_float+0x30c>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8008d48 <_printf_float+0x308>)
 8008cda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008cdc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cde:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008ce0:	47a0      	blx	r4
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d100      	bne.n	8008ce8 <_printf_float+0x2a8>
 8008ce6:	e707      	b.n	8008af8 <_printf_float+0xb8>
 8008ce8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008cea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cec:	4333      	orrs	r3, r6
 8008cee:	d102      	bne.n	8008cf6 <_printf_float+0x2b6>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	07db      	lsls	r3, r3, #31
 8008cf4:	d5d5      	bpl.n	8008ca2 <_printf_float+0x262>
 8008cf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008cfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008cfc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cfe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008d00:	47a0      	blx	r4
 8008d02:	2300      	movs	r3, #0
 8008d04:	3001      	adds	r0, #1
 8008d06:	d100      	bne.n	8008d0a <_printf_float+0x2ca>
 8008d08:	e6f6      	b.n	8008af8 <_printf_float+0xb8>
 8008d0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d10:	425b      	negs	r3, r3
 8008d12:	4293      	cmp	r3, r2
 8008d14:	dc01      	bgt.n	8008d1a <_printf_float+0x2da>
 8008d16:	0033      	movs	r3, r6
 8008d18:	e792      	b.n	8008c40 <_printf_float+0x200>
 8008d1a:	002a      	movs	r2, r5
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d22:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008d24:	321a      	adds	r2, #26
 8008d26:	47a0      	blx	r4
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d100      	bne.n	8008d2e <_printf_float+0x2ee>
 8008d2c:	e6e4      	b.n	8008af8 <_printf_float+0xb8>
 8008d2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d30:	3301      	adds	r3, #1
 8008d32:	e7ea      	b.n	8008d0a <_printf_float+0x2ca>
 8008d34:	7fefffff 	.word	0x7fefffff
 8008d38:	0800ec74 	.word	0x0800ec74
 8008d3c:	0800ec78 	.word	0x0800ec78
 8008d40:	0800ec7c 	.word	0x0800ec7c
 8008d44:	0800ec80 	.word	0x0800ec80
 8008d48:	0800ec84 	.word	0x0800ec84
 8008d4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d4e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008d50:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d52:	429e      	cmp	r6, r3
 8008d54:	dd00      	ble.n	8008d58 <_printf_float+0x318>
 8008d56:	001e      	movs	r6, r3
 8008d58:	2e00      	cmp	r6, #0
 8008d5a:	dc31      	bgt.n	8008dc0 <_printf_float+0x380>
 8008d5c:	43f3      	mvns	r3, r6
 8008d5e:	2400      	movs	r4, #0
 8008d60:	17db      	asrs	r3, r3, #31
 8008d62:	4033      	ands	r3, r6
 8008d64:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d66:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008d68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d6a:	1af3      	subs	r3, r6, r3
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	dc30      	bgt.n	8008dd2 <_printf_float+0x392>
 8008d70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d72:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d74:	429a      	cmp	r2, r3
 8008d76:	dc38      	bgt.n	8008dea <_printf_float+0x3aa>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	07db      	lsls	r3, r3, #31
 8008d7c:	d435      	bmi.n	8008dea <_printf_float+0x3aa>
 8008d7e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008d80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d84:	1b9b      	subs	r3, r3, r6
 8008d86:	1b14      	subs	r4, r2, r4
 8008d88:	429c      	cmp	r4, r3
 8008d8a:	dd00      	ble.n	8008d8e <_printf_float+0x34e>
 8008d8c:	001c      	movs	r4, r3
 8008d8e:	2c00      	cmp	r4, #0
 8008d90:	dc34      	bgt.n	8008dfc <_printf_float+0x3bc>
 8008d92:	43e3      	mvns	r3, r4
 8008d94:	2600      	movs	r6, #0
 8008d96:	17db      	asrs	r3, r3, #31
 8008d98:	401c      	ands	r4, r3
 8008d9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	1b1b      	subs	r3, r3, r4
 8008da2:	42b3      	cmp	r3, r6
 8008da4:	dc00      	bgt.n	8008da8 <_printf_float+0x368>
 8008da6:	e77c      	b.n	8008ca2 <_printf_float+0x262>
 8008da8:	002a      	movs	r2, r5
 8008daa:	2301      	movs	r3, #1
 8008dac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008db0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008db2:	321a      	adds	r2, #26
 8008db4:	47b8      	blx	r7
 8008db6:	3001      	adds	r0, #1
 8008db8:	d100      	bne.n	8008dbc <_printf_float+0x37c>
 8008dba:	e69d      	b.n	8008af8 <_printf_float+0xb8>
 8008dbc:	3601      	adds	r6, #1
 8008dbe:	e7ec      	b.n	8008d9a <_printf_float+0x35a>
 8008dc0:	0033      	movs	r3, r6
 8008dc2:	003a      	movs	r2, r7
 8008dc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dc8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008dca:	47a0      	blx	r4
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d1c5      	bne.n	8008d5c <_printf_float+0x31c>
 8008dd0:	e692      	b.n	8008af8 <_printf_float+0xb8>
 8008dd2:	002a      	movs	r2, r5
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dd8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dda:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008ddc:	321a      	adds	r2, #26
 8008dde:	47b0      	blx	r6
 8008de0:	3001      	adds	r0, #1
 8008de2:	d100      	bne.n	8008de6 <_printf_float+0x3a6>
 8008de4:	e688      	b.n	8008af8 <_printf_float+0xb8>
 8008de6:	3401      	adds	r4, #1
 8008de8:	e7bd      	b.n	8008d66 <_printf_float+0x326>
 8008dea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008dee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008df0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008df2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008df4:	47a0      	blx	r4
 8008df6:	3001      	adds	r0, #1
 8008df8:	d1c1      	bne.n	8008d7e <_printf_float+0x33e>
 8008dfa:	e67d      	b.n	8008af8 <_printf_float+0xb8>
 8008dfc:	19ba      	adds	r2, r7, r6
 8008dfe:	0023      	movs	r3, r4
 8008e00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e04:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008e06:	47b0      	blx	r6
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d1c2      	bne.n	8008d92 <_printf_float+0x352>
 8008e0c:	e674      	b.n	8008af8 <_printf_float+0xb8>
 8008e0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e10:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	dc02      	bgt.n	8008e1c <_printf_float+0x3dc>
 8008e16:	2301      	movs	r3, #1
 8008e18:	421a      	tst	r2, r3
 8008e1a:	d039      	beq.n	8008e90 <_printf_float+0x450>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	003a      	movs	r2, r7
 8008e20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008e26:	47b0      	blx	r6
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d100      	bne.n	8008e2e <_printf_float+0x3ee>
 8008e2c:	e664      	b.n	8008af8 <_printf_float+0xb8>
 8008e2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e36:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008e38:	47b0      	blx	r6
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	d100      	bne.n	8008e40 <_printf_float+0x400>
 8008e3e:	e65b      	b.n	8008af8 <_printf_float+0xb8>
 8008e40:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008e42:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008e44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e46:	2200      	movs	r2, #0
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f7f7 fafb 	bl	8000448 <__aeabi_dcmpeq>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d11a      	bne.n	8008e8c <_printf_float+0x44c>
 8008e56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e58:	1c7a      	adds	r2, r7, #1
 8008e5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e5e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008e60:	47b0      	blx	r6
 8008e62:	3001      	adds	r0, #1
 8008e64:	d10e      	bne.n	8008e84 <_printf_float+0x444>
 8008e66:	e647      	b.n	8008af8 <_printf_float+0xb8>
 8008e68:	002a      	movs	r2, r5
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e70:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008e72:	321a      	adds	r2, #26
 8008e74:	47b8      	blx	r7
 8008e76:	3001      	adds	r0, #1
 8008e78:	d100      	bne.n	8008e7c <_printf_float+0x43c>
 8008e7a:	e63d      	b.n	8008af8 <_printf_float+0xb8>
 8008e7c:	3601      	adds	r6, #1
 8008e7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e80:	429e      	cmp	r6, r3
 8008e82:	dbf1      	blt.n	8008e68 <_printf_float+0x428>
 8008e84:	002a      	movs	r2, r5
 8008e86:	0023      	movs	r3, r4
 8008e88:	3250      	adds	r2, #80	@ 0x50
 8008e8a:	e6da      	b.n	8008c42 <_printf_float+0x202>
 8008e8c:	2600      	movs	r6, #0
 8008e8e:	e7f6      	b.n	8008e7e <_printf_float+0x43e>
 8008e90:	003a      	movs	r2, r7
 8008e92:	e7e2      	b.n	8008e5a <_printf_float+0x41a>
 8008e94:	002a      	movs	r2, r5
 8008e96:	2301      	movs	r3, #1
 8008e98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e9c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008e9e:	3219      	adds	r2, #25
 8008ea0:	47b0      	blx	r6
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d100      	bne.n	8008ea8 <_printf_float+0x468>
 8008ea6:	e627      	b.n	8008af8 <_printf_float+0xb8>
 8008ea8:	3401      	adds	r4, #1
 8008eaa:	68eb      	ldr	r3, [r5, #12]
 8008eac:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008eae:	1a9b      	subs	r3, r3, r2
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	dcef      	bgt.n	8008e94 <_printf_float+0x454>
 8008eb4:	e6f9      	b.n	8008caa <_printf_float+0x26a>
 8008eb6:	2400      	movs	r4, #0
 8008eb8:	e7f7      	b.n	8008eaa <_printf_float+0x46a>
 8008eba:	46c0      	nop			@ (mov r8, r8)

08008ebc <_printf_common>:
 8008ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ebe:	0016      	movs	r6, r2
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	688a      	ldr	r2, [r1, #8]
 8008ec4:	690b      	ldr	r3, [r1, #16]
 8008ec6:	000c      	movs	r4, r1
 8008ec8:	9000      	str	r0, [sp, #0]
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	da00      	bge.n	8008ed0 <_printf_common+0x14>
 8008ece:	0013      	movs	r3, r2
 8008ed0:	0022      	movs	r2, r4
 8008ed2:	6033      	str	r3, [r6, #0]
 8008ed4:	3243      	adds	r2, #67	@ 0x43
 8008ed6:	7812      	ldrb	r2, [r2, #0]
 8008ed8:	2a00      	cmp	r2, #0
 8008eda:	d001      	beq.n	8008ee0 <_printf_common+0x24>
 8008edc:	3301      	adds	r3, #1
 8008ede:	6033      	str	r3, [r6, #0]
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	069b      	lsls	r3, r3, #26
 8008ee4:	d502      	bpl.n	8008eec <_printf_common+0x30>
 8008ee6:	6833      	ldr	r3, [r6, #0]
 8008ee8:	3302      	adds	r3, #2
 8008eea:	6033      	str	r3, [r6, #0]
 8008eec:	6822      	ldr	r2, [r4, #0]
 8008eee:	2306      	movs	r3, #6
 8008ef0:	0015      	movs	r5, r2
 8008ef2:	401d      	ands	r5, r3
 8008ef4:	421a      	tst	r2, r3
 8008ef6:	d027      	beq.n	8008f48 <_printf_common+0x8c>
 8008ef8:	0023      	movs	r3, r4
 8008efa:	3343      	adds	r3, #67	@ 0x43
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	1e5a      	subs	r2, r3, #1
 8008f00:	4193      	sbcs	r3, r2
 8008f02:	6822      	ldr	r2, [r4, #0]
 8008f04:	0692      	lsls	r2, r2, #26
 8008f06:	d430      	bmi.n	8008f6a <_printf_common+0xae>
 8008f08:	0022      	movs	r2, r4
 8008f0a:	9901      	ldr	r1, [sp, #4]
 8008f0c:	9800      	ldr	r0, [sp, #0]
 8008f0e:	9d08      	ldr	r5, [sp, #32]
 8008f10:	3243      	adds	r2, #67	@ 0x43
 8008f12:	47a8      	blx	r5
 8008f14:	3001      	adds	r0, #1
 8008f16:	d025      	beq.n	8008f64 <_printf_common+0xa8>
 8008f18:	2206      	movs	r2, #6
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	2500      	movs	r5, #0
 8008f1e:	4013      	ands	r3, r2
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	d105      	bne.n	8008f30 <_printf_common+0x74>
 8008f24:	6833      	ldr	r3, [r6, #0]
 8008f26:	68e5      	ldr	r5, [r4, #12]
 8008f28:	1aed      	subs	r5, r5, r3
 8008f2a:	43eb      	mvns	r3, r5
 8008f2c:	17db      	asrs	r3, r3, #31
 8008f2e:	401d      	ands	r5, r3
 8008f30:	68a3      	ldr	r3, [r4, #8]
 8008f32:	6922      	ldr	r2, [r4, #16]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	dd01      	ble.n	8008f3c <_printf_common+0x80>
 8008f38:	1a9b      	subs	r3, r3, r2
 8008f3a:	18ed      	adds	r5, r5, r3
 8008f3c:	2600      	movs	r6, #0
 8008f3e:	42b5      	cmp	r5, r6
 8008f40:	d120      	bne.n	8008f84 <_printf_common+0xc8>
 8008f42:	2000      	movs	r0, #0
 8008f44:	e010      	b.n	8008f68 <_printf_common+0xac>
 8008f46:	3501      	adds	r5, #1
 8008f48:	68e3      	ldr	r3, [r4, #12]
 8008f4a:	6832      	ldr	r2, [r6, #0]
 8008f4c:	1a9b      	subs	r3, r3, r2
 8008f4e:	42ab      	cmp	r3, r5
 8008f50:	ddd2      	ble.n	8008ef8 <_printf_common+0x3c>
 8008f52:	0022      	movs	r2, r4
 8008f54:	2301      	movs	r3, #1
 8008f56:	9901      	ldr	r1, [sp, #4]
 8008f58:	9800      	ldr	r0, [sp, #0]
 8008f5a:	9f08      	ldr	r7, [sp, #32]
 8008f5c:	3219      	adds	r2, #25
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	d1f0      	bne.n	8008f46 <_printf_common+0x8a>
 8008f64:	2001      	movs	r0, #1
 8008f66:	4240      	negs	r0, r0
 8008f68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f6a:	2030      	movs	r0, #48	@ 0x30
 8008f6c:	18e1      	adds	r1, r4, r3
 8008f6e:	3143      	adds	r1, #67	@ 0x43
 8008f70:	7008      	strb	r0, [r1, #0]
 8008f72:	0021      	movs	r1, r4
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	3145      	adds	r1, #69	@ 0x45
 8008f78:	7809      	ldrb	r1, [r1, #0]
 8008f7a:	18a2      	adds	r2, r4, r2
 8008f7c:	3243      	adds	r2, #67	@ 0x43
 8008f7e:	3302      	adds	r3, #2
 8008f80:	7011      	strb	r1, [r2, #0]
 8008f82:	e7c1      	b.n	8008f08 <_printf_common+0x4c>
 8008f84:	0022      	movs	r2, r4
 8008f86:	2301      	movs	r3, #1
 8008f88:	9901      	ldr	r1, [sp, #4]
 8008f8a:	9800      	ldr	r0, [sp, #0]
 8008f8c:	9f08      	ldr	r7, [sp, #32]
 8008f8e:	321a      	adds	r2, #26
 8008f90:	47b8      	blx	r7
 8008f92:	3001      	adds	r0, #1
 8008f94:	d0e6      	beq.n	8008f64 <_printf_common+0xa8>
 8008f96:	3601      	adds	r6, #1
 8008f98:	e7d1      	b.n	8008f3e <_printf_common+0x82>
	...

08008f9c <_printf_i>:
 8008f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f9e:	b08b      	sub	sp, #44	@ 0x2c
 8008fa0:	9206      	str	r2, [sp, #24]
 8008fa2:	000a      	movs	r2, r1
 8008fa4:	3243      	adds	r2, #67	@ 0x43
 8008fa6:	9307      	str	r3, [sp, #28]
 8008fa8:	9005      	str	r0, [sp, #20]
 8008faa:	9203      	str	r2, [sp, #12]
 8008fac:	7e0a      	ldrb	r2, [r1, #24]
 8008fae:	000c      	movs	r4, r1
 8008fb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fb2:	2a78      	cmp	r2, #120	@ 0x78
 8008fb4:	d809      	bhi.n	8008fca <_printf_i+0x2e>
 8008fb6:	2a62      	cmp	r2, #98	@ 0x62
 8008fb8:	d80b      	bhi.n	8008fd2 <_printf_i+0x36>
 8008fba:	2a00      	cmp	r2, #0
 8008fbc:	d100      	bne.n	8008fc0 <_printf_i+0x24>
 8008fbe:	e0bc      	b.n	800913a <_printf_i+0x19e>
 8008fc0:	497b      	ldr	r1, [pc, #492]	@ (80091b0 <_printf_i+0x214>)
 8008fc2:	9104      	str	r1, [sp, #16]
 8008fc4:	2a58      	cmp	r2, #88	@ 0x58
 8008fc6:	d100      	bne.n	8008fca <_printf_i+0x2e>
 8008fc8:	e090      	b.n	80090ec <_printf_i+0x150>
 8008fca:	0025      	movs	r5, r4
 8008fcc:	3542      	adds	r5, #66	@ 0x42
 8008fce:	702a      	strb	r2, [r5, #0]
 8008fd0:	e022      	b.n	8009018 <_printf_i+0x7c>
 8008fd2:	0010      	movs	r0, r2
 8008fd4:	3863      	subs	r0, #99	@ 0x63
 8008fd6:	2815      	cmp	r0, #21
 8008fd8:	d8f7      	bhi.n	8008fca <_printf_i+0x2e>
 8008fda:	f7f7 f8a5 	bl	8000128 <__gnu_thumb1_case_shi>
 8008fde:	0016      	.short	0x0016
 8008fe0:	fff6001f 	.word	0xfff6001f
 8008fe4:	fff6fff6 	.word	0xfff6fff6
 8008fe8:	001ffff6 	.word	0x001ffff6
 8008fec:	fff6fff6 	.word	0xfff6fff6
 8008ff0:	fff6fff6 	.word	0xfff6fff6
 8008ff4:	003600a1 	.word	0x003600a1
 8008ff8:	fff60080 	.word	0xfff60080
 8008ffc:	00b2fff6 	.word	0x00b2fff6
 8009000:	0036fff6 	.word	0x0036fff6
 8009004:	fff6fff6 	.word	0xfff6fff6
 8009008:	0084      	.short	0x0084
 800900a:	0025      	movs	r5, r4
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	3542      	adds	r5, #66	@ 0x42
 8009010:	1d11      	adds	r1, r2, #4
 8009012:	6019      	str	r1, [r3, #0]
 8009014:	6813      	ldr	r3, [r2, #0]
 8009016:	702b      	strb	r3, [r5, #0]
 8009018:	2301      	movs	r3, #1
 800901a:	e0a0      	b.n	800915e <_printf_i+0x1c2>
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	6809      	ldr	r1, [r1, #0]
 8009020:	1d02      	adds	r2, r0, #4
 8009022:	060d      	lsls	r5, r1, #24
 8009024:	d50b      	bpl.n	800903e <_printf_i+0xa2>
 8009026:	6806      	ldr	r6, [r0, #0]
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	2e00      	cmp	r6, #0
 800902c:	da03      	bge.n	8009036 <_printf_i+0x9a>
 800902e:	232d      	movs	r3, #45	@ 0x2d
 8009030:	9a03      	ldr	r2, [sp, #12]
 8009032:	4276      	negs	r6, r6
 8009034:	7013      	strb	r3, [r2, #0]
 8009036:	4b5e      	ldr	r3, [pc, #376]	@ (80091b0 <_printf_i+0x214>)
 8009038:	270a      	movs	r7, #10
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	e018      	b.n	8009070 <_printf_i+0xd4>
 800903e:	6806      	ldr	r6, [r0, #0]
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	0649      	lsls	r1, r1, #25
 8009044:	d5f1      	bpl.n	800902a <_printf_i+0x8e>
 8009046:	b236      	sxth	r6, r6
 8009048:	e7ef      	b.n	800902a <_printf_i+0x8e>
 800904a:	6808      	ldr	r0, [r1, #0]
 800904c:	6819      	ldr	r1, [r3, #0]
 800904e:	c940      	ldmia	r1!, {r6}
 8009050:	0605      	lsls	r5, r0, #24
 8009052:	d402      	bmi.n	800905a <_printf_i+0xbe>
 8009054:	0640      	lsls	r0, r0, #25
 8009056:	d500      	bpl.n	800905a <_printf_i+0xbe>
 8009058:	b2b6      	uxth	r6, r6
 800905a:	6019      	str	r1, [r3, #0]
 800905c:	4b54      	ldr	r3, [pc, #336]	@ (80091b0 <_printf_i+0x214>)
 800905e:	270a      	movs	r7, #10
 8009060:	9304      	str	r3, [sp, #16]
 8009062:	2a6f      	cmp	r2, #111	@ 0x6f
 8009064:	d100      	bne.n	8009068 <_printf_i+0xcc>
 8009066:	3f02      	subs	r7, #2
 8009068:	0023      	movs	r3, r4
 800906a:	2200      	movs	r2, #0
 800906c:	3343      	adds	r3, #67	@ 0x43
 800906e:	701a      	strb	r2, [r3, #0]
 8009070:	6863      	ldr	r3, [r4, #4]
 8009072:	60a3      	str	r3, [r4, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	db03      	blt.n	8009080 <_printf_i+0xe4>
 8009078:	2104      	movs	r1, #4
 800907a:	6822      	ldr	r2, [r4, #0]
 800907c:	438a      	bics	r2, r1
 800907e:	6022      	str	r2, [r4, #0]
 8009080:	2e00      	cmp	r6, #0
 8009082:	d102      	bne.n	800908a <_printf_i+0xee>
 8009084:	9d03      	ldr	r5, [sp, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00c      	beq.n	80090a4 <_printf_i+0x108>
 800908a:	9d03      	ldr	r5, [sp, #12]
 800908c:	0030      	movs	r0, r6
 800908e:	0039      	movs	r1, r7
 8009090:	f7f7 f8da 	bl	8000248 <__aeabi_uidivmod>
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	3d01      	subs	r5, #1
 8009098:	5c5b      	ldrb	r3, [r3, r1]
 800909a:	702b      	strb	r3, [r5, #0]
 800909c:	0033      	movs	r3, r6
 800909e:	0006      	movs	r6, r0
 80090a0:	429f      	cmp	r7, r3
 80090a2:	d9f3      	bls.n	800908c <_printf_i+0xf0>
 80090a4:	2f08      	cmp	r7, #8
 80090a6:	d109      	bne.n	80090bc <_printf_i+0x120>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	07db      	lsls	r3, r3, #31
 80090ac:	d506      	bpl.n	80090bc <_printf_i+0x120>
 80090ae:	6862      	ldr	r2, [r4, #4]
 80090b0:	6923      	ldr	r3, [r4, #16]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	dc02      	bgt.n	80090bc <_printf_i+0x120>
 80090b6:	2330      	movs	r3, #48	@ 0x30
 80090b8:	3d01      	subs	r5, #1
 80090ba:	702b      	strb	r3, [r5, #0]
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	1b5b      	subs	r3, r3, r5
 80090c0:	6123      	str	r3, [r4, #16]
 80090c2:	9b07      	ldr	r3, [sp, #28]
 80090c4:	0021      	movs	r1, r4
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	9805      	ldr	r0, [sp, #20]
 80090ca:	9b06      	ldr	r3, [sp, #24]
 80090cc:	aa09      	add	r2, sp, #36	@ 0x24
 80090ce:	f7ff fef5 	bl	8008ebc <_printf_common>
 80090d2:	3001      	adds	r0, #1
 80090d4:	d148      	bne.n	8009168 <_printf_i+0x1cc>
 80090d6:	2001      	movs	r0, #1
 80090d8:	4240      	negs	r0, r0
 80090da:	b00b      	add	sp, #44	@ 0x2c
 80090dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090de:	2220      	movs	r2, #32
 80090e0:	6809      	ldr	r1, [r1, #0]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	6022      	str	r2, [r4, #0]
 80090e6:	2278      	movs	r2, #120	@ 0x78
 80090e8:	4932      	ldr	r1, [pc, #200]	@ (80091b4 <_printf_i+0x218>)
 80090ea:	9104      	str	r1, [sp, #16]
 80090ec:	0021      	movs	r1, r4
 80090ee:	3145      	adds	r1, #69	@ 0x45
 80090f0:	700a      	strb	r2, [r1, #0]
 80090f2:	6819      	ldr	r1, [r3, #0]
 80090f4:	6822      	ldr	r2, [r4, #0]
 80090f6:	c940      	ldmia	r1!, {r6}
 80090f8:	0610      	lsls	r0, r2, #24
 80090fa:	d402      	bmi.n	8009102 <_printf_i+0x166>
 80090fc:	0650      	lsls	r0, r2, #25
 80090fe:	d500      	bpl.n	8009102 <_printf_i+0x166>
 8009100:	b2b6      	uxth	r6, r6
 8009102:	6019      	str	r1, [r3, #0]
 8009104:	07d3      	lsls	r3, r2, #31
 8009106:	d502      	bpl.n	800910e <_printf_i+0x172>
 8009108:	2320      	movs	r3, #32
 800910a:	4313      	orrs	r3, r2
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	2e00      	cmp	r6, #0
 8009110:	d001      	beq.n	8009116 <_printf_i+0x17a>
 8009112:	2710      	movs	r7, #16
 8009114:	e7a8      	b.n	8009068 <_printf_i+0xcc>
 8009116:	2220      	movs	r2, #32
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	4393      	bics	r3, r2
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	e7f8      	b.n	8009112 <_printf_i+0x176>
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	680d      	ldr	r5, [r1, #0]
 8009124:	1d10      	adds	r0, r2, #4
 8009126:	6949      	ldr	r1, [r1, #20]
 8009128:	6018      	str	r0, [r3, #0]
 800912a:	6813      	ldr	r3, [r2, #0]
 800912c:	062e      	lsls	r6, r5, #24
 800912e:	d501      	bpl.n	8009134 <_printf_i+0x198>
 8009130:	6019      	str	r1, [r3, #0]
 8009132:	e002      	b.n	800913a <_printf_i+0x19e>
 8009134:	066d      	lsls	r5, r5, #25
 8009136:	d5fb      	bpl.n	8009130 <_printf_i+0x194>
 8009138:	8019      	strh	r1, [r3, #0]
 800913a:	2300      	movs	r3, #0
 800913c:	9d03      	ldr	r5, [sp, #12]
 800913e:	6123      	str	r3, [r4, #16]
 8009140:	e7bf      	b.n	80090c2 <_printf_i+0x126>
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	1d11      	adds	r1, r2, #4
 8009146:	6019      	str	r1, [r3, #0]
 8009148:	6815      	ldr	r5, [r2, #0]
 800914a:	2100      	movs	r1, #0
 800914c:	0028      	movs	r0, r5
 800914e:	6862      	ldr	r2, [r4, #4]
 8009150:	f000 fc09 	bl	8009966 <memchr>
 8009154:	2800      	cmp	r0, #0
 8009156:	d001      	beq.n	800915c <_printf_i+0x1c0>
 8009158:	1b40      	subs	r0, r0, r5
 800915a:	6060      	str	r0, [r4, #4]
 800915c:	6863      	ldr	r3, [r4, #4]
 800915e:	6123      	str	r3, [r4, #16]
 8009160:	2300      	movs	r3, #0
 8009162:	9a03      	ldr	r2, [sp, #12]
 8009164:	7013      	strb	r3, [r2, #0]
 8009166:	e7ac      	b.n	80090c2 <_printf_i+0x126>
 8009168:	002a      	movs	r2, r5
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	9906      	ldr	r1, [sp, #24]
 800916e:	9805      	ldr	r0, [sp, #20]
 8009170:	9d07      	ldr	r5, [sp, #28]
 8009172:	47a8      	blx	r5
 8009174:	3001      	adds	r0, #1
 8009176:	d0ae      	beq.n	80090d6 <_printf_i+0x13a>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	079b      	lsls	r3, r3, #30
 800917c:	d415      	bmi.n	80091aa <_printf_i+0x20e>
 800917e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009180:	68e0      	ldr	r0, [r4, #12]
 8009182:	4298      	cmp	r0, r3
 8009184:	daa9      	bge.n	80090da <_printf_i+0x13e>
 8009186:	0018      	movs	r0, r3
 8009188:	e7a7      	b.n	80090da <_printf_i+0x13e>
 800918a:	0022      	movs	r2, r4
 800918c:	2301      	movs	r3, #1
 800918e:	9906      	ldr	r1, [sp, #24]
 8009190:	9805      	ldr	r0, [sp, #20]
 8009192:	9e07      	ldr	r6, [sp, #28]
 8009194:	3219      	adds	r2, #25
 8009196:	47b0      	blx	r6
 8009198:	3001      	adds	r0, #1
 800919a:	d09c      	beq.n	80090d6 <_printf_i+0x13a>
 800919c:	3501      	adds	r5, #1
 800919e:	68e3      	ldr	r3, [r4, #12]
 80091a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091a2:	1a9b      	subs	r3, r3, r2
 80091a4:	42ab      	cmp	r3, r5
 80091a6:	dcf0      	bgt.n	800918a <_printf_i+0x1ee>
 80091a8:	e7e9      	b.n	800917e <_printf_i+0x1e2>
 80091aa:	2500      	movs	r5, #0
 80091ac:	e7f7      	b.n	800919e <_printf_i+0x202>
 80091ae:	46c0      	nop			@ (mov r8, r8)
 80091b0:	0800ec86 	.word	0x0800ec86
 80091b4:	0800ec97 	.word	0x0800ec97

080091b8 <_scanf_float>:
 80091b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ba:	b08b      	sub	sp, #44	@ 0x2c
 80091bc:	0016      	movs	r6, r2
 80091be:	9003      	str	r0, [sp, #12]
 80091c0:	22ae      	movs	r2, #174	@ 0xae
 80091c2:	2000      	movs	r0, #0
 80091c4:	9307      	str	r3, [sp, #28]
 80091c6:	688b      	ldr	r3, [r1, #8]
 80091c8:	000c      	movs	r4, r1
 80091ca:	1e59      	subs	r1, r3, #1
 80091cc:	0052      	lsls	r2, r2, #1
 80091ce:	9006      	str	r0, [sp, #24]
 80091d0:	4291      	cmp	r1, r2
 80091d2:	d905      	bls.n	80091e0 <_scanf_float+0x28>
 80091d4:	3b5e      	subs	r3, #94	@ 0x5e
 80091d6:	3bff      	subs	r3, #255	@ 0xff
 80091d8:	9306      	str	r3, [sp, #24]
 80091da:	235e      	movs	r3, #94	@ 0x5e
 80091dc:	33ff      	adds	r3, #255	@ 0xff
 80091de:	60a3      	str	r3, [r4, #8]
 80091e0:	23f0      	movs	r3, #240	@ 0xf0
 80091e2:	6822      	ldr	r2, [r4, #0]
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	4313      	orrs	r3, r2
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	0023      	movs	r3, r4
 80091ec:	2500      	movs	r5, #0
 80091ee:	331c      	adds	r3, #28
 80091f0:	001f      	movs	r7, r3
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	9502      	str	r5, [sp, #8]
 80091f6:	9509      	str	r5, [sp, #36]	@ 0x24
 80091f8:	9508      	str	r5, [sp, #32]
 80091fa:	9501      	str	r5, [sp, #4]
 80091fc:	9505      	str	r5, [sp, #20]
 80091fe:	68a2      	ldr	r2, [r4, #8]
 8009200:	2a00      	cmp	r2, #0
 8009202:	d00a      	beq.n	800921a <_scanf_float+0x62>
 8009204:	6833      	ldr	r3, [r6, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b4e      	cmp	r3, #78	@ 0x4e
 800920a:	d844      	bhi.n	8009296 <_scanf_float+0xde>
 800920c:	0018      	movs	r0, r3
 800920e:	2b40      	cmp	r3, #64	@ 0x40
 8009210:	d82c      	bhi.n	800926c <_scanf_float+0xb4>
 8009212:	382b      	subs	r0, #43	@ 0x2b
 8009214:	b2c1      	uxtb	r1, r0
 8009216:	290e      	cmp	r1, #14
 8009218:	d92a      	bls.n	8009270 <_scanf_float+0xb8>
 800921a:	9b01      	ldr	r3, [sp, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <_scanf_float+0x70>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	4aa6      	ldr	r2, [pc, #664]	@ (80094bc <_scanf_float+0x304>)
 8009224:	4013      	ands	r3, r2
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	9b02      	ldr	r3, [sp, #8]
 800922a:	3b01      	subs	r3, #1
 800922c:	2b01      	cmp	r3, #1
 800922e:	d900      	bls.n	8009232 <_scanf_float+0x7a>
 8009230:	e0fe      	b.n	8009430 <_scanf_float+0x278>
 8009232:	25be      	movs	r5, #190	@ 0xbe
 8009234:	006d      	lsls	r5, r5, #1
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	429f      	cmp	r7, r3
 800923a:	d900      	bls.n	800923e <_scanf_float+0x86>
 800923c:	e0ee      	b.n	800941c <_scanf_float+0x264>
 800923e:	2001      	movs	r0, #1
 8009240:	b00b      	add	sp, #44	@ 0x2c
 8009242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009244:	0018      	movs	r0, r3
 8009246:	3861      	subs	r0, #97	@ 0x61
 8009248:	280d      	cmp	r0, #13
 800924a:	d8e6      	bhi.n	800921a <_scanf_float+0x62>
 800924c:	f7f6 ff6c 	bl	8000128 <__gnu_thumb1_case_shi>
 8009250:	ffe50089 	.word	0xffe50089
 8009254:	ffe5ffe5 	.word	0xffe5ffe5
 8009258:	00a700bb 	.word	0x00a700bb
 800925c:	ffe5ffe5 	.word	0xffe5ffe5
 8009260:	ffe5008f 	.word	0xffe5008f
 8009264:	ffe5ffe5 	.word	0xffe5ffe5
 8009268:	006bffe5 	.word	0x006bffe5
 800926c:	3841      	subs	r0, #65	@ 0x41
 800926e:	e7eb      	b.n	8009248 <_scanf_float+0x90>
 8009270:	280e      	cmp	r0, #14
 8009272:	d8d2      	bhi.n	800921a <_scanf_float+0x62>
 8009274:	f7f6 ff58 	bl	8000128 <__gnu_thumb1_case_shi>
 8009278:	ffd1004f 	.word	0xffd1004f
 800927c:	009d004f 	.word	0x009d004f
 8009280:	0021ffd1 	.word	0x0021ffd1
 8009284:	00410041 	.word	0x00410041
 8009288:	00410041 	.word	0x00410041
 800928c:	00410041 	.word	0x00410041
 8009290:	00410041 	.word	0x00410041
 8009294:	0041      	.short	0x0041
 8009296:	2b6e      	cmp	r3, #110	@ 0x6e
 8009298:	d80a      	bhi.n	80092b0 <_scanf_float+0xf8>
 800929a:	2b60      	cmp	r3, #96	@ 0x60
 800929c:	d8d2      	bhi.n	8009244 <_scanf_float+0x8c>
 800929e:	2b54      	cmp	r3, #84	@ 0x54
 80092a0:	d100      	bne.n	80092a4 <_scanf_float+0xec>
 80092a2:	e081      	b.n	80093a8 <_scanf_float+0x1f0>
 80092a4:	2b59      	cmp	r3, #89	@ 0x59
 80092a6:	d1b8      	bne.n	800921a <_scanf_float+0x62>
 80092a8:	2d07      	cmp	r5, #7
 80092aa:	d1b6      	bne.n	800921a <_scanf_float+0x62>
 80092ac:	2508      	movs	r5, #8
 80092ae:	e02f      	b.n	8009310 <_scanf_float+0x158>
 80092b0:	2b74      	cmp	r3, #116	@ 0x74
 80092b2:	d079      	beq.n	80093a8 <_scanf_float+0x1f0>
 80092b4:	2b79      	cmp	r3, #121	@ 0x79
 80092b6:	d0f7      	beq.n	80092a8 <_scanf_float+0xf0>
 80092b8:	e7af      	b.n	800921a <_scanf_float+0x62>
 80092ba:	6821      	ldr	r1, [r4, #0]
 80092bc:	05c8      	lsls	r0, r1, #23
 80092be:	d51c      	bpl.n	80092fa <_scanf_float+0x142>
 80092c0:	2380      	movs	r3, #128	@ 0x80
 80092c2:	4399      	bics	r1, r3
 80092c4:	9b01      	ldr	r3, [sp, #4]
 80092c6:	6021      	str	r1, [r4, #0]
 80092c8:	3301      	adds	r3, #1
 80092ca:	9301      	str	r3, [sp, #4]
 80092cc:	9b06      	ldr	r3, [sp, #24]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <_scanf_float+0x122>
 80092d2:	3b01      	subs	r3, #1
 80092d4:	3201      	adds	r2, #1
 80092d6:	9306      	str	r3, [sp, #24]
 80092d8:	60a2      	str	r2, [r4, #8]
 80092da:	68a3      	ldr	r3, [r4, #8]
 80092dc:	3b01      	subs	r3, #1
 80092de:	60a3      	str	r3, [r4, #8]
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	3301      	adds	r3, #1
 80092e4:	6123      	str	r3, [r4, #16]
 80092e6:	6873      	ldr	r3, [r6, #4]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	6073      	str	r3, [r6, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	dc00      	bgt.n	80092f2 <_scanf_float+0x13a>
 80092f0:	e08a      	b.n	8009408 <_scanf_float+0x250>
 80092f2:	6833      	ldr	r3, [r6, #0]
 80092f4:	3301      	adds	r3, #1
 80092f6:	6033      	str	r3, [r6, #0]
 80092f8:	e781      	b.n	80091fe <_scanf_float+0x46>
 80092fa:	9a02      	ldr	r2, [sp, #8]
 80092fc:	1951      	adds	r1, r2, r5
 80092fe:	2900      	cmp	r1, #0
 8009300:	d000      	beq.n	8009304 <_scanf_float+0x14c>
 8009302:	e78a      	b.n	800921a <_scanf_float+0x62>
 8009304:	000d      	movs	r5, r1
 8009306:	6822      	ldr	r2, [r4, #0]
 8009308:	486d      	ldr	r0, [pc, #436]	@ (80094c0 <_scanf_float+0x308>)
 800930a:	9102      	str	r1, [sp, #8]
 800930c:	4002      	ands	r2, r0
 800930e:	6022      	str	r2, [r4, #0]
 8009310:	703b      	strb	r3, [r7, #0]
 8009312:	3701      	adds	r7, #1
 8009314:	e7e1      	b.n	80092da <_scanf_float+0x122>
 8009316:	2180      	movs	r1, #128	@ 0x80
 8009318:	6822      	ldr	r2, [r4, #0]
 800931a:	420a      	tst	r2, r1
 800931c:	d100      	bne.n	8009320 <_scanf_float+0x168>
 800931e:	e77c      	b.n	800921a <_scanf_float+0x62>
 8009320:	438a      	bics	r2, r1
 8009322:	6022      	str	r2, [r4, #0]
 8009324:	e7f4      	b.n	8009310 <_scanf_float+0x158>
 8009326:	9a02      	ldr	r2, [sp, #8]
 8009328:	2a00      	cmp	r2, #0
 800932a:	d10f      	bne.n	800934c <_scanf_float+0x194>
 800932c:	9a01      	ldr	r2, [sp, #4]
 800932e:	2a00      	cmp	r2, #0
 8009330:	d10f      	bne.n	8009352 <_scanf_float+0x19a>
 8009332:	6822      	ldr	r2, [r4, #0]
 8009334:	21e0      	movs	r1, #224	@ 0xe0
 8009336:	0010      	movs	r0, r2
 8009338:	00c9      	lsls	r1, r1, #3
 800933a:	4008      	ands	r0, r1
 800933c:	4288      	cmp	r0, r1
 800933e:	d108      	bne.n	8009352 <_scanf_float+0x19a>
 8009340:	4960      	ldr	r1, [pc, #384]	@ (80094c4 <_scanf_float+0x30c>)
 8009342:	400a      	ands	r2, r1
 8009344:	6022      	str	r2, [r4, #0]
 8009346:	2201      	movs	r2, #1
 8009348:	9202      	str	r2, [sp, #8]
 800934a:	e7e1      	b.n	8009310 <_scanf_float+0x158>
 800934c:	9a02      	ldr	r2, [sp, #8]
 800934e:	2a02      	cmp	r2, #2
 8009350:	d058      	beq.n	8009404 <_scanf_float+0x24c>
 8009352:	2d01      	cmp	r5, #1
 8009354:	d002      	beq.n	800935c <_scanf_float+0x1a4>
 8009356:	2d04      	cmp	r5, #4
 8009358:	d000      	beq.n	800935c <_scanf_float+0x1a4>
 800935a:	e75e      	b.n	800921a <_scanf_float+0x62>
 800935c:	3501      	adds	r5, #1
 800935e:	b2ed      	uxtb	r5, r5
 8009360:	e7d6      	b.n	8009310 <_scanf_float+0x158>
 8009362:	9a02      	ldr	r2, [sp, #8]
 8009364:	2a01      	cmp	r2, #1
 8009366:	d000      	beq.n	800936a <_scanf_float+0x1b2>
 8009368:	e757      	b.n	800921a <_scanf_float+0x62>
 800936a:	2202      	movs	r2, #2
 800936c:	e7ec      	b.n	8009348 <_scanf_float+0x190>
 800936e:	2d00      	cmp	r5, #0
 8009370:	d110      	bne.n	8009394 <_scanf_float+0x1dc>
 8009372:	9a01      	ldr	r2, [sp, #4]
 8009374:	2a00      	cmp	r2, #0
 8009376:	d000      	beq.n	800937a <_scanf_float+0x1c2>
 8009378:	e752      	b.n	8009220 <_scanf_float+0x68>
 800937a:	6822      	ldr	r2, [r4, #0]
 800937c:	21e0      	movs	r1, #224	@ 0xe0
 800937e:	0010      	movs	r0, r2
 8009380:	00c9      	lsls	r1, r1, #3
 8009382:	4008      	ands	r0, r1
 8009384:	4288      	cmp	r0, r1
 8009386:	d000      	beq.n	800938a <_scanf_float+0x1d2>
 8009388:	e11d      	b.n	80095c6 <_scanf_float+0x40e>
 800938a:	494e      	ldr	r1, [pc, #312]	@ (80094c4 <_scanf_float+0x30c>)
 800938c:	3501      	adds	r5, #1
 800938e:	400a      	ands	r2, r1
 8009390:	6022      	str	r2, [r4, #0]
 8009392:	e7bd      	b.n	8009310 <_scanf_float+0x158>
 8009394:	21fd      	movs	r1, #253	@ 0xfd
 8009396:	1eea      	subs	r2, r5, #3
 8009398:	420a      	tst	r2, r1
 800939a:	d0df      	beq.n	800935c <_scanf_float+0x1a4>
 800939c:	e73d      	b.n	800921a <_scanf_float+0x62>
 800939e:	2d02      	cmp	r5, #2
 80093a0:	d000      	beq.n	80093a4 <_scanf_float+0x1ec>
 80093a2:	e73a      	b.n	800921a <_scanf_float+0x62>
 80093a4:	2503      	movs	r5, #3
 80093a6:	e7b3      	b.n	8009310 <_scanf_float+0x158>
 80093a8:	2d06      	cmp	r5, #6
 80093aa:	d000      	beq.n	80093ae <_scanf_float+0x1f6>
 80093ac:	e735      	b.n	800921a <_scanf_float+0x62>
 80093ae:	2507      	movs	r5, #7
 80093b0:	e7ae      	b.n	8009310 <_scanf_float+0x158>
 80093b2:	6822      	ldr	r2, [r4, #0]
 80093b4:	0591      	lsls	r1, r2, #22
 80093b6:	d400      	bmi.n	80093ba <_scanf_float+0x202>
 80093b8:	e72f      	b.n	800921a <_scanf_float+0x62>
 80093ba:	4943      	ldr	r1, [pc, #268]	@ (80094c8 <_scanf_float+0x310>)
 80093bc:	400a      	ands	r2, r1
 80093be:	6022      	str	r2, [r4, #0]
 80093c0:	9a01      	ldr	r2, [sp, #4]
 80093c2:	9205      	str	r2, [sp, #20]
 80093c4:	e7a4      	b.n	8009310 <_scanf_float+0x158>
 80093c6:	21a0      	movs	r1, #160	@ 0xa0
 80093c8:	2080      	movs	r0, #128	@ 0x80
 80093ca:	6822      	ldr	r2, [r4, #0]
 80093cc:	00c9      	lsls	r1, r1, #3
 80093ce:	4011      	ands	r1, r2
 80093d0:	00c0      	lsls	r0, r0, #3
 80093d2:	4281      	cmp	r1, r0
 80093d4:	d006      	beq.n	80093e4 <_scanf_float+0x22c>
 80093d6:	4202      	tst	r2, r0
 80093d8:	d100      	bne.n	80093dc <_scanf_float+0x224>
 80093da:	e71e      	b.n	800921a <_scanf_float+0x62>
 80093dc:	9901      	ldr	r1, [sp, #4]
 80093de:	2900      	cmp	r1, #0
 80093e0:	d100      	bne.n	80093e4 <_scanf_float+0x22c>
 80093e2:	e0f0      	b.n	80095c6 <_scanf_float+0x40e>
 80093e4:	0591      	lsls	r1, r2, #22
 80093e6:	d404      	bmi.n	80093f2 <_scanf_float+0x23a>
 80093e8:	9901      	ldr	r1, [sp, #4]
 80093ea:	9805      	ldr	r0, [sp, #20]
 80093ec:	9709      	str	r7, [sp, #36]	@ 0x24
 80093ee:	1a09      	subs	r1, r1, r0
 80093f0:	9108      	str	r1, [sp, #32]
 80093f2:	4934      	ldr	r1, [pc, #208]	@ (80094c4 <_scanf_float+0x30c>)
 80093f4:	400a      	ands	r2, r1
 80093f6:	21c0      	movs	r1, #192	@ 0xc0
 80093f8:	0049      	lsls	r1, r1, #1
 80093fa:	430a      	orrs	r2, r1
 80093fc:	6022      	str	r2, [r4, #0]
 80093fe:	2200      	movs	r2, #0
 8009400:	9201      	str	r2, [sp, #4]
 8009402:	e785      	b.n	8009310 <_scanf_float+0x158>
 8009404:	2203      	movs	r2, #3
 8009406:	e79f      	b.n	8009348 <_scanf_float+0x190>
 8009408:	23c0      	movs	r3, #192	@ 0xc0
 800940a:	005b      	lsls	r3, r3, #1
 800940c:	0031      	movs	r1, r6
 800940e:	58e3      	ldr	r3, [r4, r3]
 8009410:	9803      	ldr	r0, [sp, #12]
 8009412:	4798      	blx	r3
 8009414:	2800      	cmp	r0, #0
 8009416:	d100      	bne.n	800941a <_scanf_float+0x262>
 8009418:	e6f1      	b.n	80091fe <_scanf_float+0x46>
 800941a:	e6fe      	b.n	800921a <_scanf_float+0x62>
 800941c:	3f01      	subs	r7, #1
 800941e:	5963      	ldr	r3, [r4, r5]
 8009420:	0032      	movs	r2, r6
 8009422:	7839      	ldrb	r1, [r7, #0]
 8009424:	9803      	ldr	r0, [sp, #12]
 8009426:	4798      	blx	r3
 8009428:	6923      	ldr	r3, [r4, #16]
 800942a:	3b01      	subs	r3, #1
 800942c:	6123      	str	r3, [r4, #16]
 800942e:	e702      	b.n	8009236 <_scanf_float+0x7e>
 8009430:	1e6b      	subs	r3, r5, #1
 8009432:	2b06      	cmp	r3, #6
 8009434:	d80e      	bhi.n	8009454 <_scanf_float+0x29c>
 8009436:	9702      	str	r7, [sp, #8]
 8009438:	2d02      	cmp	r5, #2
 800943a:	d920      	bls.n	800947e <_scanf_float+0x2c6>
 800943c:	1beb      	subs	r3, r5, r7
 800943e:	b2db      	uxtb	r3, r3
 8009440:	9306      	str	r3, [sp, #24]
 8009442:	9b02      	ldr	r3, [sp, #8]
 8009444:	9a06      	ldr	r2, [sp, #24]
 8009446:	189b      	adds	r3, r3, r2
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b03      	cmp	r3, #3
 800944c:	d127      	bne.n	800949e <_scanf_float+0x2e6>
 800944e:	3d03      	subs	r5, #3
 8009450:	b2ed      	uxtb	r5, r5
 8009452:	1b7f      	subs	r7, r7, r5
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	05da      	lsls	r2, r3, #23
 8009458:	d553      	bpl.n	8009502 <_scanf_float+0x34a>
 800945a:	055b      	lsls	r3, r3, #21
 800945c:	d536      	bpl.n	80094cc <_scanf_float+0x314>
 800945e:	25be      	movs	r5, #190	@ 0xbe
 8009460:	006d      	lsls	r5, r5, #1
 8009462:	9b04      	ldr	r3, [sp, #16]
 8009464:	429f      	cmp	r7, r3
 8009466:	d800      	bhi.n	800946a <_scanf_float+0x2b2>
 8009468:	e6e9      	b.n	800923e <_scanf_float+0x86>
 800946a:	3f01      	subs	r7, #1
 800946c:	5963      	ldr	r3, [r4, r5]
 800946e:	0032      	movs	r2, r6
 8009470:	7839      	ldrb	r1, [r7, #0]
 8009472:	9803      	ldr	r0, [sp, #12]
 8009474:	4798      	blx	r3
 8009476:	6923      	ldr	r3, [r4, #16]
 8009478:	3b01      	subs	r3, #1
 800947a:	6123      	str	r3, [r4, #16]
 800947c:	e7f1      	b.n	8009462 <_scanf_float+0x2aa>
 800947e:	25be      	movs	r5, #190	@ 0xbe
 8009480:	006d      	lsls	r5, r5, #1
 8009482:	9b04      	ldr	r3, [sp, #16]
 8009484:	429f      	cmp	r7, r3
 8009486:	d800      	bhi.n	800948a <_scanf_float+0x2d2>
 8009488:	e6d9      	b.n	800923e <_scanf_float+0x86>
 800948a:	3f01      	subs	r7, #1
 800948c:	5963      	ldr	r3, [r4, r5]
 800948e:	0032      	movs	r2, r6
 8009490:	7839      	ldrb	r1, [r7, #0]
 8009492:	9803      	ldr	r0, [sp, #12]
 8009494:	4798      	blx	r3
 8009496:	6923      	ldr	r3, [r4, #16]
 8009498:	3b01      	subs	r3, #1
 800949a:	6123      	str	r3, [r4, #16]
 800949c:	e7f1      	b.n	8009482 <_scanf_float+0x2ca>
 800949e:	9b02      	ldr	r3, [sp, #8]
 80094a0:	0032      	movs	r2, r6
 80094a2:	3b01      	subs	r3, #1
 80094a4:	7819      	ldrb	r1, [r3, #0]
 80094a6:	9302      	str	r3, [sp, #8]
 80094a8:	23be      	movs	r3, #190	@ 0xbe
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	58e3      	ldr	r3, [r4, r3]
 80094ae:	9803      	ldr	r0, [sp, #12]
 80094b0:	4798      	blx	r3
 80094b2:	6923      	ldr	r3, [r4, #16]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	6123      	str	r3, [r4, #16]
 80094b8:	e7c3      	b.n	8009442 <_scanf_float+0x28a>
 80094ba:	46c0      	nop			@ (mov r8, r8)
 80094bc:	fffffeff 	.word	0xfffffeff
 80094c0:	fffffe7f 	.word	0xfffffe7f
 80094c4:	fffff87f 	.word	0xfffff87f
 80094c8:	fffffd7f 	.word	0xfffffd7f
 80094cc:	6923      	ldr	r3, [r4, #16]
 80094ce:	1e7d      	subs	r5, r7, #1
 80094d0:	7829      	ldrb	r1, [r5, #0]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	6123      	str	r3, [r4, #16]
 80094d6:	2965      	cmp	r1, #101	@ 0x65
 80094d8:	d00c      	beq.n	80094f4 <_scanf_float+0x33c>
 80094da:	2945      	cmp	r1, #69	@ 0x45
 80094dc:	d00a      	beq.n	80094f4 <_scanf_float+0x33c>
 80094de:	23be      	movs	r3, #190	@ 0xbe
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	58e3      	ldr	r3, [r4, r3]
 80094e4:	0032      	movs	r2, r6
 80094e6:	9803      	ldr	r0, [sp, #12]
 80094e8:	4798      	blx	r3
 80094ea:	6923      	ldr	r3, [r4, #16]
 80094ec:	1ebd      	subs	r5, r7, #2
 80094ee:	3b01      	subs	r3, #1
 80094f0:	7829      	ldrb	r1, [r5, #0]
 80094f2:	6123      	str	r3, [r4, #16]
 80094f4:	23be      	movs	r3, #190	@ 0xbe
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	0032      	movs	r2, r6
 80094fa:	58e3      	ldr	r3, [r4, r3]
 80094fc:	9803      	ldr	r0, [sp, #12]
 80094fe:	4798      	blx	r3
 8009500:	002f      	movs	r7, r5
 8009502:	6821      	ldr	r1, [r4, #0]
 8009504:	2310      	movs	r3, #16
 8009506:	000a      	movs	r2, r1
 8009508:	401a      	ands	r2, r3
 800950a:	4219      	tst	r1, r3
 800950c:	d001      	beq.n	8009512 <_scanf_float+0x35a>
 800950e:	2000      	movs	r0, #0
 8009510:	e696      	b.n	8009240 <_scanf_float+0x88>
 8009512:	21c0      	movs	r1, #192	@ 0xc0
 8009514:	703a      	strb	r2, [r7, #0]
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	00c9      	lsls	r1, r1, #3
 800951a:	400b      	ands	r3, r1
 800951c:	2180      	movs	r1, #128	@ 0x80
 800951e:	00c9      	lsls	r1, r1, #3
 8009520:	428b      	cmp	r3, r1
 8009522:	d11c      	bne.n	800955e <_scanf_float+0x3a6>
 8009524:	9b05      	ldr	r3, [sp, #20]
 8009526:	9a01      	ldr	r2, [sp, #4]
 8009528:	9905      	ldr	r1, [sp, #20]
 800952a:	1a9a      	subs	r2, r3, r2
 800952c:	9b01      	ldr	r3, [sp, #4]
 800952e:	428b      	cmp	r3, r1
 8009530:	d121      	bne.n	8009576 <_scanf_float+0x3be>
 8009532:	2200      	movs	r2, #0
 8009534:	9904      	ldr	r1, [sp, #16]
 8009536:	9803      	ldr	r0, [sp, #12]
 8009538:	f002 fbc4 	bl	800bcc4 <_strtod_r>
 800953c:	9b07      	ldr	r3, [sp, #28]
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	0006      	movs	r6, r0
 8009542:	000f      	movs	r7, r1
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	0791      	lsls	r1, r2, #30
 8009548:	d522      	bpl.n	8009590 <_scanf_float+0x3d8>
 800954a:	9907      	ldr	r1, [sp, #28]
 800954c:	1d1a      	adds	r2, r3, #4
 800954e:	600a      	str	r2, [r1, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	601e      	str	r6, [r3, #0]
 8009554:	605f      	str	r7, [r3, #4]
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	3301      	adds	r3, #1
 800955a:	60e3      	str	r3, [r4, #12]
 800955c:	e7d7      	b.n	800950e <_scanf_float+0x356>
 800955e:	9b08      	ldr	r3, [sp, #32]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d0e6      	beq.n	8009532 <_scanf_float+0x37a>
 8009564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009566:	9803      	ldr	r0, [sp, #12]
 8009568:	1c59      	adds	r1, r3, #1
 800956a:	230a      	movs	r3, #10
 800956c:	f002 fc3c 	bl	800bde8 <_strtol_r>
 8009570:	9b08      	ldr	r3, [sp, #32]
 8009572:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8009574:	1ac2      	subs	r2, r0, r3
 8009576:	0023      	movs	r3, r4
 8009578:	3370      	adds	r3, #112	@ 0x70
 800957a:	33ff      	adds	r3, #255	@ 0xff
 800957c:	429f      	cmp	r7, r3
 800957e:	d302      	bcc.n	8009586 <_scanf_float+0x3ce>
 8009580:	0027      	movs	r7, r4
 8009582:	376f      	adds	r7, #111	@ 0x6f
 8009584:	37ff      	adds	r7, #255	@ 0xff
 8009586:	0038      	movs	r0, r7
 8009588:	4910      	ldr	r1, [pc, #64]	@ (80095cc <_scanf_float+0x414>)
 800958a:	f000 f8e7 	bl	800975c <siprintf>
 800958e:	e7d0      	b.n	8009532 <_scanf_float+0x37a>
 8009590:	1d19      	adds	r1, r3, #4
 8009592:	0752      	lsls	r2, r2, #29
 8009594:	d502      	bpl.n	800959c <_scanf_float+0x3e4>
 8009596:	9a07      	ldr	r2, [sp, #28]
 8009598:	6011      	str	r1, [r2, #0]
 800959a:	e7d9      	b.n	8009550 <_scanf_float+0x398>
 800959c:	9a07      	ldr	r2, [sp, #28]
 800959e:	0030      	movs	r0, r6
 80095a0:	6011      	str	r1, [r2, #0]
 80095a2:	681d      	ldr	r5, [r3, #0]
 80095a4:	0032      	movs	r2, r6
 80095a6:	003b      	movs	r3, r7
 80095a8:	0039      	movs	r1, r7
 80095aa:	f7f9 fd05 	bl	8002fb8 <__aeabi_dcmpun>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d004      	beq.n	80095bc <_scanf_float+0x404>
 80095b2:	4807      	ldr	r0, [pc, #28]	@ (80095d0 <_scanf_float+0x418>)
 80095b4:	f000 f9e2 	bl	800997c <nanf>
 80095b8:	6028      	str	r0, [r5, #0]
 80095ba:	e7cc      	b.n	8009556 <_scanf_float+0x39e>
 80095bc:	0030      	movs	r0, r6
 80095be:	0039      	movs	r1, r7
 80095c0:	f7f9 fdf2 	bl	80031a8 <__aeabi_d2f>
 80095c4:	e7f8      	b.n	80095b8 <_scanf_float+0x400>
 80095c6:	2300      	movs	r3, #0
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	e62d      	b.n	8009228 <_scanf_float+0x70>
 80095cc:	0800eca8 	.word	0x0800eca8
 80095d0:	0800f03d 	.word	0x0800f03d

080095d4 <std>:
 80095d4:	2300      	movs	r3, #0
 80095d6:	b510      	push	{r4, lr}
 80095d8:	0004      	movs	r4, r0
 80095da:	6003      	str	r3, [r0, #0]
 80095dc:	6043      	str	r3, [r0, #4]
 80095de:	6083      	str	r3, [r0, #8]
 80095e0:	8181      	strh	r1, [r0, #12]
 80095e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80095e4:	81c2      	strh	r2, [r0, #14]
 80095e6:	6103      	str	r3, [r0, #16]
 80095e8:	6143      	str	r3, [r0, #20]
 80095ea:	6183      	str	r3, [r0, #24]
 80095ec:	0019      	movs	r1, r3
 80095ee:	2208      	movs	r2, #8
 80095f0:	305c      	adds	r0, #92	@ 0x5c
 80095f2:	f000 f91f 	bl	8009834 <memset>
 80095f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009624 <std+0x50>)
 80095f8:	6224      	str	r4, [r4, #32]
 80095fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80095fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009628 <std+0x54>)
 80095fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009600:	4b0a      	ldr	r3, [pc, #40]	@ (800962c <std+0x58>)
 8009602:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009604:	4b0a      	ldr	r3, [pc, #40]	@ (8009630 <std+0x5c>)
 8009606:	6323      	str	r3, [r4, #48]	@ 0x30
 8009608:	4b0a      	ldr	r3, [pc, #40]	@ (8009634 <std+0x60>)
 800960a:	429c      	cmp	r4, r3
 800960c:	d005      	beq.n	800961a <std+0x46>
 800960e:	4b0a      	ldr	r3, [pc, #40]	@ (8009638 <std+0x64>)
 8009610:	429c      	cmp	r4, r3
 8009612:	d002      	beq.n	800961a <std+0x46>
 8009614:	4b09      	ldr	r3, [pc, #36]	@ (800963c <std+0x68>)
 8009616:	429c      	cmp	r4, r3
 8009618:	d103      	bne.n	8009622 <std+0x4e>
 800961a:	0020      	movs	r0, r4
 800961c:	3058      	adds	r0, #88	@ 0x58
 800961e:	f000 f99f 	bl	8009960 <__retarget_lock_init_recursive>
 8009622:	bd10      	pop	{r4, pc}
 8009624:	0800979d 	.word	0x0800979d
 8009628:	080097c5 	.word	0x080097c5
 800962c:	080097fd 	.word	0x080097fd
 8009630:	08009829 	.word	0x08009829
 8009634:	20000778 	.word	0x20000778
 8009638:	200007e0 	.word	0x200007e0
 800963c:	20000848 	.word	0x20000848

08009640 <stdio_exit_handler>:
 8009640:	b510      	push	{r4, lr}
 8009642:	4a03      	ldr	r2, [pc, #12]	@ (8009650 <stdio_exit_handler+0x10>)
 8009644:	4903      	ldr	r1, [pc, #12]	@ (8009654 <stdio_exit_handler+0x14>)
 8009646:	4804      	ldr	r0, [pc, #16]	@ (8009658 <stdio_exit_handler+0x18>)
 8009648:	f000 f86c 	bl	8009724 <_fwalk_sglue>
 800964c:	bd10      	pop	{r4, pc}
 800964e:	46c0      	nop			@ (mov r8, r8)
 8009650:	20000024 	.word	0x20000024
 8009654:	0800c1b9 	.word	0x0800c1b9
 8009658:	20000034 	.word	0x20000034

0800965c <cleanup_stdio>:
 800965c:	6841      	ldr	r1, [r0, #4]
 800965e:	4b0b      	ldr	r3, [pc, #44]	@ (800968c <cleanup_stdio+0x30>)
 8009660:	b510      	push	{r4, lr}
 8009662:	0004      	movs	r4, r0
 8009664:	4299      	cmp	r1, r3
 8009666:	d001      	beq.n	800966c <cleanup_stdio+0x10>
 8009668:	f002 fda6 	bl	800c1b8 <_fflush_r>
 800966c:	68a1      	ldr	r1, [r4, #8]
 800966e:	4b08      	ldr	r3, [pc, #32]	@ (8009690 <cleanup_stdio+0x34>)
 8009670:	4299      	cmp	r1, r3
 8009672:	d002      	beq.n	800967a <cleanup_stdio+0x1e>
 8009674:	0020      	movs	r0, r4
 8009676:	f002 fd9f 	bl	800c1b8 <_fflush_r>
 800967a:	68e1      	ldr	r1, [r4, #12]
 800967c:	4b05      	ldr	r3, [pc, #20]	@ (8009694 <cleanup_stdio+0x38>)
 800967e:	4299      	cmp	r1, r3
 8009680:	d002      	beq.n	8009688 <cleanup_stdio+0x2c>
 8009682:	0020      	movs	r0, r4
 8009684:	f002 fd98 	bl	800c1b8 <_fflush_r>
 8009688:	bd10      	pop	{r4, pc}
 800968a:	46c0      	nop			@ (mov r8, r8)
 800968c:	20000778 	.word	0x20000778
 8009690:	200007e0 	.word	0x200007e0
 8009694:	20000848 	.word	0x20000848

08009698 <global_stdio_init.part.0>:
 8009698:	b510      	push	{r4, lr}
 800969a:	4b09      	ldr	r3, [pc, #36]	@ (80096c0 <global_stdio_init.part.0+0x28>)
 800969c:	4a09      	ldr	r2, [pc, #36]	@ (80096c4 <global_stdio_init.part.0+0x2c>)
 800969e:	2104      	movs	r1, #4
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	4809      	ldr	r0, [pc, #36]	@ (80096c8 <global_stdio_init.part.0+0x30>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	f7ff ff95 	bl	80095d4 <std>
 80096aa:	2201      	movs	r2, #1
 80096ac:	2109      	movs	r1, #9
 80096ae:	4807      	ldr	r0, [pc, #28]	@ (80096cc <global_stdio_init.part.0+0x34>)
 80096b0:	f7ff ff90 	bl	80095d4 <std>
 80096b4:	2202      	movs	r2, #2
 80096b6:	2112      	movs	r1, #18
 80096b8:	4805      	ldr	r0, [pc, #20]	@ (80096d0 <global_stdio_init.part.0+0x38>)
 80096ba:	f7ff ff8b 	bl	80095d4 <std>
 80096be:	bd10      	pop	{r4, pc}
 80096c0:	200008b0 	.word	0x200008b0
 80096c4:	08009641 	.word	0x08009641
 80096c8:	20000778 	.word	0x20000778
 80096cc:	200007e0 	.word	0x200007e0
 80096d0:	20000848 	.word	0x20000848

080096d4 <__sfp_lock_acquire>:
 80096d4:	b510      	push	{r4, lr}
 80096d6:	4802      	ldr	r0, [pc, #8]	@ (80096e0 <__sfp_lock_acquire+0xc>)
 80096d8:	f000 f943 	bl	8009962 <__retarget_lock_acquire_recursive>
 80096dc:	bd10      	pop	{r4, pc}
 80096de:	46c0      	nop			@ (mov r8, r8)
 80096e0:	200008b9 	.word	0x200008b9

080096e4 <__sfp_lock_release>:
 80096e4:	b510      	push	{r4, lr}
 80096e6:	4802      	ldr	r0, [pc, #8]	@ (80096f0 <__sfp_lock_release+0xc>)
 80096e8:	f000 f93c 	bl	8009964 <__retarget_lock_release_recursive>
 80096ec:	bd10      	pop	{r4, pc}
 80096ee:	46c0      	nop			@ (mov r8, r8)
 80096f0:	200008b9 	.word	0x200008b9

080096f4 <__sinit>:
 80096f4:	b510      	push	{r4, lr}
 80096f6:	0004      	movs	r4, r0
 80096f8:	f7ff ffec 	bl	80096d4 <__sfp_lock_acquire>
 80096fc:	6a23      	ldr	r3, [r4, #32]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <__sinit+0x14>
 8009702:	f7ff ffef 	bl	80096e4 <__sfp_lock_release>
 8009706:	bd10      	pop	{r4, pc}
 8009708:	4b04      	ldr	r3, [pc, #16]	@ (800971c <__sinit+0x28>)
 800970a:	6223      	str	r3, [r4, #32]
 800970c:	4b04      	ldr	r3, [pc, #16]	@ (8009720 <__sinit+0x2c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1f6      	bne.n	8009702 <__sinit+0xe>
 8009714:	f7ff ffc0 	bl	8009698 <global_stdio_init.part.0>
 8009718:	e7f3      	b.n	8009702 <__sinit+0xe>
 800971a:	46c0      	nop			@ (mov r8, r8)
 800971c:	0800965d 	.word	0x0800965d
 8009720:	200008b0 	.word	0x200008b0

08009724 <_fwalk_sglue>:
 8009724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009726:	0014      	movs	r4, r2
 8009728:	2600      	movs	r6, #0
 800972a:	9000      	str	r0, [sp, #0]
 800972c:	9101      	str	r1, [sp, #4]
 800972e:	68a5      	ldr	r5, [r4, #8]
 8009730:	6867      	ldr	r7, [r4, #4]
 8009732:	3f01      	subs	r7, #1
 8009734:	d504      	bpl.n	8009740 <_fwalk_sglue+0x1c>
 8009736:	6824      	ldr	r4, [r4, #0]
 8009738:	2c00      	cmp	r4, #0
 800973a:	d1f8      	bne.n	800972e <_fwalk_sglue+0xa>
 800973c:	0030      	movs	r0, r6
 800973e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009740:	89ab      	ldrh	r3, [r5, #12]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d908      	bls.n	8009758 <_fwalk_sglue+0x34>
 8009746:	220e      	movs	r2, #14
 8009748:	5eab      	ldrsh	r3, [r5, r2]
 800974a:	3301      	adds	r3, #1
 800974c:	d004      	beq.n	8009758 <_fwalk_sglue+0x34>
 800974e:	0029      	movs	r1, r5
 8009750:	9800      	ldr	r0, [sp, #0]
 8009752:	9b01      	ldr	r3, [sp, #4]
 8009754:	4798      	blx	r3
 8009756:	4306      	orrs	r6, r0
 8009758:	3568      	adds	r5, #104	@ 0x68
 800975a:	e7ea      	b.n	8009732 <_fwalk_sglue+0xe>

0800975c <siprintf>:
 800975c:	b40e      	push	{r1, r2, r3}
 800975e:	b500      	push	{lr}
 8009760:	490b      	ldr	r1, [pc, #44]	@ (8009790 <siprintf+0x34>)
 8009762:	b09c      	sub	sp, #112	@ 0x70
 8009764:	ab1d      	add	r3, sp, #116	@ 0x74
 8009766:	9002      	str	r0, [sp, #8]
 8009768:	9006      	str	r0, [sp, #24]
 800976a:	9107      	str	r1, [sp, #28]
 800976c:	9104      	str	r1, [sp, #16]
 800976e:	4809      	ldr	r0, [pc, #36]	@ (8009794 <siprintf+0x38>)
 8009770:	4909      	ldr	r1, [pc, #36]	@ (8009798 <siprintf+0x3c>)
 8009772:	cb04      	ldmia	r3!, {r2}
 8009774:	9105      	str	r1, [sp, #20]
 8009776:	6800      	ldr	r0, [r0, #0]
 8009778:	a902      	add	r1, sp, #8
 800977a:	9301      	str	r3, [sp, #4]
 800977c:	f002 fb98 	bl	800beb0 <_svfiprintf_r>
 8009780:	2200      	movs	r2, #0
 8009782:	9b02      	ldr	r3, [sp, #8]
 8009784:	701a      	strb	r2, [r3, #0]
 8009786:	b01c      	add	sp, #112	@ 0x70
 8009788:	bc08      	pop	{r3}
 800978a:	b003      	add	sp, #12
 800978c:	4718      	bx	r3
 800978e:	46c0      	nop			@ (mov r8, r8)
 8009790:	7fffffff 	.word	0x7fffffff
 8009794:	20000030 	.word	0x20000030
 8009798:	ffff0208 	.word	0xffff0208

0800979c <__sread>:
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	000c      	movs	r4, r1
 80097a0:	250e      	movs	r5, #14
 80097a2:	5f49      	ldrsh	r1, [r1, r5]
 80097a4:	f000 f878 	bl	8009898 <_read_r>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	db03      	blt.n	80097b4 <__sread+0x18>
 80097ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80097ae:	181b      	adds	r3, r3, r0
 80097b0:	6563      	str	r3, [r4, #84]	@ 0x54
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	4a02      	ldr	r2, [pc, #8]	@ (80097c0 <__sread+0x24>)
 80097b8:	4013      	ands	r3, r2
 80097ba:	81a3      	strh	r3, [r4, #12]
 80097bc:	e7f9      	b.n	80097b2 <__sread+0x16>
 80097be:	46c0      	nop			@ (mov r8, r8)
 80097c0:	ffffefff 	.word	0xffffefff

080097c4 <__swrite>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	001f      	movs	r7, r3
 80097c8:	898b      	ldrh	r3, [r1, #12]
 80097ca:	0005      	movs	r5, r0
 80097cc:	000c      	movs	r4, r1
 80097ce:	0016      	movs	r6, r2
 80097d0:	05db      	lsls	r3, r3, #23
 80097d2:	d505      	bpl.n	80097e0 <__swrite+0x1c>
 80097d4:	230e      	movs	r3, #14
 80097d6:	5ec9      	ldrsh	r1, [r1, r3]
 80097d8:	2200      	movs	r2, #0
 80097da:	2302      	movs	r3, #2
 80097dc:	f000 f848 	bl	8009870 <_lseek_r>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	4a05      	ldr	r2, [pc, #20]	@ (80097f8 <__swrite+0x34>)
 80097e4:	0028      	movs	r0, r5
 80097e6:	4013      	ands	r3, r2
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	0032      	movs	r2, r6
 80097ec:	230e      	movs	r3, #14
 80097ee:	5ee1      	ldrsh	r1, [r4, r3]
 80097f0:	003b      	movs	r3, r7
 80097f2:	f000 f877 	bl	80098e4 <_write_r>
 80097f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f8:	ffffefff 	.word	0xffffefff

080097fc <__sseek>:
 80097fc:	b570      	push	{r4, r5, r6, lr}
 80097fe:	000c      	movs	r4, r1
 8009800:	250e      	movs	r5, #14
 8009802:	5f49      	ldrsh	r1, [r1, r5]
 8009804:	f000 f834 	bl	8009870 <_lseek_r>
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	1c42      	adds	r2, r0, #1
 800980c:	d103      	bne.n	8009816 <__sseek+0x1a>
 800980e:	4a05      	ldr	r2, [pc, #20]	@ (8009824 <__sseek+0x28>)
 8009810:	4013      	ands	r3, r2
 8009812:	81a3      	strh	r3, [r4, #12]
 8009814:	bd70      	pop	{r4, r5, r6, pc}
 8009816:	2280      	movs	r2, #128	@ 0x80
 8009818:	0152      	lsls	r2, r2, #5
 800981a:	4313      	orrs	r3, r2
 800981c:	81a3      	strh	r3, [r4, #12]
 800981e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009820:	e7f8      	b.n	8009814 <__sseek+0x18>
 8009822:	46c0      	nop			@ (mov r8, r8)
 8009824:	ffffefff 	.word	0xffffefff

08009828 <__sclose>:
 8009828:	b510      	push	{r4, lr}
 800982a:	230e      	movs	r3, #14
 800982c:	5ec9      	ldrsh	r1, [r1, r3]
 800982e:	f000 f80d 	bl	800984c <_close_r>
 8009832:	bd10      	pop	{r4, pc}

08009834 <memset>:
 8009834:	0003      	movs	r3, r0
 8009836:	1882      	adds	r2, r0, r2
 8009838:	4293      	cmp	r3, r2
 800983a:	d100      	bne.n	800983e <memset+0xa>
 800983c:	4770      	bx	lr
 800983e:	7019      	strb	r1, [r3, #0]
 8009840:	3301      	adds	r3, #1
 8009842:	e7f9      	b.n	8009838 <memset+0x4>

08009844 <_localeconv_r>:
 8009844:	4800      	ldr	r0, [pc, #0]	@ (8009848 <_localeconv_r+0x4>)
 8009846:	4770      	bx	lr
 8009848:	20000170 	.word	0x20000170

0800984c <_close_r>:
 800984c:	2300      	movs	r3, #0
 800984e:	b570      	push	{r4, r5, r6, lr}
 8009850:	4d06      	ldr	r5, [pc, #24]	@ (800986c <_close_r+0x20>)
 8009852:	0004      	movs	r4, r0
 8009854:	0008      	movs	r0, r1
 8009856:	602b      	str	r3, [r5, #0]
 8009858:	f7fb f9ea 	bl	8004c30 <_close>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d103      	bne.n	8009868 <_close_r+0x1c>
 8009860:	682b      	ldr	r3, [r5, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d000      	beq.n	8009868 <_close_r+0x1c>
 8009866:	6023      	str	r3, [r4, #0]
 8009868:	bd70      	pop	{r4, r5, r6, pc}
 800986a:	46c0      	nop			@ (mov r8, r8)
 800986c:	200008b4 	.word	0x200008b4

08009870 <_lseek_r>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	0004      	movs	r4, r0
 8009874:	0008      	movs	r0, r1
 8009876:	0011      	movs	r1, r2
 8009878:	001a      	movs	r2, r3
 800987a:	2300      	movs	r3, #0
 800987c:	4d05      	ldr	r5, [pc, #20]	@ (8009894 <_lseek_r+0x24>)
 800987e:	602b      	str	r3, [r5, #0]
 8009880:	f7fb f9f7 	bl	8004c72 <_lseek>
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	d103      	bne.n	8009890 <_lseek_r+0x20>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d000      	beq.n	8009890 <_lseek_r+0x20>
 800988e:	6023      	str	r3, [r4, #0]
 8009890:	bd70      	pop	{r4, r5, r6, pc}
 8009892:	46c0      	nop			@ (mov r8, r8)
 8009894:	200008b4 	.word	0x200008b4

08009898 <_read_r>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	0004      	movs	r4, r0
 800989c:	0008      	movs	r0, r1
 800989e:	0011      	movs	r1, r2
 80098a0:	001a      	movs	r2, r3
 80098a2:	2300      	movs	r3, #0
 80098a4:	4d05      	ldr	r5, [pc, #20]	@ (80098bc <_read_r+0x24>)
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	f7fb f989 	bl	8004bbe <_read>
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	d103      	bne.n	80098b8 <_read_r+0x20>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d000      	beq.n	80098b8 <_read_r+0x20>
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	bd70      	pop	{r4, r5, r6, pc}
 80098ba:	46c0      	nop			@ (mov r8, r8)
 80098bc:	200008b4 	.word	0x200008b4

080098c0 <_sbrk_r>:
 80098c0:	2300      	movs	r3, #0
 80098c2:	b570      	push	{r4, r5, r6, lr}
 80098c4:	4d06      	ldr	r5, [pc, #24]	@ (80098e0 <_sbrk_r+0x20>)
 80098c6:	0004      	movs	r4, r0
 80098c8:	0008      	movs	r0, r1
 80098ca:	602b      	str	r3, [r5, #0]
 80098cc:	f7fb f9dc 	bl	8004c88 <_sbrk>
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	d103      	bne.n	80098dc <_sbrk_r+0x1c>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d000      	beq.n	80098dc <_sbrk_r+0x1c>
 80098da:	6023      	str	r3, [r4, #0]
 80098dc:	bd70      	pop	{r4, r5, r6, pc}
 80098de:	46c0      	nop			@ (mov r8, r8)
 80098e0:	200008b4 	.word	0x200008b4

080098e4 <_write_r>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	0004      	movs	r4, r0
 80098e8:	0008      	movs	r0, r1
 80098ea:	0011      	movs	r1, r2
 80098ec:	001a      	movs	r2, r3
 80098ee:	2300      	movs	r3, #0
 80098f0:	4d05      	ldr	r5, [pc, #20]	@ (8009908 <_write_r+0x24>)
 80098f2:	602b      	str	r3, [r5, #0]
 80098f4:	f7fb f980 	bl	8004bf8 <_write>
 80098f8:	1c43      	adds	r3, r0, #1
 80098fa:	d103      	bne.n	8009904 <_write_r+0x20>
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d000      	beq.n	8009904 <_write_r+0x20>
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	bd70      	pop	{r4, r5, r6, pc}
 8009906:	46c0      	nop			@ (mov r8, r8)
 8009908:	200008b4 	.word	0x200008b4

0800990c <__errno>:
 800990c:	4b01      	ldr	r3, [pc, #4]	@ (8009914 <__errno+0x8>)
 800990e:	6818      	ldr	r0, [r3, #0]
 8009910:	4770      	bx	lr
 8009912:	46c0      	nop			@ (mov r8, r8)
 8009914:	20000030 	.word	0x20000030

08009918 <__libc_init_array>:
 8009918:	b570      	push	{r4, r5, r6, lr}
 800991a:	2600      	movs	r6, #0
 800991c:	4c0c      	ldr	r4, [pc, #48]	@ (8009950 <__libc_init_array+0x38>)
 800991e:	4d0d      	ldr	r5, [pc, #52]	@ (8009954 <__libc_init_array+0x3c>)
 8009920:	1b64      	subs	r4, r4, r5
 8009922:	10a4      	asrs	r4, r4, #2
 8009924:	42a6      	cmp	r6, r4
 8009926:	d109      	bne.n	800993c <__libc_init_array+0x24>
 8009928:	2600      	movs	r6, #0
 800992a:	f003 fb73 	bl	800d014 <_init>
 800992e:	4c0a      	ldr	r4, [pc, #40]	@ (8009958 <__libc_init_array+0x40>)
 8009930:	4d0a      	ldr	r5, [pc, #40]	@ (800995c <__libc_init_array+0x44>)
 8009932:	1b64      	subs	r4, r4, r5
 8009934:	10a4      	asrs	r4, r4, #2
 8009936:	42a6      	cmp	r6, r4
 8009938:	d105      	bne.n	8009946 <__libc_init_array+0x2e>
 800993a:	bd70      	pop	{r4, r5, r6, pc}
 800993c:	00b3      	lsls	r3, r6, #2
 800993e:	58eb      	ldr	r3, [r5, r3]
 8009940:	4798      	blx	r3
 8009942:	3601      	adds	r6, #1
 8009944:	e7ee      	b.n	8009924 <__libc_init_array+0xc>
 8009946:	00b3      	lsls	r3, r6, #2
 8009948:	58eb      	ldr	r3, [r5, r3]
 800994a:	4798      	blx	r3
 800994c:	3601      	adds	r6, #1
 800994e:	e7f2      	b.n	8009936 <__libc_init_array+0x1e>
 8009950:	0800f0a0 	.word	0x0800f0a0
 8009954:	0800f0a0 	.word	0x0800f0a0
 8009958:	0800f0a4 	.word	0x0800f0a4
 800995c:	0800f0a0 	.word	0x0800f0a0

08009960 <__retarget_lock_init_recursive>:
 8009960:	4770      	bx	lr

08009962 <__retarget_lock_acquire_recursive>:
 8009962:	4770      	bx	lr

08009964 <__retarget_lock_release_recursive>:
 8009964:	4770      	bx	lr

08009966 <memchr>:
 8009966:	b2c9      	uxtb	r1, r1
 8009968:	1882      	adds	r2, r0, r2
 800996a:	4290      	cmp	r0, r2
 800996c:	d101      	bne.n	8009972 <memchr+0xc>
 800996e:	2000      	movs	r0, #0
 8009970:	4770      	bx	lr
 8009972:	7803      	ldrb	r3, [r0, #0]
 8009974:	428b      	cmp	r3, r1
 8009976:	d0fb      	beq.n	8009970 <memchr+0xa>
 8009978:	3001      	adds	r0, #1
 800997a:	e7f6      	b.n	800996a <memchr+0x4>

0800997c <nanf>:
 800997c:	4800      	ldr	r0, [pc, #0]	@ (8009980 <nanf+0x4>)
 800997e:	4770      	bx	lr
 8009980:	7fc00000 	.word	0x7fc00000

08009984 <quorem>:
 8009984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009986:	6902      	ldr	r2, [r0, #16]
 8009988:	690f      	ldr	r7, [r1, #16]
 800998a:	b087      	sub	sp, #28
 800998c:	0006      	movs	r6, r0
 800998e:	000b      	movs	r3, r1
 8009990:	2000      	movs	r0, #0
 8009992:	9102      	str	r1, [sp, #8]
 8009994:	42ba      	cmp	r2, r7
 8009996:	db6d      	blt.n	8009a74 <quorem+0xf0>
 8009998:	3f01      	subs	r7, #1
 800999a:	00bc      	lsls	r4, r7, #2
 800999c:	3314      	adds	r3, #20
 800999e:	9305      	str	r3, [sp, #20]
 80099a0:	191b      	adds	r3, r3, r4
 80099a2:	9303      	str	r3, [sp, #12]
 80099a4:	0033      	movs	r3, r6
 80099a6:	3314      	adds	r3, #20
 80099a8:	191c      	adds	r4, r3, r4
 80099aa:	9301      	str	r3, [sp, #4]
 80099ac:	6823      	ldr	r3, [r4, #0]
 80099ae:	9304      	str	r3, [sp, #16]
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	9804      	ldr	r0, [sp, #16]
 80099b4:	681d      	ldr	r5, [r3, #0]
 80099b6:	3501      	adds	r5, #1
 80099b8:	0029      	movs	r1, r5
 80099ba:	f7f6 fbbf 	bl	800013c <__udivsi3>
 80099be:	9b04      	ldr	r3, [sp, #16]
 80099c0:	9000      	str	r0, [sp, #0]
 80099c2:	42ab      	cmp	r3, r5
 80099c4:	d32b      	bcc.n	8009a1e <quorem+0x9a>
 80099c6:	9b05      	ldr	r3, [sp, #20]
 80099c8:	9d01      	ldr	r5, [sp, #4]
 80099ca:	469c      	mov	ip, r3
 80099cc:	2300      	movs	r3, #0
 80099ce:	9305      	str	r3, [sp, #20]
 80099d0:	9304      	str	r3, [sp, #16]
 80099d2:	4662      	mov	r2, ip
 80099d4:	ca08      	ldmia	r2!, {r3}
 80099d6:	6828      	ldr	r0, [r5, #0]
 80099d8:	4694      	mov	ip, r2
 80099da:	9a00      	ldr	r2, [sp, #0]
 80099dc:	b299      	uxth	r1, r3
 80099de:	4351      	muls	r1, r2
 80099e0:	9a05      	ldr	r2, [sp, #20]
 80099e2:	0c1b      	lsrs	r3, r3, #16
 80099e4:	1889      	adds	r1, r1, r2
 80099e6:	9a00      	ldr	r2, [sp, #0]
 80099e8:	4353      	muls	r3, r2
 80099ea:	0c0a      	lsrs	r2, r1, #16
 80099ec:	189b      	adds	r3, r3, r2
 80099ee:	0c1a      	lsrs	r2, r3, #16
 80099f0:	b289      	uxth	r1, r1
 80099f2:	9205      	str	r2, [sp, #20]
 80099f4:	b282      	uxth	r2, r0
 80099f6:	1a52      	subs	r2, r2, r1
 80099f8:	9904      	ldr	r1, [sp, #16]
 80099fa:	0c00      	lsrs	r0, r0, #16
 80099fc:	1852      	adds	r2, r2, r1
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	1411      	asrs	r1, r2, #16
 8009a02:	1ac3      	subs	r3, r0, r3
 8009a04:	185b      	adds	r3, r3, r1
 8009a06:	1419      	asrs	r1, r3, #16
 8009a08:	b292      	uxth	r2, r2
 8009a0a:	041b      	lsls	r3, r3, #16
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	9104      	str	r1, [sp, #16]
 8009a12:	c504      	stmia	r5!, {r2}
 8009a14:	4563      	cmp	r3, ip
 8009a16:	d2dc      	bcs.n	80099d2 <quorem+0x4e>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d030      	beq.n	8009a80 <quorem+0xfc>
 8009a1e:	0030      	movs	r0, r6
 8009a20:	9902      	ldr	r1, [sp, #8]
 8009a22:	f001 f955 	bl	800acd0 <__mcmp>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	db23      	blt.n	8009a72 <quorem+0xee>
 8009a2a:	0034      	movs	r4, r6
 8009a2c:	2500      	movs	r5, #0
 8009a2e:	9902      	ldr	r1, [sp, #8]
 8009a30:	3414      	adds	r4, #20
 8009a32:	3114      	adds	r1, #20
 8009a34:	6823      	ldr	r3, [r4, #0]
 8009a36:	c901      	ldmia	r1!, {r0}
 8009a38:	9302      	str	r3, [sp, #8]
 8009a3a:	466b      	mov	r3, sp
 8009a3c:	891b      	ldrh	r3, [r3, #8]
 8009a3e:	b282      	uxth	r2, r0
 8009a40:	1a9a      	subs	r2, r3, r2
 8009a42:	9b02      	ldr	r3, [sp, #8]
 8009a44:	1952      	adds	r2, r2, r5
 8009a46:	0c00      	lsrs	r0, r0, #16
 8009a48:	0c1b      	lsrs	r3, r3, #16
 8009a4a:	1a1b      	subs	r3, r3, r0
 8009a4c:	1410      	asrs	r0, r2, #16
 8009a4e:	181b      	adds	r3, r3, r0
 8009a50:	141d      	asrs	r5, r3, #16
 8009a52:	b292      	uxth	r2, r2
 8009a54:	041b      	lsls	r3, r3, #16
 8009a56:	431a      	orrs	r2, r3
 8009a58:	9b03      	ldr	r3, [sp, #12]
 8009a5a:	c404      	stmia	r4!, {r2}
 8009a5c:	428b      	cmp	r3, r1
 8009a5e:	d2e9      	bcs.n	8009a34 <quorem+0xb0>
 8009a60:	9a01      	ldr	r2, [sp, #4]
 8009a62:	00bb      	lsls	r3, r7, #2
 8009a64:	18d3      	adds	r3, r2, r3
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	2a00      	cmp	r2, #0
 8009a6a:	d013      	beq.n	8009a94 <quorem+0x110>
 8009a6c:	9b00      	ldr	r3, [sp, #0]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	9800      	ldr	r0, [sp, #0]
 8009a74:	b007      	add	sp, #28
 8009a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d104      	bne.n	8009a88 <quorem+0x104>
 8009a7e:	3f01      	subs	r7, #1
 8009a80:	9b01      	ldr	r3, [sp, #4]
 8009a82:	3c04      	subs	r4, #4
 8009a84:	42a3      	cmp	r3, r4
 8009a86:	d3f7      	bcc.n	8009a78 <quorem+0xf4>
 8009a88:	6137      	str	r7, [r6, #16]
 8009a8a:	e7c8      	b.n	8009a1e <quorem+0x9a>
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	2a00      	cmp	r2, #0
 8009a90:	d104      	bne.n	8009a9c <quorem+0x118>
 8009a92:	3f01      	subs	r7, #1
 8009a94:	9a01      	ldr	r2, [sp, #4]
 8009a96:	3b04      	subs	r3, #4
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d3f7      	bcc.n	8009a8c <quorem+0x108>
 8009a9c:	6137      	str	r7, [r6, #16]
 8009a9e:	e7e5      	b.n	8009a6c <quorem+0xe8>

08009aa0 <_dtoa_r>:
 8009aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa2:	0014      	movs	r4, r2
 8009aa4:	001d      	movs	r5, r3
 8009aa6:	69c6      	ldr	r6, [r0, #28]
 8009aa8:	b09d      	sub	sp, #116	@ 0x74
 8009aaa:	940a      	str	r4, [sp, #40]	@ 0x28
 8009aac:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009aae:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8009ab0:	9003      	str	r0, [sp, #12]
 8009ab2:	2e00      	cmp	r6, #0
 8009ab4:	d10f      	bne.n	8009ad6 <_dtoa_r+0x36>
 8009ab6:	2010      	movs	r0, #16
 8009ab8:	f7fe fe60 	bl	800877c <malloc>
 8009abc:	9b03      	ldr	r3, [sp, #12]
 8009abe:	1e02      	subs	r2, r0, #0
 8009ac0:	61d8      	str	r0, [r3, #28]
 8009ac2:	d104      	bne.n	8009ace <_dtoa_r+0x2e>
 8009ac4:	21ef      	movs	r1, #239	@ 0xef
 8009ac6:	4bc7      	ldr	r3, [pc, #796]	@ (8009de4 <_dtoa_r+0x344>)
 8009ac8:	48c7      	ldr	r0, [pc, #796]	@ (8009de8 <_dtoa_r+0x348>)
 8009aca:	f002 fbd3 	bl	800c274 <__assert_func>
 8009ace:	6046      	str	r6, [r0, #4]
 8009ad0:	6086      	str	r6, [r0, #8]
 8009ad2:	6006      	str	r6, [r0, #0]
 8009ad4:	60c6      	str	r6, [r0, #12]
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	6819      	ldr	r1, [r3, #0]
 8009adc:	2900      	cmp	r1, #0
 8009ade:	d00b      	beq.n	8009af8 <_dtoa_r+0x58>
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	4093      	lsls	r3, r2
 8009ae6:	604a      	str	r2, [r1, #4]
 8009ae8:	608b      	str	r3, [r1, #8]
 8009aea:	9803      	ldr	r0, [sp, #12]
 8009aec:	f000 fe5a 	bl	800a7a4 <_Bfree>
 8009af0:	2200      	movs	r2, #0
 8009af2:	9b03      	ldr	r3, [sp, #12]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	2d00      	cmp	r5, #0
 8009afa:	da1e      	bge.n	8009b3a <_dtoa_r+0x9a>
 8009afc:	2301      	movs	r3, #1
 8009afe:	603b      	str	r3, [r7, #0]
 8009b00:	006b      	lsls	r3, r5, #1
 8009b02:	085b      	lsrs	r3, r3, #1
 8009b04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b06:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009b08:	4bb8      	ldr	r3, [pc, #736]	@ (8009dec <_dtoa_r+0x34c>)
 8009b0a:	4ab8      	ldr	r2, [pc, #736]	@ (8009dec <_dtoa_r+0x34c>)
 8009b0c:	403b      	ands	r3, r7
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d116      	bne.n	8009b40 <_dtoa_r+0xa0>
 8009b12:	4bb7      	ldr	r3, [pc, #732]	@ (8009df0 <_dtoa_r+0x350>)
 8009b14:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009b16:	6013      	str	r3, [r2, #0]
 8009b18:	033b      	lsls	r3, r7, #12
 8009b1a:	0b1b      	lsrs	r3, r3, #12
 8009b1c:	4323      	orrs	r3, r4
 8009b1e:	d101      	bne.n	8009b24 <_dtoa_r+0x84>
 8009b20:	f000 fd83 	bl	800a62a <_dtoa_r+0xb8a>
 8009b24:	4bb3      	ldr	r3, [pc, #716]	@ (8009df4 <_dtoa_r+0x354>)
 8009b26:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009b28:	9308      	str	r3, [sp, #32]
 8009b2a:	2a00      	cmp	r2, #0
 8009b2c:	d002      	beq.n	8009b34 <_dtoa_r+0x94>
 8009b2e:	4bb2      	ldr	r3, [pc, #712]	@ (8009df8 <_dtoa_r+0x358>)
 8009b30:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009b32:	6013      	str	r3, [r2, #0]
 8009b34:	9808      	ldr	r0, [sp, #32]
 8009b36:	b01d      	add	sp, #116	@ 0x74
 8009b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	603b      	str	r3, [r7, #0]
 8009b3e:	e7e2      	b.n	8009b06 <_dtoa_r+0x66>
 8009b40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b44:	9212      	str	r2, [sp, #72]	@ 0x48
 8009b46:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b48:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009b4a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2300      	movs	r3, #0
 8009b50:	f7f6 fc7a 	bl	8000448 <__aeabi_dcmpeq>
 8009b54:	1e06      	subs	r6, r0, #0
 8009b56:	d00b      	beq.n	8009b70 <_dtoa_r+0xd0>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009b5c:	6013      	str	r3, [r2, #0]
 8009b5e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d002      	beq.n	8009b6a <_dtoa_r+0xca>
 8009b64:	4ba5      	ldr	r3, [pc, #660]	@ (8009dfc <_dtoa_r+0x35c>)
 8009b66:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	4ba5      	ldr	r3, [pc, #660]	@ (8009e00 <_dtoa_r+0x360>)
 8009b6c:	9308      	str	r3, [sp, #32]
 8009b6e:	e7e1      	b.n	8009b34 <_dtoa_r+0x94>
 8009b70:	ab1a      	add	r3, sp, #104	@ 0x68
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	9803      	ldr	r0, [sp, #12]
 8009b7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b7e:	f001 f9c9 	bl	800af14 <__d2b>
 8009b82:	007a      	lsls	r2, r7, #1
 8009b84:	9005      	str	r0, [sp, #20]
 8009b86:	0d52      	lsrs	r2, r2, #21
 8009b88:	d100      	bne.n	8009b8c <_dtoa_r+0xec>
 8009b8a:	e07b      	b.n	8009c84 <_dtoa_r+0x1e4>
 8009b8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b8e:	9618      	str	r6, [sp, #96]	@ 0x60
 8009b90:	0319      	lsls	r1, r3, #12
 8009b92:	4b9c      	ldr	r3, [pc, #624]	@ (8009e04 <_dtoa_r+0x364>)
 8009b94:	0b09      	lsrs	r1, r1, #12
 8009b96:	430b      	orrs	r3, r1
 8009b98:	499b      	ldr	r1, [pc, #620]	@ (8009e08 <_dtoa_r+0x368>)
 8009b9a:	1857      	adds	r7, r2, r1
 8009b9c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009b9e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009ba0:	0019      	movs	r1, r3
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	4b99      	ldr	r3, [pc, #612]	@ (8009e0c <_dtoa_r+0x36c>)
 8009ba6:	f7f8 fe6b 	bl	8002880 <__aeabi_dsub>
 8009baa:	4a99      	ldr	r2, [pc, #612]	@ (8009e10 <_dtoa_r+0x370>)
 8009bac:	4b99      	ldr	r3, [pc, #612]	@ (8009e14 <_dtoa_r+0x374>)
 8009bae:	f7f8 fb9f 	bl	80022f0 <__aeabi_dmul>
 8009bb2:	4a99      	ldr	r2, [pc, #612]	@ (8009e18 <_dtoa_r+0x378>)
 8009bb4:	4b99      	ldr	r3, [pc, #612]	@ (8009e1c <_dtoa_r+0x37c>)
 8009bb6:	f7f7 fbf3 	bl	80013a0 <__aeabi_dadd>
 8009bba:	0004      	movs	r4, r0
 8009bbc:	0038      	movs	r0, r7
 8009bbe:	000d      	movs	r5, r1
 8009bc0:	f7f9 fa58 	bl	8003074 <__aeabi_i2d>
 8009bc4:	4a96      	ldr	r2, [pc, #600]	@ (8009e20 <_dtoa_r+0x380>)
 8009bc6:	4b97      	ldr	r3, [pc, #604]	@ (8009e24 <_dtoa_r+0x384>)
 8009bc8:	f7f8 fb92 	bl	80022f0 <__aeabi_dmul>
 8009bcc:	0002      	movs	r2, r0
 8009bce:	000b      	movs	r3, r1
 8009bd0:	0020      	movs	r0, r4
 8009bd2:	0029      	movs	r1, r5
 8009bd4:	f7f7 fbe4 	bl	80013a0 <__aeabi_dadd>
 8009bd8:	0004      	movs	r4, r0
 8009bda:	000d      	movs	r5, r1
 8009bdc:	f7f9 fa0e 	bl	8002ffc <__aeabi_d2iz>
 8009be0:	2200      	movs	r2, #0
 8009be2:	9004      	str	r0, [sp, #16]
 8009be4:	2300      	movs	r3, #0
 8009be6:	0020      	movs	r0, r4
 8009be8:	0029      	movs	r1, r5
 8009bea:	f7f6 fc33 	bl	8000454 <__aeabi_dcmplt>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d00b      	beq.n	8009c0a <_dtoa_r+0x16a>
 8009bf2:	9804      	ldr	r0, [sp, #16]
 8009bf4:	f7f9 fa3e 	bl	8003074 <__aeabi_i2d>
 8009bf8:	002b      	movs	r3, r5
 8009bfa:	0022      	movs	r2, r4
 8009bfc:	f7f6 fc24 	bl	8000448 <__aeabi_dcmpeq>
 8009c00:	4243      	negs	r3, r0
 8009c02:	4158      	adcs	r0, r3
 8009c04:	9b04      	ldr	r3, [sp, #16]
 8009c06:	1a1b      	subs	r3, r3, r0
 8009c08:	9304      	str	r3, [sp, #16]
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c0e:	9b04      	ldr	r3, [sp, #16]
 8009c10:	2b16      	cmp	r3, #22
 8009c12:	d810      	bhi.n	8009c36 <_dtoa_r+0x196>
 8009c14:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009c16:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009c18:	9a04      	ldr	r2, [sp, #16]
 8009c1a:	4b83      	ldr	r3, [pc, #524]	@ (8009e28 <_dtoa_r+0x388>)
 8009c1c:	00d2      	lsls	r2, r2, #3
 8009c1e:	189b      	adds	r3, r3, r2
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f7f6 fc16 	bl	8000454 <__aeabi_dcmplt>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d047      	beq.n	8009cbc <_dtoa_r+0x21c>
 8009c2c:	9b04      	ldr	r3, [sp, #16]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	2300      	movs	r3, #0
 8009c34:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c36:	2200      	movs	r2, #0
 8009c38:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009c3a:	9206      	str	r2, [sp, #24]
 8009c3c:	1bdb      	subs	r3, r3, r7
 8009c3e:	1e5a      	subs	r2, r3, #1
 8009c40:	d53e      	bpl.n	8009cc0 <_dtoa_r+0x220>
 8009c42:	2201      	movs	r2, #1
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	9306      	str	r3, [sp, #24]
 8009c48:	2300      	movs	r3, #0
 8009c4a:	930d      	str	r3, [sp, #52]	@ 0x34
 8009c4c:	9b04      	ldr	r3, [sp, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	db38      	blt.n	8009cc4 <_dtoa_r+0x224>
 8009c52:	9a04      	ldr	r2, [sp, #16]
 8009c54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c56:	4694      	mov	ip, r2
 8009c58:	4463      	add	r3, ip
 8009c5a:	930d      	str	r3, [sp, #52]	@ 0x34
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9214      	str	r2, [sp, #80]	@ 0x50
 8009c60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c62:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009c64:	2401      	movs	r4, #1
 8009c66:	2b09      	cmp	r3, #9
 8009c68:	d867      	bhi.n	8009d3a <_dtoa_r+0x29a>
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	dd02      	ble.n	8009c74 <_dtoa_r+0x1d4>
 8009c6e:	2400      	movs	r4, #0
 8009c70:	3b04      	subs	r3, #4
 8009c72:	9322      	str	r3, [sp, #136]	@ 0x88
 8009c74:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009c76:	1e98      	subs	r0, r3, #2
 8009c78:	2803      	cmp	r0, #3
 8009c7a:	d867      	bhi.n	8009d4c <_dtoa_r+0x2ac>
 8009c7c:	f7f6 fa4a 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009c80:	5b383a2b 	.word	0x5b383a2b
 8009c84:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009c86:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8009c88:	18f6      	adds	r6, r6, r3
 8009c8a:	4b68      	ldr	r3, [pc, #416]	@ (8009e2c <_dtoa_r+0x38c>)
 8009c8c:	18f2      	adds	r2, r6, r3
 8009c8e:	2a20      	cmp	r2, #32
 8009c90:	dd0f      	ble.n	8009cb2 <_dtoa_r+0x212>
 8009c92:	2340      	movs	r3, #64	@ 0x40
 8009c94:	1a9b      	subs	r3, r3, r2
 8009c96:	409f      	lsls	r7, r3
 8009c98:	4b65      	ldr	r3, [pc, #404]	@ (8009e30 <_dtoa_r+0x390>)
 8009c9a:	0038      	movs	r0, r7
 8009c9c:	18f3      	adds	r3, r6, r3
 8009c9e:	40dc      	lsrs	r4, r3
 8009ca0:	4320      	orrs	r0, r4
 8009ca2:	f7f9 fa15 	bl	80030d0 <__aeabi_ui2d>
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	4b62      	ldr	r3, [pc, #392]	@ (8009e34 <_dtoa_r+0x394>)
 8009caa:	1e77      	subs	r7, r6, #1
 8009cac:	18cb      	adds	r3, r1, r3
 8009cae:	9218      	str	r2, [sp, #96]	@ 0x60
 8009cb0:	e776      	b.n	8009ba0 <_dtoa_r+0x100>
 8009cb2:	2320      	movs	r3, #32
 8009cb4:	0020      	movs	r0, r4
 8009cb6:	1a9b      	subs	r3, r3, r2
 8009cb8:	4098      	lsls	r0, r3
 8009cba:	e7f2      	b.n	8009ca2 <_dtoa_r+0x202>
 8009cbc:	9015      	str	r0, [sp, #84]	@ 0x54
 8009cbe:	e7ba      	b.n	8009c36 <_dtoa_r+0x196>
 8009cc0:	920d      	str	r2, [sp, #52]	@ 0x34
 8009cc2:	e7c3      	b.n	8009c4c <_dtoa_r+0x1ac>
 8009cc4:	9b06      	ldr	r3, [sp, #24]
 8009cc6:	9a04      	ldr	r2, [sp, #16]
 8009cc8:	1a9b      	subs	r3, r3, r2
 8009cca:	9306      	str	r3, [sp, #24]
 8009ccc:	4253      	negs	r3, r2
 8009cce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	9314      	str	r3, [sp, #80]	@ 0x50
 8009cd4:	e7c5      	b.n	8009c62 <_dtoa_r+0x1c2>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009cdc:	930e      	str	r3, [sp, #56]	@ 0x38
 8009cde:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	dc13      	bgt.n	8009d0c <_dtoa_r+0x26c>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	001a      	movs	r2, r3
 8009ce8:	930e      	str	r3, [sp, #56]	@ 0x38
 8009cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cec:	9223      	str	r2, [sp, #140]	@ 0x8c
 8009cee:	e00d      	b.n	8009d0c <_dtoa_r+0x26c>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e7f1      	b.n	8009cd8 <_dtoa_r+0x238>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009cf8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cfa:	4694      	mov	ip, r2
 8009cfc:	9b04      	ldr	r3, [sp, #16]
 8009cfe:	4463      	add	r3, ip
 8009d00:	930e      	str	r3, [sp, #56]	@ 0x38
 8009d02:	3301      	adds	r3, #1
 8009d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	dc00      	bgt.n	8009d0c <_dtoa_r+0x26c>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	9a03      	ldr	r2, [sp, #12]
 8009d0e:	2100      	movs	r1, #0
 8009d10:	69d0      	ldr	r0, [r2, #28]
 8009d12:	2204      	movs	r2, #4
 8009d14:	0015      	movs	r5, r2
 8009d16:	3514      	adds	r5, #20
 8009d18:	429d      	cmp	r5, r3
 8009d1a:	d91b      	bls.n	8009d54 <_dtoa_r+0x2b4>
 8009d1c:	6041      	str	r1, [r0, #4]
 8009d1e:	9803      	ldr	r0, [sp, #12]
 8009d20:	f000 fcfc 	bl	800a71c <_Balloc>
 8009d24:	9008      	str	r0, [sp, #32]
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d117      	bne.n	8009d5a <_dtoa_r+0x2ba>
 8009d2a:	21b0      	movs	r1, #176	@ 0xb0
 8009d2c:	4b42      	ldr	r3, [pc, #264]	@ (8009e38 <_dtoa_r+0x398>)
 8009d2e:	482e      	ldr	r0, [pc, #184]	@ (8009de8 <_dtoa_r+0x348>)
 8009d30:	9a08      	ldr	r2, [sp, #32]
 8009d32:	31ff      	adds	r1, #255	@ 0xff
 8009d34:	e6c9      	b.n	8009aca <_dtoa_r+0x2a>
 8009d36:	2301      	movs	r3, #1
 8009d38:	e7dd      	b.n	8009cf6 <_dtoa_r+0x256>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	9410      	str	r4, [sp, #64]	@ 0x40
 8009d3e:	9322      	str	r3, [sp, #136]	@ 0x88
 8009d40:	3b01      	subs	r3, #1
 8009d42:	930e      	str	r3, [sp, #56]	@ 0x38
 8009d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d46:	2200      	movs	r2, #0
 8009d48:	3313      	adds	r3, #19
 8009d4a:	e7cf      	b.n	8009cec <_dtoa_r+0x24c>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d50:	3b02      	subs	r3, #2
 8009d52:	e7f6      	b.n	8009d42 <_dtoa_r+0x2a2>
 8009d54:	3101      	adds	r1, #1
 8009d56:	0052      	lsls	r2, r2, #1
 8009d58:	e7dc      	b.n	8009d14 <_dtoa_r+0x274>
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	9a08      	ldr	r2, [sp, #32]
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d64:	2b0e      	cmp	r3, #14
 8009d66:	d900      	bls.n	8009d6a <_dtoa_r+0x2ca>
 8009d68:	e0d9      	b.n	8009f1e <_dtoa_r+0x47e>
 8009d6a:	2c00      	cmp	r4, #0
 8009d6c:	d100      	bne.n	8009d70 <_dtoa_r+0x2d0>
 8009d6e:	e0d6      	b.n	8009f1e <_dtoa_r+0x47e>
 8009d70:	9b04      	ldr	r3, [sp, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	dd64      	ble.n	8009e40 <_dtoa_r+0x3a0>
 8009d76:	210f      	movs	r1, #15
 8009d78:	9a04      	ldr	r2, [sp, #16]
 8009d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8009e28 <_dtoa_r+0x388>)
 8009d7c:	400a      	ands	r2, r1
 8009d7e:	00d2      	lsls	r2, r2, #3
 8009d80:	189b      	adds	r3, r3, r2
 8009d82:	681e      	ldr	r6, [r3, #0]
 8009d84:	685f      	ldr	r7, [r3, #4]
 8009d86:	9b04      	ldr	r3, [sp, #16]
 8009d88:	2402      	movs	r4, #2
 8009d8a:	111d      	asrs	r5, r3, #4
 8009d8c:	05db      	lsls	r3, r3, #23
 8009d8e:	d50a      	bpl.n	8009da6 <_dtoa_r+0x306>
 8009d90:	4b2a      	ldr	r3, [pc, #168]	@ (8009e3c <_dtoa_r+0x39c>)
 8009d92:	400d      	ands	r5, r1
 8009d94:	6a1a      	ldr	r2, [r3, #32]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d98:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009d9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009d9c:	f7f7 fe64 	bl	8001a68 <__aeabi_ddiv>
 8009da0:	900a      	str	r0, [sp, #40]	@ 0x28
 8009da2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009da4:	3401      	adds	r4, #1
 8009da6:	4b25      	ldr	r3, [pc, #148]	@ (8009e3c <_dtoa_r+0x39c>)
 8009da8:	930c      	str	r3, [sp, #48]	@ 0x30
 8009daa:	2d00      	cmp	r5, #0
 8009dac:	d108      	bne.n	8009dc0 <_dtoa_r+0x320>
 8009dae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009db0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009db2:	0032      	movs	r2, r6
 8009db4:	003b      	movs	r3, r7
 8009db6:	f7f7 fe57 	bl	8001a68 <__aeabi_ddiv>
 8009dba:	900a      	str	r0, [sp, #40]	@ 0x28
 8009dbc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009dbe:	e05a      	b.n	8009e76 <_dtoa_r+0x3d6>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	421d      	tst	r5, r3
 8009dc4:	d009      	beq.n	8009dda <_dtoa_r+0x33a>
 8009dc6:	18e4      	adds	r4, r4, r3
 8009dc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009dca:	0030      	movs	r0, r6
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	0039      	movs	r1, r7
 8009dd2:	f7f8 fa8d 	bl	80022f0 <__aeabi_dmul>
 8009dd6:	0006      	movs	r6, r0
 8009dd8:	000f      	movs	r7, r1
 8009dda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ddc:	106d      	asrs	r5, r5, #1
 8009dde:	3308      	adds	r3, #8
 8009de0:	e7e2      	b.n	8009da8 <_dtoa_r+0x308>
 8009de2:	46c0      	nop			@ (mov r8, r8)
 8009de4:	0800ecba 	.word	0x0800ecba
 8009de8:	0800ecd1 	.word	0x0800ecd1
 8009dec:	7ff00000 	.word	0x7ff00000
 8009df0:	0000270f 	.word	0x0000270f
 8009df4:	0800ecb6 	.word	0x0800ecb6
 8009df8:	0800ecb9 	.word	0x0800ecb9
 8009dfc:	0800ec85 	.word	0x0800ec85
 8009e00:	0800ec84 	.word	0x0800ec84
 8009e04:	3ff00000 	.word	0x3ff00000
 8009e08:	fffffc01 	.word	0xfffffc01
 8009e0c:	3ff80000 	.word	0x3ff80000
 8009e10:	636f4361 	.word	0x636f4361
 8009e14:	3fd287a7 	.word	0x3fd287a7
 8009e18:	8b60c8b3 	.word	0x8b60c8b3
 8009e1c:	3fc68a28 	.word	0x3fc68a28
 8009e20:	509f79fb 	.word	0x509f79fb
 8009e24:	3fd34413 	.word	0x3fd34413
 8009e28:	0800edc8 	.word	0x0800edc8
 8009e2c:	00000432 	.word	0x00000432
 8009e30:	00000412 	.word	0x00000412
 8009e34:	fe100000 	.word	0xfe100000
 8009e38:	0800ed29 	.word	0x0800ed29
 8009e3c:	0800eda0 	.word	0x0800eda0
 8009e40:	9b04      	ldr	r3, [sp, #16]
 8009e42:	2402      	movs	r4, #2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d016      	beq.n	8009e76 <_dtoa_r+0x3d6>
 8009e48:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009e4a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009e4c:	220f      	movs	r2, #15
 8009e4e:	425d      	negs	r5, r3
 8009e50:	402a      	ands	r2, r5
 8009e52:	4bd7      	ldr	r3, [pc, #860]	@ (800a1b0 <_dtoa_r+0x710>)
 8009e54:	00d2      	lsls	r2, r2, #3
 8009e56:	189b      	adds	r3, r3, r2
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f7f8 fa48 	bl	80022f0 <__aeabi_dmul>
 8009e60:	2701      	movs	r7, #1
 8009e62:	2300      	movs	r3, #0
 8009e64:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e66:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e68:	4ed2      	ldr	r6, [pc, #840]	@ (800a1b4 <_dtoa_r+0x714>)
 8009e6a:	112d      	asrs	r5, r5, #4
 8009e6c:	2d00      	cmp	r5, #0
 8009e6e:	d000      	beq.n	8009e72 <_dtoa_r+0x3d2>
 8009e70:	e0ba      	b.n	8009fe8 <_dtoa_r+0x548>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1a1      	bne.n	8009dba <_dtoa_r+0x31a>
 8009e76:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009e78:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009e7a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d100      	bne.n	8009e82 <_dtoa_r+0x3e2>
 8009e80:	e0bd      	b.n	8009ffe <_dtoa_r+0x55e>
 8009e82:	2200      	movs	r2, #0
 8009e84:	0030      	movs	r0, r6
 8009e86:	0039      	movs	r1, r7
 8009e88:	4bcb      	ldr	r3, [pc, #812]	@ (800a1b8 <_dtoa_r+0x718>)
 8009e8a:	f7f6 fae3 	bl	8000454 <__aeabi_dcmplt>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d100      	bne.n	8009e94 <_dtoa_r+0x3f4>
 8009e92:	e0b4      	b.n	8009ffe <_dtoa_r+0x55e>
 8009e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d100      	bne.n	8009e9c <_dtoa_r+0x3fc>
 8009e9a:	e0b0      	b.n	8009ffe <_dtoa_r+0x55e>
 8009e9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	dd39      	ble.n	8009f16 <_dtoa_r+0x476>
 8009ea2:	9b04      	ldr	r3, [sp, #16]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	930c      	str	r3, [sp, #48]	@ 0x30
 8009eaa:	0030      	movs	r0, r6
 8009eac:	4bc3      	ldr	r3, [pc, #780]	@ (800a1bc <_dtoa_r+0x71c>)
 8009eae:	0039      	movs	r1, r7
 8009eb0:	f7f8 fa1e 	bl	80022f0 <__aeabi_dmul>
 8009eb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009eb6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009eb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eba:	3401      	adds	r4, #1
 8009ebc:	0020      	movs	r0, r4
 8009ebe:	9311      	str	r3, [sp, #68]	@ 0x44
 8009ec0:	f7f9 f8d8 	bl	8003074 <__aeabi_i2d>
 8009ec4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ec8:	f7f8 fa12 	bl	80022f0 <__aeabi_dmul>
 8009ecc:	4bbc      	ldr	r3, [pc, #752]	@ (800a1c0 <_dtoa_r+0x720>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f7f7 fa66 	bl	80013a0 <__aeabi_dadd>
 8009ed4:	4bbb      	ldr	r3, [pc, #748]	@ (800a1c4 <_dtoa_r+0x724>)
 8009ed6:	0006      	movs	r6, r0
 8009ed8:	18cf      	adds	r7, r1, r3
 8009eda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d000      	beq.n	8009ee2 <_dtoa_r+0x442>
 8009ee0:	e091      	b.n	800a006 <_dtoa_r+0x566>
 8009ee2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009ee4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	4bb7      	ldr	r3, [pc, #732]	@ (800a1c8 <_dtoa_r+0x728>)
 8009eea:	f7f8 fcc9 	bl	8002880 <__aeabi_dsub>
 8009eee:	0032      	movs	r2, r6
 8009ef0:	003b      	movs	r3, r7
 8009ef2:	0004      	movs	r4, r0
 8009ef4:	000d      	movs	r5, r1
 8009ef6:	f7f6 fac1 	bl	800047c <__aeabi_dcmpgt>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d000      	beq.n	8009f00 <_dtoa_r+0x460>
 8009efe:	e29d      	b.n	800a43c <_dtoa_r+0x99c>
 8009f00:	2180      	movs	r1, #128	@ 0x80
 8009f02:	0609      	lsls	r1, r1, #24
 8009f04:	187b      	adds	r3, r7, r1
 8009f06:	0032      	movs	r2, r6
 8009f08:	0020      	movs	r0, r4
 8009f0a:	0029      	movs	r1, r5
 8009f0c:	f7f6 faa2 	bl	8000454 <__aeabi_dcmplt>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d000      	beq.n	8009f16 <_dtoa_r+0x476>
 8009f14:	e130      	b.n	800a178 <_dtoa_r+0x6d8>
 8009f16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f18:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f1c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f1e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	da00      	bge.n	8009f26 <_dtoa_r+0x486>
 8009f24:	e177      	b.n	800a216 <_dtoa_r+0x776>
 8009f26:	9a04      	ldr	r2, [sp, #16]
 8009f28:	2a0e      	cmp	r2, #14
 8009f2a:	dd00      	ble.n	8009f2e <_dtoa_r+0x48e>
 8009f2c:	e173      	b.n	800a216 <_dtoa_r+0x776>
 8009f2e:	4ba0      	ldr	r3, [pc, #640]	@ (800a1b0 <_dtoa_r+0x710>)
 8009f30:	00d2      	lsls	r2, r2, #3
 8009f32:	189b      	adds	r3, r3, r2
 8009f34:	685c      	ldr	r4, [r3, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	9306      	str	r3, [sp, #24]
 8009f3a:	9407      	str	r4, [sp, #28]
 8009f3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	da03      	bge.n	8009f4a <_dtoa_r+0x4aa>
 8009f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	dc00      	bgt.n	8009f4a <_dtoa_r+0x4aa>
 8009f48:	e106      	b.n	800a158 <_dtoa_r+0x6b8>
 8009f4a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009f4c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f50:	9d08      	ldr	r5, [sp, #32]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	195b      	adds	r3, r3, r5
 8009f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f58:	9a06      	ldr	r2, [sp, #24]
 8009f5a:	9b07      	ldr	r3, [sp, #28]
 8009f5c:	0030      	movs	r0, r6
 8009f5e:	0039      	movs	r1, r7
 8009f60:	f7f7 fd82 	bl	8001a68 <__aeabi_ddiv>
 8009f64:	f7f9 f84a 	bl	8002ffc <__aeabi_d2iz>
 8009f68:	9009      	str	r0, [sp, #36]	@ 0x24
 8009f6a:	f7f9 f883 	bl	8003074 <__aeabi_i2d>
 8009f6e:	9a06      	ldr	r2, [sp, #24]
 8009f70:	9b07      	ldr	r3, [sp, #28]
 8009f72:	f7f8 f9bd 	bl	80022f0 <__aeabi_dmul>
 8009f76:	0002      	movs	r2, r0
 8009f78:	000b      	movs	r3, r1
 8009f7a:	0030      	movs	r0, r6
 8009f7c:	0039      	movs	r1, r7
 8009f7e:	f7f8 fc7f 	bl	8002880 <__aeabi_dsub>
 8009f82:	002b      	movs	r3, r5
 8009f84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f86:	3501      	adds	r5, #1
 8009f88:	3230      	adds	r2, #48	@ 0x30
 8009f8a:	701a      	strb	r2, [r3, #0]
 8009f8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f8e:	002c      	movs	r4, r5
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d000      	beq.n	8009f96 <_dtoa_r+0x4f6>
 8009f94:	e131      	b.n	800a1fa <_dtoa_r+0x75a>
 8009f96:	0002      	movs	r2, r0
 8009f98:	000b      	movs	r3, r1
 8009f9a:	f7f7 fa01 	bl	80013a0 <__aeabi_dadd>
 8009f9e:	9a06      	ldr	r2, [sp, #24]
 8009fa0:	9b07      	ldr	r3, [sp, #28]
 8009fa2:	0006      	movs	r6, r0
 8009fa4:	000f      	movs	r7, r1
 8009fa6:	f7f6 fa69 	bl	800047c <__aeabi_dcmpgt>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d000      	beq.n	8009fb0 <_dtoa_r+0x510>
 8009fae:	e10f      	b.n	800a1d0 <_dtoa_r+0x730>
 8009fb0:	9a06      	ldr	r2, [sp, #24]
 8009fb2:	9b07      	ldr	r3, [sp, #28]
 8009fb4:	0030      	movs	r0, r6
 8009fb6:	0039      	movs	r1, r7
 8009fb8:	f7f6 fa46 	bl	8000448 <__aeabi_dcmpeq>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d003      	beq.n	8009fc8 <_dtoa_r+0x528>
 8009fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fc2:	07dd      	lsls	r5, r3, #31
 8009fc4:	d500      	bpl.n	8009fc8 <_dtoa_r+0x528>
 8009fc6:	e103      	b.n	800a1d0 <_dtoa_r+0x730>
 8009fc8:	9905      	ldr	r1, [sp, #20]
 8009fca:	9803      	ldr	r0, [sp, #12]
 8009fcc:	f000 fbea 	bl	800a7a4 <_Bfree>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	7023      	strb	r3, [r4, #0]
 8009fd4:	9b04      	ldr	r3, [sp, #16]
 8009fd6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009fd8:	3301      	adds	r3, #1
 8009fda:	6013      	str	r3, [r2, #0]
 8009fdc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d100      	bne.n	8009fe4 <_dtoa_r+0x544>
 8009fe2:	e5a7      	b.n	8009b34 <_dtoa_r+0x94>
 8009fe4:	601c      	str	r4, [r3, #0]
 8009fe6:	e5a5      	b.n	8009b34 <_dtoa_r+0x94>
 8009fe8:	423d      	tst	r5, r7
 8009fea:	d005      	beq.n	8009ff8 <_dtoa_r+0x558>
 8009fec:	6832      	ldr	r2, [r6, #0]
 8009fee:	6873      	ldr	r3, [r6, #4]
 8009ff0:	f7f8 f97e 	bl	80022f0 <__aeabi_dmul>
 8009ff4:	003b      	movs	r3, r7
 8009ff6:	3401      	adds	r4, #1
 8009ff8:	106d      	asrs	r5, r5, #1
 8009ffa:	3608      	adds	r6, #8
 8009ffc:	e736      	b.n	8009e6c <_dtoa_r+0x3cc>
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	930c      	str	r3, [sp, #48]	@ 0x30
 800a002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a004:	e75a      	b.n	8009ebc <_dtoa_r+0x41c>
 800a006:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a008:	4b69      	ldr	r3, [pc, #420]	@ (800a1b0 <_dtoa_r+0x710>)
 800a00a:	3a01      	subs	r2, #1
 800a00c:	00d2      	lsls	r2, r2, #3
 800a00e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a010:	189b      	adds	r3, r3, r2
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	2900      	cmp	r1, #0
 800a018:	d04c      	beq.n	800a0b4 <_dtoa_r+0x614>
 800a01a:	2000      	movs	r0, #0
 800a01c:	496b      	ldr	r1, [pc, #428]	@ (800a1cc <_dtoa_r+0x72c>)
 800a01e:	f7f7 fd23 	bl	8001a68 <__aeabi_ddiv>
 800a022:	0032      	movs	r2, r6
 800a024:	003b      	movs	r3, r7
 800a026:	f7f8 fc2b 	bl	8002880 <__aeabi_dsub>
 800a02a:	9a08      	ldr	r2, [sp, #32]
 800a02c:	0006      	movs	r6, r0
 800a02e:	4694      	mov	ip, r2
 800a030:	000f      	movs	r7, r1
 800a032:	9b08      	ldr	r3, [sp, #32]
 800a034:	9316      	str	r3, [sp, #88]	@ 0x58
 800a036:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a038:	4463      	add	r3, ip
 800a03a:	9311      	str	r3, [sp, #68]	@ 0x44
 800a03c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a03e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a040:	f7f8 ffdc 	bl	8002ffc <__aeabi_d2iz>
 800a044:	0005      	movs	r5, r0
 800a046:	f7f9 f815 	bl	8003074 <__aeabi_i2d>
 800a04a:	0002      	movs	r2, r0
 800a04c:	000b      	movs	r3, r1
 800a04e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a052:	f7f8 fc15 	bl	8002880 <__aeabi_dsub>
 800a056:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a058:	3530      	adds	r5, #48	@ 0x30
 800a05a:	1c5c      	adds	r4, r3, #1
 800a05c:	701d      	strb	r5, [r3, #0]
 800a05e:	0032      	movs	r2, r6
 800a060:	003b      	movs	r3, r7
 800a062:	900a      	str	r0, [sp, #40]	@ 0x28
 800a064:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a066:	f7f6 f9f5 	bl	8000454 <__aeabi_dcmplt>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d16a      	bne.n	800a144 <_dtoa_r+0x6a4>
 800a06e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a070:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a072:	2000      	movs	r0, #0
 800a074:	4950      	ldr	r1, [pc, #320]	@ (800a1b8 <_dtoa_r+0x718>)
 800a076:	f7f8 fc03 	bl	8002880 <__aeabi_dsub>
 800a07a:	0032      	movs	r2, r6
 800a07c:	003b      	movs	r3, r7
 800a07e:	f7f6 f9e9 	bl	8000454 <__aeabi_dcmplt>
 800a082:	2800      	cmp	r0, #0
 800a084:	d000      	beq.n	800a088 <_dtoa_r+0x5e8>
 800a086:	e0a5      	b.n	800a1d4 <_dtoa_r+0x734>
 800a088:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a08a:	42a3      	cmp	r3, r4
 800a08c:	d100      	bne.n	800a090 <_dtoa_r+0x5f0>
 800a08e:	e742      	b.n	8009f16 <_dtoa_r+0x476>
 800a090:	2200      	movs	r2, #0
 800a092:	0030      	movs	r0, r6
 800a094:	0039      	movs	r1, r7
 800a096:	4b49      	ldr	r3, [pc, #292]	@ (800a1bc <_dtoa_r+0x71c>)
 800a098:	f7f8 f92a 	bl	80022f0 <__aeabi_dmul>
 800a09c:	2200      	movs	r2, #0
 800a09e:	0006      	movs	r6, r0
 800a0a0:	000f      	movs	r7, r1
 800a0a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a0a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0a6:	4b45      	ldr	r3, [pc, #276]	@ (800a1bc <_dtoa_r+0x71c>)
 800a0a8:	f7f8 f922 	bl	80022f0 <__aeabi_dmul>
 800a0ac:	9416      	str	r4, [sp, #88]	@ 0x58
 800a0ae:	900a      	str	r0, [sp, #40]	@ 0x28
 800a0b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a0b2:	e7c3      	b.n	800a03c <_dtoa_r+0x59c>
 800a0b4:	0030      	movs	r0, r6
 800a0b6:	0039      	movs	r1, r7
 800a0b8:	f7f8 f91a 	bl	80022f0 <__aeabi_dmul>
 800a0bc:	9d08      	ldr	r5, [sp, #32]
 800a0be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a0c0:	002b      	movs	r3, r5
 800a0c2:	4694      	mov	ip, r2
 800a0c4:	9016      	str	r0, [sp, #88]	@ 0x58
 800a0c6:	9117      	str	r1, [sp, #92]	@ 0x5c
 800a0c8:	4463      	add	r3, ip
 800a0ca:	9319      	str	r3, [sp, #100]	@ 0x64
 800a0cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a0ce:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0d0:	f7f8 ff94 	bl	8002ffc <__aeabi_d2iz>
 800a0d4:	0004      	movs	r4, r0
 800a0d6:	f7f8 ffcd 	bl	8003074 <__aeabi_i2d>
 800a0da:	000b      	movs	r3, r1
 800a0dc:	0002      	movs	r2, r0
 800a0de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a0e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0e2:	f7f8 fbcd 	bl	8002880 <__aeabi_dsub>
 800a0e6:	3430      	adds	r4, #48	@ 0x30
 800a0e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0ea:	702c      	strb	r4, [r5, #0]
 800a0ec:	3501      	adds	r5, #1
 800a0ee:	0006      	movs	r6, r0
 800a0f0:	000f      	movs	r7, r1
 800a0f2:	42ab      	cmp	r3, r5
 800a0f4:	d129      	bne.n	800a14a <_dtoa_r+0x6aa>
 800a0f6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a0f8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800a0fa:	9b08      	ldr	r3, [sp, #32]
 800a0fc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a0fe:	469c      	mov	ip, r3
 800a100:	2200      	movs	r2, #0
 800a102:	4b32      	ldr	r3, [pc, #200]	@ (800a1cc <_dtoa_r+0x72c>)
 800a104:	4464      	add	r4, ip
 800a106:	f7f7 f94b 	bl	80013a0 <__aeabi_dadd>
 800a10a:	0002      	movs	r2, r0
 800a10c:	000b      	movs	r3, r1
 800a10e:	0030      	movs	r0, r6
 800a110:	0039      	movs	r1, r7
 800a112:	f7f6 f9b3 	bl	800047c <__aeabi_dcmpgt>
 800a116:	2800      	cmp	r0, #0
 800a118:	d15c      	bne.n	800a1d4 <_dtoa_r+0x734>
 800a11a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a11c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a11e:	2000      	movs	r0, #0
 800a120:	492a      	ldr	r1, [pc, #168]	@ (800a1cc <_dtoa_r+0x72c>)
 800a122:	f7f8 fbad 	bl	8002880 <__aeabi_dsub>
 800a126:	0002      	movs	r2, r0
 800a128:	000b      	movs	r3, r1
 800a12a:	0030      	movs	r0, r6
 800a12c:	0039      	movs	r1, r7
 800a12e:	f7f6 f991 	bl	8000454 <__aeabi_dcmplt>
 800a132:	2800      	cmp	r0, #0
 800a134:	d100      	bne.n	800a138 <_dtoa_r+0x698>
 800a136:	e6ee      	b.n	8009f16 <_dtoa_r+0x476>
 800a138:	0023      	movs	r3, r4
 800a13a:	3c01      	subs	r4, #1
 800a13c:	7822      	ldrb	r2, [r4, #0]
 800a13e:	2a30      	cmp	r2, #48	@ 0x30
 800a140:	d0fa      	beq.n	800a138 <_dtoa_r+0x698>
 800a142:	001c      	movs	r4, r3
 800a144:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a146:	9304      	str	r3, [sp, #16]
 800a148:	e73e      	b.n	8009fc8 <_dtoa_r+0x528>
 800a14a:	2200      	movs	r2, #0
 800a14c:	4b1b      	ldr	r3, [pc, #108]	@ (800a1bc <_dtoa_r+0x71c>)
 800a14e:	f7f8 f8cf 	bl	80022f0 <__aeabi_dmul>
 800a152:	900a      	str	r0, [sp, #40]	@ 0x28
 800a154:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a156:	e7b9      	b.n	800a0cc <_dtoa_r+0x62c>
 800a158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10c      	bne.n	800a178 <_dtoa_r+0x6d8>
 800a15e:	9806      	ldr	r0, [sp, #24]
 800a160:	9907      	ldr	r1, [sp, #28]
 800a162:	2200      	movs	r2, #0
 800a164:	4b18      	ldr	r3, [pc, #96]	@ (800a1c8 <_dtoa_r+0x728>)
 800a166:	f7f8 f8c3 	bl	80022f0 <__aeabi_dmul>
 800a16a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a16c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a16e:	f7f6 f98f 	bl	8000490 <__aeabi_dcmpge>
 800a172:	2800      	cmp	r0, #0
 800a174:	d100      	bne.n	800a178 <_dtoa_r+0x6d8>
 800a176:	e164      	b.n	800a442 <_dtoa_r+0x9a2>
 800a178:	2600      	movs	r6, #0
 800a17a:	0037      	movs	r7, r6
 800a17c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a17e:	9c08      	ldr	r4, [sp, #32]
 800a180:	43db      	mvns	r3, r3
 800a182:	930c      	str	r3, [sp, #48]	@ 0x30
 800a184:	2300      	movs	r3, #0
 800a186:	9304      	str	r3, [sp, #16]
 800a188:	0031      	movs	r1, r6
 800a18a:	9803      	ldr	r0, [sp, #12]
 800a18c:	f000 fb0a 	bl	800a7a4 <_Bfree>
 800a190:	2f00      	cmp	r7, #0
 800a192:	d0d7      	beq.n	800a144 <_dtoa_r+0x6a4>
 800a194:	9b04      	ldr	r3, [sp, #16]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d005      	beq.n	800a1a6 <_dtoa_r+0x706>
 800a19a:	42bb      	cmp	r3, r7
 800a19c:	d003      	beq.n	800a1a6 <_dtoa_r+0x706>
 800a19e:	0019      	movs	r1, r3
 800a1a0:	9803      	ldr	r0, [sp, #12]
 800a1a2:	f000 faff 	bl	800a7a4 <_Bfree>
 800a1a6:	0039      	movs	r1, r7
 800a1a8:	9803      	ldr	r0, [sp, #12]
 800a1aa:	f000 fafb 	bl	800a7a4 <_Bfree>
 800a1ae:	e7c9      	b.n	800a144 <_dtoa_r+0x6a4>
 800a1b0:	0800edc8 	.word	0x0800edc8
 800a1b4:	0800eda0 	.word	0x0800eda0
 800a1b8:	3ff00000 	.word	0x3ff00000
 800a1bc:	40240000 	.word	0x40240000
 800a1c0:	401c0000 	.word	0x401c0000
 800a1c4:	fcc00000 	.word	0xfcc00000
 800a1c8:	40140000 	.word	0x40140000
 800a1cc:	3fe00000 	.word	0x3fe00000
 800a1d0:	9b04      	ldr	r3, [sp, #16]
 800a1d2:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1d4:	0023      	movs	r3, r4
 800a1d6:	001c      	movs	r4, r3
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	2a39      	cmp	r2, #57	@ 0x39
 800a1de:	d108      	bne.n	800a1f2 <_dtoa_r+0x752>
 800a1e0:	9a08      	ldr	r2, [sp, #32]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d1f7      	bne.n	800a1d6 <_dtoa_r+0x736>
 800a1e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a1e8:	9908      	ldr	r1, [sp, #32]
 800a1ea:	3201      	adds	r2, #1
 800a1ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800a1ee:	2230      	movs	r2, #48	@ 0x30
 800a1f0:	700a      	strb	r2, [r1, #0]
 800a1f2:	781a      	ldrb	r2, [r3, #0]
 800a1f4:	3201      	adds	r2, #1
 800a1f6:	701a      	strb	r2, [r3, #0]
 800a1f8:	e7a4      	b.n	800a144 <_dtoa_r+0x6a4>
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	4bc6      	ldr	r3, [pc, #792]	@ (800a518 <_dtoa_r+0xa78>)
 800a1fe:	f7f8 f877 	bl	80022f0 <__aeabi_dmul>
 800a202:	2200      	movs	r2, #0
 800a204:	2300      	movs	r3, #0
 800a206:	0006      	movs	r6, r0
 800a208:	000f      	movs	r7, r1
 800a20a:	f7f6 f91d 	bl	8000448 <__aeabi_dcmpeq>
 800a20e:	2800      	cmp	r0, #0
 800a210:	d100      	bne.n	800a214 <_dtoa_r+0x774>
 800a212:	e6a1      	b.n	8009f58 <_dtoa_r+0x4b8>
 800a214:	e6d8      	b.n	8009fc8 <_dtoa_r+0x528>
 800a216:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a218:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a21a:	9c06      	ldr	r4, [sp, #24]
 800a21c:	2f00      	cmp	r7, #0
 800a21e:	d014      	beq.n	800a24a <_dtoa_r+0x7aa>
 800a220:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a222:	2a01      	cmp	r2, #1
 800a224:	dd00      	ble.n	800a228 <_dtoa_r+0x788>
 800a226:	e0c8      	b.n	800a3ba <_dtoa_r+0x91a>
 800a228:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a22a:	2a00      	cmp	r2, #0
 800a22c:	d100      	bne.n	800a230 <_dtoa_r+0x790>
 800a22e:	e0be      	b.n	800a3ae <_dtoa_r+0x90e>
 800a230:	4aba      	ldr	r2, [pc, #744]	@ (800a51c <_dtoa_r+0xa7c>)
 800a232:	189b      	adds	r3, r3, r2
 800a234:	9a06      	ldr	r2, [sp, #24]
 800a236:	2101      	movs	r1, #1
 800a238:	18d2      	adds	r2, r2, r3
 800a23a:	9206      	str	r2, [sp, #24]
 800a23c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a23e:	9803      	ldr	r0, [sp, #12]
 800a240:	18d3      	adds	r3, r2, r3
 800a242:	930d      	str	r3, [sp, #52]	@ 0x34
 800a244:	f000 fbb2 	bl	800a9ac <__i2b>
 800a248:	0007      	movs	r7, r0
 800a24a:	2c00      	cmp	r4, #0
 800a24c:	d00e      	beq.n	800a26c <_dtoa_r+0x7cc>
 800a24e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a250:	2b00      	cmp	r3, #0
 800a252:	dd0b      	ble.n	800a26c <_dtoa_r+0x7cc>
 800a254:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a256:	0023      	movs	r3, r4
 800a258:	4294      	cmp	r4, r2
 800a25a:	dd00      	ble.n	800a25e <_dtoa_r+0x7be>
 800a25c:	0013      	movs	r3, r2
 800a25e:	9a06      	ldr	r2, [sp, #24]
 800a260:	1ae4      	subs	r4, r4, r3
 800a262:	1ad2      	subs	r2, r2, r3
 800a264:	9206      	str	r2, [sp, #24]
 800a266:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	930d      	str	r3, [sp, #52]	@ 0x34
 800a26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d01f      	beq.n	800a2b2 <_dtoa_r+0x812>
 800a272:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	d100      	bne.n	800a27a <_dtoa_r+0x7da>
 800a278:	e0b5      	b.n	800a3e6 <_dtoa_r+0x946>
 800a27a:	2d00      	cmp	r5, #0
 800a27c:	d010      	beq.n	800a2a0 <_dtoa_r+0x800>
 800a27e:	0039      	movs	r1, r7
 800a280:	002a      	movs	r2, r5
 800a282:	9803      	ldr	r0, [sp, #12]
 800a284:	f000 fc5c 	bl	800ab40 <__pow5mult>
 800a288:	9a05      	ldr	r2, [sp, #20]
 800a28a:	0001      	movs	r1, r0
 800a28c:	0007      	movs	r7, r0
 800a28e:	9803      	ldr	r0, [sp, #12]
 800a290:	f000 fba4 	bl	800a9dc <__multiply>
 800a294:	0006      	movs	r6, r0
 800a296:	9905      	ldr	r1, [sp, #20]
 800a298:	9803      	ldr	r0, [sp, #12]
 800a29a:	f000 fa83 	bl	800a7a4 <_Bfree>
 800a29e:	9605      	str	r6, [sp, #20]
 800a2a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2a2:	1b5a      	subs	r2, r3, r5
 800a2a4:	42ab      	cmp	r3, r5
 800a2a6:	d004      	beq.n	800a2b2 <_dtoa_r+0x812>
 800a2a8:	9905      	ldr	r1, [sp, #20]
 800a2aa:	9803      	ldr	r0, [sp, #12]
 800a2ac:	f000 fc48 	bl	800ab40 <__pow5mult>
 800a2b0:	9005      	str	r0, [sp, #20]
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	9803      	ldr	r0, [sp, #12]
 800a2b6:	f000 fb79 	bl	800a9ac <__i2b>
 800a2ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a2bc:	0006      	movs	r6, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d100      	bne.n	800a2c4 <_dtoa_r+0x824>
 800a2c2:	e1bc      	b.n	800a63e <_dtoa_r+0xb9e>
 800a2c4:	001a      	movs	r2, r3
 800a2c6:	0001      	movs	r1, r0
 800a2c8:	9803      	ldr	r0, [sp, #12]
 800a2ca:	f000 fc39 	bl	800ab40 <__pow5mult>
 800a2ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a2d0:	0006      	movs	r6, r0
 800a2d2:	2500      	movs	r5, #0
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	dc16      	bgt.n	800a306 <_dtoa_r+0x866>
 800a2d8:	2500      	movs	r5, #0
 800a2da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2dc:	42ab      	cmp	r3, r5
 800a2de:	d10e      	bne.n	800a2fe <_dtoa_r+0x85e>
 800a2e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2e2:	031b      	lsls	r3, r3, #12
 800a2e4:	42ab      	cmp	r3, r5
 800a2e6:	d10a      	bne.n	800a2fe <_dtoa_r+0x85e>
 800a2e8:	4b8d      	ldr	r3, [pc, #564]	@ (800a520 <_dtoa_r+0xa80>)
 800a2ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a2ec:	4213      	tst	r3, r2
 800a2ee:	d006      	beq.n	800a2fe <_dtoa_r+0x85e>
 800a2f0:	9b06      	ldr	r3, [sp, #24]
 800a2f2:	3501      	adds	r5, #1
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	9306      	str	r3, [sp, #24]
 800a2f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	930d      	str	r3, [sp, #52]	@ 0x34
 800a2fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a300:	2001      	movs	r0, #1
 800a302:	2b00      	cmp	r3, #0
 800a304:	d008      	beq.n	800a318 <_dtoa_r+0x878>
 800a306:	6933      	ldr	r3, [r6, #16]
 800a308:	3303      	adds	r3, #3
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	18f3      	adds	r3, r6, r3
 800a30e:	6858      	ldr	r0, [r3, #4]
 800a310:	f000 fafc 	bl	800a90c <__hi0bits>
 800a314:	2320      	movs	r3, #32
 800a316:	1a18      	subs	r0, r3, r0
 800a318:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a31a:	1818      	adds	r0, r3, r0
 800a31c:	0002      	movs	r2, r0
 800a31e:	231f      	movs	r3, #31
 800a320:	401a      	ands	r2, r3
 800a322:	4218      	tst	r0, r3
 800a324:	d065      	beq.n	800a3f2 <_dtoa_r+0x952>
 800a326:	3301      	adds	r3, #1
 800a328:	1a9b      	subs	r3, r3, r2
 800a32a:	2b04      	cmp	r3, #4
 800a32c:	dd5d      	ble.n	800a3ea <_dtoa_r+0x94a>
 800a32e:	231c      	movs	r3, #28
 800a330:	1a9b      	subs	r3, r3, r2
 800a332:	9a06      	ldr	r2, [sp, #24]
 800a334:	18e4      	adds	r4, r4, r3
 800a336:	18d2      	adds	r2, r2, r3
 800a338:	9206      	str	r2, [sp, #24]
 800a33a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a33c:	18d3      	adds	r3, r2, r3
 800a33e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a340:	9b06      	ldr	r3, [sp, #24]
 800a342:	2b00      	cmp	r3, #0
 800a344:	dd05      	ble.n	800a352 <_dtoa_r+0x8b2>
 800a346:	001a      	movs	r2, r3
 800a348:	9905      	ldr	r1, [sp, #20]
 800a34a:	9803      	ldr	r0, [sp, #12]
 800a34c:	f000 fc54 	bl	800abf8 <__lshift>
 800a350:	9005      	str	r0, [sp, #20]
 800a352:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a354:	2b00      	cmp	r3, #0
 800a356:	dd05      	ble.n	800a364 <_dtoa_r+0x8c4>
 800a358:	0031      	movs	r1, r6
 800a35a:	001a      	movs	r2, r3
 800a35c:	9803      	ldr	r0, [sp, #12]
 800a35e:	f000 fc4b 	bl	800abf8 <__lshift>
 800a362:	0006      	movs	r6, r0
 800a364:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a366:	2b00      	cmp	r3, #0
 800a368:	d045      	beq.n	800a3f6 <_dtoa_r+0x956>
 800a36a:	0031      	movs	r1, r6
 800a36c:	9805      	ldr	r0, [sp, #20]
 800a36e:	f000 fcaf 	bl	800acd0 <__mcmp>
 800a372:	2800      	cmp	r0, #0
 800a374:	da3f      	bge.n	800a3f6 <_dtoa_r+0x956>
 800a376:	9b04      	ldr	r3, [sp, #16]
 800a378:	220a      	movs	r2, #10
 800a37a:	3b01      	subs	r3, #1
 800a37c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a37e:	9905      	ldr	r1, [sp, #20]
 800a380:	2300      	movs	r3, #0
 800a382:	9803      	ldr	r0, [sp, #12]
 800a384:	f000 fa32 	bl	800a7ec <__multadd>
 800a388:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a38a:	9005      	str	r0, [sp, #20]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d100      	bne.n	800a392 <_dtoa_r+0x8f2>
 800a390:	e15c      	b.n	800a64c <_dtoa_r+0xbac>
 800a392:	2300      	movs	r3, #0
 800a394:	0039      	movs	r1, r7
 800a396:	220a      	movs	r2, #10
 800a398:	9803      	ldr	r0, [sp, #12]
 800a39a:	f000 fa27 	bl	800a7ec <__multadd>
 800a39e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3a0:	0007      	movs	r7, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	dc55      	bgt.n	800a452 <_dtoa_r+0x9b2>
 800a3a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	dc2d      	bgt.n	800a408 <_dtoa_r+0x968>
 800a3ac:	e051      	b.n	800a452 <_dtoa_r+0x9b2>
 800a3ae:	2336      	movs	r3, #54	@ 0x36
 800a3b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a3b2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a3b4:	9c06      	ldr	r4, [sp, #24]
 800a3b6:	1a9b      	subs	r3, r3, r2
 800a3b8:	e73c      	b.n	800a234 <_dtoa_r+0x794>
 800a3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3bc:	1e5d      	subs	r5, r3, #1
 800a3be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3c0:	42ab      	cmp	r3, r5
 800a3c2:	db08      	blt.n	800a3d6 <_dtoa_r+0x936>
 800a3c4:	1b5d      	subs	r5, r3, r5
 800a3c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c8:	9c06      	ldr	r4, [sp, #24]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	db00      	blt.n	800a3d0 <_dtoa_r+0x930>
 800a3ce:	e731      	b.n	800a234 <_dtoa_r+0x794>
 800a3d0:	1ae4      	subs	r4, r4, r3
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	e72e      	b.n	800a234 <_dtoa_r+0x794>
 800a3d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a3da:	1aeb      	subs	r3, r5, r3
 800a3dc:	18d3      	adds	r3, r2, r3
 800a3de:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a3e0:	9314      	str	r3, [sp, #80]	@ 0x50
 800a3e2:	2500      	movs	r5, #0
 800a3e4:	e7ef      	b.n	800a3c6 <_dtoa_r+0x926>
 800a3e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a3e8:	e75e      	b.n	800a2a8 <_dtoa_r+0x808>
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	d0a8      	beq.n	800a340 <_dtoa_r+0x8a0>
 800a3ee:	331c      	adds	r3, #28
 800a3f0:	e79f      	b.n	800a332 <_dtoa_r+0x892>
 800a3f2:	0013      	movs	r3, r2
 800a3f4:	e7fb      	b.n	800a3ee <_dtoa_r+0x94e>
 800a3f6:	9b04      	ldr	r3, [sp, #16]
 800a3f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	dc23      	bgt.n	800a44a <_dtoa_r+0x9aa>
 800a402:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a404:	2b02      	cmp	r3, #2
 800a406:	dd20      	ble.n	800a44a <_dtoa_r+0x9aa>
 800a408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d000      	beq.n	800a410 <_dtoa_r+0x970>
 800a40e:	e6b5      	b.n	800a17c <_dtoa_r+0x6dc>
 800a410:	0031      	movs	r1, r6
 800a412:	2205      	movs	r2, #5
 800a414:	9803      	ldr	r0, [sp, #12]
 800a416:	f000 f9e9 	bl	800a7ec <__multadd>
 800a41a:	0006      	movs	r6, r0
 800a41c:	0001      	movs	r1, r0
 800a41e:	9805      	ldr	r0, [sp, #20]
 800a420:	f000 fc56 	bl	800acd0 <__mcmp>
 800a424:	2800      	cmp	r0, #0
 800a426:	dc00      	bgt.n	800a42a <_dtoa_r+0x98a>
 800a428:	e6a8      	b.n	800a17c <_dtoa_r+0x6dc>
 800a42a:	9b08      	ldr	r3, [sp, #32]
 800a42c:	9a08      	ldr	r2, [sp, #32]
 800a42e:	1c5c      	adds	r4, r3, #1
 800a430:	2331      	movs	r3, #49	@ 0x31
 800a432:	7013      	strb	r3, [r2, #0]
 800a434:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a436:	3301      	adds	r3, #1
 800a438:	930c      	str	r3, [sp, #48]	@ 0x30
 800a43a:	e6a3      	b.n	800a184 <_dtoa_r+0x6e4>
 800a43c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800a43e:	0037      	movs	r7, r6
 800a440:	e7f3      	b.n	800a42a <_dtoa_r+0x98a>
 800a442:	9b04      	ldr	r3, [sp, #16]
 800a444:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a446:	930c      	str	r3, [sp, #48]	@ 0x30
 800a448:	e7f9      	b.n	800a43e <_dtoa_r+0x99e>
 800a44a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d100      	bne.n	800a452 <_dtoa_r+0x9b2>
 800a450:	e100      	b.n	800a654 <_dtoa_r+0xbb4>
 800a452:	2c00      	cmp	r4, #0
 800a454:	dd05      	ble.n	800a462 <_dtoa_r+0x9c2>
 800a456:	0039      	movs	r1, r7
 800a458:	0022      	movs	r2, r4
 800a45a:	9803      	ldr	r0, [sp, #12]
 800a45c:	f000 fbcc 	bl	800abf8 <__lshift>
 800a460:	0007      	movs	r7, r0
 800a462:	0038      	movs	r0, r7
 800a464:	2d00      	cmp	r5, #0
 800a466:	d018      	beq.n	800a49a <_dtoa_r+0x9fa>
 800a468:	6879      	ldr	r1, [r7, #4]
 800a46a:	9803      	ldr	r0, [sp, #12]
 800a46c:	f000 f956 	bl	800a71c <_Balloc>
 800a470:	1e04      	subs	r4, r0, #0
 800a472:	d105      	bne.n	800a480 <_dtoa_r+0x9e0>
 800a474:	0022      	movs	r2, r4
 800a476:	4b2b      	ldr	r3, [pc, #172]	@ (800a524 <_dtoa_r+0xa84>)
 800a478:	482b      	ldr	r0, [pc, #172]	@ (800a528 <_dtoa_r+0xa88>)
 800a47a:	492c      	ldr	r1, [pc, #176]	@ (800a52c <_dtoa_r+0xa8c>)
 800a47c:	f7ff fb25 	bl	8009aca <_dtoa_r+0x2a>
 800a480:	0039      	movs	r1, r7
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	310c      	adds	r1, #12
 800a486:	3202      	adds	r2, #2
 800a488:	0092      	lsls	r2, r2, #2
 800a48a:	300c      	adds	r0, #12
 800a48c:	f001 fee3 	bl	800c256 <memcpy>
 800a490:	2201      	movs	r2, #1
 800a492:	0021      	movs	r1, r4
 800a494:	9803      	ldr	r0, [sp, #12]
 800a496:	f000 fbaf 	bl	800abf8 <__lshift>
 800a49a:	9b08      	ldr	r3, [sp, #32]
 800a49c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a49e:	9306      	str	r3, [sp, #24]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	189b      	adds	r3, r3, r2
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	9704      	str	r7, [sp, #16]
 800a4a8:	0007      	movs	r7, r0
 800a4aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a4b2:	0031      	movs	r1, r6
 800a4b4:	9805      	ldr	r0, [sp, #20]
 800a4b6:	f7ff fa65 	bl	8009984 <quorem>
 800a4ba:	9904      	ldr	r1, [sp, #16]
 800a4bc:	0005      	movs	r5, r0
 800a4be:	900a      	str	r0, [sp, #40]	@ 0x28
 800a4c0:	9805      	ldr	r0, [sp, #20]
 800a4c2:	f000 fc05 	bl	800acd0 <__mcmp>
 800a4c6:	003a      	movs	r2, r7
 800a4c8:	900d      	str	r0, [sp, #52]	@ 0x34
 800a4ca:	0031      	movs	r1, r6
 800a4cc:	9803      	ldr	r0, [sp, #12]
 800a4ce:	f000 fc1b 	bl	800ad08 <__mdiff>
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	68c3      	ldr	r3, [r0, #12]
 800a4d6:	0004      	movs	r4, r0
 800a4d8:	3530      	adds	r5, #48	@ 0x30
 800a4da:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d104      	bne.n	800a4ea <_dtoa_r+0xa4a>
 800a4e0:	0001      	movs	r1, r0
 800a4e2:	9805      	ldr	r0, [sp, #20]
 800a4e4:	f000 fbf4 	bl	800acd0 <__mcmp>
 800a4e8:	9009      	str	r0, [sp, #36]	@ 0x24
 800a4ea:	0021      	movs	r1, r4
 800a4ec:	9803      	ldr	r0, [sp, #12]
 800a4ee:	f000 f959 	bl	800a7a4 <_Bfree>
 800a4f2:	9b06      	ldr	r3, [sp, #24]
 800a4f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4f6:	1c5c      	adds	r4, r3, #1
 800a4f8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4fe:	4313      	orrs	r3, r2
 800a500:	d116      	bne.n	800a530 <_dtoa_r+0xa90>
 800a502:	2d39      	cmp	r5, #57	@ 0x39
 800a504:	d02f      	beq.n	800a566 <_dtoa_r+0xac6>
 800a506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dd01      	ble.n	800a510 <_dtoa_r+0xa70>
 800a50c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a50e:	3531      	adds	r5, #49	@ 0x31
 800a510:	9b06      	ldr	r3, [sp, #24]
 800a512:	701d      	strb	r5, [r3, #0]
 800a514:	e638      	b.n	800a188 <_dtoa_r+0x6e8>
 800a516:	46c0      	nop			@ (mov r8, r8)
 800a518:	40240000 	.word	0x40240000
 800a51c:	00000433 	.word	0x00000433
 800a520:	7ff00000 	.word	0x7ff00000
 800a524:	0800ed29 	.word	0x0800ed29
 800a528:	0800ecd1 	.word	0x0800ecd1
 800a52c:	000002ef 	.word	0x000002ef
 800a530:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a532:	2b00      	cmp	r3, #0
 800a534:	db04      	blt.n	800a540 <_dtoa_r+0xaa0>
 800a536:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a538:	4313      	orrs	r3, r2
 800a53a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a53c:	4313      	orrs	r3, r2
 800a53e:	d11e      	bne.n	800a57e <_dtoa_r+0xade>
 800a540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a542:	2b00      	cmp	r3, #0
 800a544:	dde4      	ble.n	800a510 <_dtoa_r+0xa70>
 800a546:	9905      	ldr	r1, [sp, #20]
 800a548:	2201      	movs	r2, #1
 800a54a:	9803      	ldr	r0, [sp, #12]
 800a54c:	f000 fb54 	bl	800abf8 <__lshift>
 800a550:	0031      	movs	r1, r6
 800a552:	9005      	str	r0, [sp, #20]
 800a554:	f000 fbbc 	bl	800acd0 <__mcmp>
 800a558:	2800      	cmp	r0, #0
 800a55a:	dc02      	bgt.n	800a562 <_dtoa_r+0xac2>
 800a55c:	d1d8      	bne.n	800a510 <_dtoa_r+0xa70>
 800a55e:	07eb      	lsls	r3, r5, #31
 800a560:	d5d6      	bpl.n	800a510 <_dtoa_r+0xa70>
 800a562:	2d39      	cmp	r5, #57	@ 0x39
 800a564:	d1d2      	bne.n	800a50c <_dtoa_r+0xa6c>
 800a566:	2339      	movs	r3, #57	@ 0x39
 800a568:	9a06      	ldr	r2, [sp, #24]
 800a56a:	7013      	strb	r3, [r2, #0]
 800a56c:	0023      	movs	r3, r4
 800a56e:	001c      	movs	r4, r3
 800a570:	3b01      	subs	r3, #1
 800a572:	781a      	ldrb	r2, [r3, #0]
 800a574:	2a39      	cmp	r2, #57	@ 0x39
 800a576:	d04f      	beq.n	800a618 <_dtoa_r+0xb78>
 800a578:	3201      	adds	r2, #1
 800a57a:	701a      	strb	r2, [r3, #0]
 800a57c:	e604      	b.n	800a188 <_dtoa_r+0x6e8>
 800a57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a580:	2b00      	cmp	r3, #0
 800a582:	dd03      	ble.n	800a58c <_dtoa_r+0xaec>
 800a584:	2d39      	cmp	r5, #57	@ 0x39
 800a586:	d0ee      	beq.n	800a566 <_dtoa_r+0xac6>
 800a588:	3501      	adds	r5, #1
 800a58a:	e7c1      	b.n	800a510 <_dtoa_r+0xa70>
 800a58c:	9b06      	ldr	r3, [sp, #24]
 800a58e:	9a06      	ldr	r2, [sp, #24]
 800a590:	701d      	strb	r5, [r3, #0]
 800a592:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a594:	4293      	cmp	r3, r2
 800a596:	d02a      	beq.n	800a5ee <_dtoa_r+0xb4e>
 800a598:	2300      	movs	r3, #0
 800a59a:	220a      	movs	r2, #10
 800a59c:	9905      	ldr	r1, [sp, #20]
 800a59e:	9803      	ldr	r0, [sp, #12]
 800a5a0:	f000 f924 	bl	800a7ec <__multadd>
 800a5a4:	9b04      	ldr	r3, [sp, #16]
 800a5a6:	9005      	str	r0, [sp, #20]
 800a5a8:	42bb      	cmp	r3, r7
 800a5aa:	d109      	bne.n	800a5c0 <_dtoa_r+0xb20>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	220a      	movs	r2, #10
 800a5b0:	9904      	ldr	r1, [sp, #16]
 800a5b2:	9803      	ldr	r0, [sp, #12]
 800a5b4:	f000 f91a 	bl	800a7ec <__multadd>
 800a5b8:	9004      	str	r0, [sp, #16]
 800a5ba:	0007      	movs	r7, r0
 800a5bc:	9406      	str	r4, [sp, #24]
 800a5be:	e778      	b.n	800a4b2 <_dtoa_r+0xa12>
 800a5c0:	9904      	ldr	r1, [sp, #16]
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	220a      	movs	r2, #10
 800a5c6:	9803      	ldr	r0, [sp, #12]
 800a5c8:	f000 f910 	bl	800a7ec <__multadd>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	9004      	str	r0, [sp, #16]
 800a5d0:	220a      	movs	r2, #10
 800a5d2:	0039      	movs	r1, r7
 800a5d4:	9803      	ldr	r0, [sp, #12]
 800a5d6:	f000 f909 	bl	800a7ec <__multadd>
 800a5da:	e7ee      	b.n	800a5ba <_dtoa_r+0xb1a>
 800a5dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5de:	2401      	movs	r4, #1
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	dd00      	ble.n	800a5e6 <_dtoa_r+0xb46>
 800a5e4:	001c      	movs	r4, r3
 800a5e6:	9b08      	ldr	r3, [sp, #32]
 800a5e8:	191c      	adds	r4, r3, r4
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	9304      	str	r3, [sp, #16]
 800a5ee:	9905      	ldr	r1, [sp, #20]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	9803      	ldr	r0, [sp, #12]
 800a5f4:	f000 fb00 	bl	800abf8 <__lshift>
 800a5f8:	0031      	movs	r1, r6
 800a5fa:	9005      	str	r0, [sp, #20]
 800a5fc:	f000 fb68 	bl	800acd0 <__mcmp>
 800a600:	2800      	cmp	r0, #0
 800a602:	dcb3      	bgt.n	800a56c <_dtoa_r+0xacc>
 800a604:	d101      	bne.n	800a60a <_dtoa_r+0xb6a>
 800a606:	07ed      	lsls	r5, r5, #31
 800a608:	d4b0      	bmi.n	800a56c <_dtoa_r+0xacc>
 800a60a:	0023      	movs	r3, r4
 800a60c:	001c      	movs	r4, r3
 800a60e:	3b01      	subs	r3, #1
 800a610:	781a      	ldrb	r2, [r3, #0]
 800a612:	2a30      	cmp	r2, #48	@ 0x30
 800a614:	d0fa      	beq.n	800a60c <_dtoa_r+0xb6c>
 800a616:	e5b7      	b.n	800a188 <_dtoa_r+0x6e8>
 800a618:	9a08      	ldr	r2, [sp, #32]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d1a7      	bne.n	800a56e <_dtoa_r+0xace>
 800a61e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a620:	3301      	adds	r3, #1
 800a622:	930c      	str	r3, [sp, #48]	@ 0x30
 800a624:	2331      	movs	r3, #49	@ 0x31
 800a626:	7013      	strb	r3, [r2, #0]
 800a628:	e5ae      	b.n	800a188 <_dtoa_r+0x6e8>
 800a62a:	4b15      	ldr	r3, [pc, #84]	@ (800a680 <_dtoa_r+0xbe0>)
 800a62c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a62e:	9308      	str	r3, [sp, #32]
 800a630:	4b14      	ldr	r3, [pc, #80]	@ (800a684 <_dtoa_r+0xbe4>)
 800a632:	2a00      	cmp	r2, #0
 800a634:	d001      	beq.n	800a63a <_dtoa_r+0xb9a>
 800a636:	f7ff fa7b 	bl	8009b30 <_dtoa_r+0x90>
 800a63a:	f7ff fa7b 	bl	8009b34 <_dtoa_r+0x94>
 800a63e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a640:	2b01      	cmp	r3, #1
 800a642:	dc00      	bgt.n	800a646 <_dtoa_r+0xba6>
 800a644:	e648      	b.n	800a2d8 <_dtoa_r+0x838>
 800a646:	2001      	movs	r0, #1
 800a648:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a64a:	e665      	b.n	800a318 <_dtoa_r+0x878>
 800a64c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a64e:	2b00      	cmp	r3, #0
 800a650:	dc00      	bgt.n	800a654 <_dtoa_r+0xbb4>
 800a652:	e6d6      	b.n	800a402 <_dtoa_r+0x962>
 800a654:	2400      	movs	r4, #0
 800a656:	0031      	movs	r1, r6
 800a658:	9805      	ldr	r0, [sp, #20]
 800a65a:	f7ff f993 	bl	8009984 <quorem>
 800a65e:	9b08      	ldr	r3, [sp, #32]
 800a660:	3030      	adds	r0, #48	@ 0x30
 800a662:	5518      	strb	r0, [r3, r4]
 800a664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a666:	3401      	adds	r4, #1
 800a668:	0005      	movs	r5, r0
 800a66a:	429c      	cmp	r4, r3
 800a66c:	dab6      	bge.n	800a5dc <_dtoa_r+0xb3c>
 800a66e:	2300      	movs	r3, #0
 800a670:	220a      	movs	r2, #10
 800a672:	9905      	ldr	r1, [sp, #20]
 800a674:	9803      	ldr	r0, [sp, #12]
 800a676:	f000 f8b9 	bl	800a7ec <__multadd>
 800a67a:	9005      	str	r0, [sp, #20]
 800a67c:	e7eb      	b.n	800a656 <_dtoa_r+0xbb6>
 800a67e:	46c0      	nop			@ (mov r8, r8)
 800a680:	0800ecad 	.word	0x0800ecad
 800a684:	0800ecb5 	.word	0x0800ecb5

0800a688 <_free_r>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	0005      	movs	r5, r0
 800a68c:	1e0c      	subs	r4, r1, #0
 800a68e:	d010      	beq.n	800a6b2 <_free_r+0x2a>
 800a690:	3c04      	subs	r4, #4
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	da00      	bge.n	800a69a <_free_r+0x12>
 800a698:	18e4      	adds	r4, r4, r3
 800a69a:	0028      	movs	r0, r5
 800a69c:	f7fe f91a 	bl	80088d4 <__malloc_lock>
 800a6a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a718 <_free_r+0x90>)
 800a6a2:	6813      	ldr	r3, [r2, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d105      	bne.n	800a6b4 <_free_r+0x2c>
 800a6a8:	6063      	str	r3, [r4, #4]
 800a6aa:	6014      	str	r4, [r2, #0]
 800a6ac:	0028      	movs	r0, r5
 800a6ae:	f7fe f919 	bl	80088e4 <__malloc_unlock>
 800a6b2:	bd70      	pop	{r4, r5, r6, pc}
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	d908      	bls.n	800a6ca <_free_r+0x42>
 800a6b8:	6820      	ldr	r0, [r4, #0]
 800a6ba:	1821      	adds	r1, r4, r0
 800a6bc:	428b      	cmp	r3, r1
 800a6be:	d1f3      	bne.n	800a6a8 <_free_r+0x20>
 800a6c0:	6819      	ldr	r1, [r3, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	1809      	adds	r1, r1, r0
 800a6c6:	6021      	str	r1, [r4, #0]
 800a6c8:	e7ee      	b.n	800a6a8 <_free_r+0x20>
 800a6ca:	001a      	movs	r2, r3
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <_free_r+0x4e>
 800a6d2:	42a3      	cmp	r3, r4
 800a6d4:	d9f9      	bls.n	800a6ca <_free_r+0x42>
 800a6d6:	6811      	ldr	r1, [r2, #0]
 800a6d8:	1850      	adds	r0, r2, r1
 800a6da:	42a0      	cmp	r0, r4
 800a6dc:	d10b      	bne.n	800a6f6 <_free_r+0x6e>
 800a6de:	6820      	ldr	r0, [r4, #0]
 800a6e0:	1809      	adds	r1, r1, r0
 800a6e2:	1850      	adds	r0, r2, r1
 800a6e4:	6011      	str	r1, [r2, #0]
 800a6e6:	4283      	cmp	r3, r0
 800a6e8:	d1e0      	bne.n	800a6ac <_free_r+0x24>
 800a6ea:	6818      	ldr	r0, [r3, #0]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	1841      	adds	r1, r0, r1
 800a6f0:	6011      	str	r1, [r2, #0]
 800a6f2:	6053      	str	r3, [r2, #4]
 800a6f4:	e7da      	b.n	800a6ac <_free_r+0x24>
 800a6f6:	42a0      	cmp	r0, r4
 800a6f8:	d902      	bls.n	800a700 <_free_r+0x78>
 800a6fa:	230c      	movs	r3, #12
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	e7d5      	b.n	800a6ac <_free_r+0x24>
 800a700:	6820      	ldr	r0, [r4, #0]
 800a702:	1821      	adds	r1, r4, r0
 800a704:	428b      	cmp	r3, r1
 800a706:	d103      	bne.n	800a710 <_free_r+0x88>
 800a708:	6819      	ldr	r1, [r3, #0]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	1809      	adds	r1, r1, r0
 800a70e:	6021      	str	r1, [r4, #0]
 800a710:	6063      	str	r3, [r4, #4]
 800a712:	6054      	str	r4, [r2, #4]
 800a714:	e7ca      	b.n	800a6ac <_free_r+0x24>
 800a716:	46c0      	nop			@ (mov r8, r8)
 800a718:	20000774 	.word	0x20000774

0800a71c <_Balloc>:
 800a71c:	b570      	push	{r4, r5, r6, lr}
 800a71e:	69c5      	ldr	r5, [r0, #28]
 800a720:	0006      	movs	r6, r0
 800a722:	000c      	movs	r4, r1
 800a724:	2d00      	cmp	r5, #0
 800a726:	d10e      	bne.n	800a746 <_Balloc+0x2a>
 800a728:	2010      	movs	r0, #16
 800a72a:	f7fe f827 	bl	800877c <malloc>
 800a72e:	1e02      	subs	r2, r0, #0
 800a730:	61f0      	str	r0, [r6, #28]
 800a732:	d104      	bne.n	800a73e <_Balloc+0x22>
 800a734:	216b      	movs	r1, #107	@ 0x6b
 800a736:	4b19      	ldr	r3, [pc, #100]	@ (800a79c <_Balloc+0x80>)
 800a738:	4819      	ldr	r0, [pc, #100]	@ (800a7a0 <_Balloc+0x84>)
 800a73a:	f001 fd9b 	bl	800c274 <__assert_func>
 800a73e:	6045      	str	r5, [r0, #4]
 800a740:	6085      	str	r5, [r0, #8]
 800a742:	6005      	str	r5, [r0, #0]
 800a744:	60c5      	str	r5, [r0, #12]
 800a746:	69f5      	ldr	r5, [r6, #28]
 800a748:	68eb      	ldr	r3, [r5, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d013      	beq.n	800a776 <_Balloc+0x5a>
 800a74e:	69f3      	ldr	r3, [r6, #28]
 800a750:	00a2      	lsls	r2, r4, #2
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	189b      	adds	r3, r3, r2
 800a756:	6818      	ldr	r0, [r3, #0]
 800a758:	2800      	cmp	r0, #0
 800a75a:	d118      	bne.n	800a78e <_Balloc+0x72>
 800a75c:	2101      	movs	r1, #1
 800a75e:	000d      	movs	r5, r1
 800a760:	40a5      	lsls	r5, r4
 800a762:	1d6a      	adds	r2, r5, #5
 800a764:	0030      	movs	r0, r6
 800a766:	0092      	lsls	r2, r2, #2
 800a768:	f001 fda2 	bl	800c2b0 <_calloc_r>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d00c      	beq.n	800a78a <_Balloc+0x6e>
 800a770:	6044      	str	r4, [r0, #4]
 800a772:	6085      	str	r5, [r0, #8]
 800a774:	e00d      	b.n	800a792 <_Balloc+0x76>
 800a776:	2221      	movs	r2, #33	@ 0x21
 800a778:	2104      	movs	r1, #4
 800a77a:	0030      	movs	r0, r6
 800a77c:	f001 fd98 	bl	800c2b0 <_calloc_r>
 800a780:	69f3      	ldr	r3, [r6, #28]
 800a782:	60e8      	str	r0, [r5, #12]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e1      	bne.n	800a74e <_Balloc+0x32>
 800a78a:	2000      	movs	r0, #0
 800a78c:	bd70      	pop	{r4, r5, r6, pc}
 800a78e:	6802      	ldr	r2, [r0, #0]
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	2300      	movs	r3, #0
 800a794:	6103      	str	r3, [r0, #16]
 800a796:	60c3      	str	r3, [r0, #12]
 800a798:	e7f8      	b.n	800a78c <_Balloc+0x70>
 800a79a:	46c0      	nop			@ (mov r8, r8)
 800a79c:	0800ecba 	.word	0x0800ecba
 800a7a0:	0800ed3a 	.word	0x0800ed3a

0800a7a4 <_Bfree>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	69c6      	ldr	r6, [r0, #28]
 800a7a8:	0005      	movs	r5, r0
 800a7aa:	000c      	movs	r4, r1
 800a7ac:	2e00      	cmp	r6, #0
 800a7ae:	d10e      	bne.n	800a7ce <_Bfree+0x2a>
 800a7b0:	2010      	movs	r0, #16
 800a7b2:	f7fd ffe3 	bl	800877c <malloc>
 800a7b6:	1e02      	subs	r2, r0, #0
 800a7b8:	61e8      	str	r0, [r5, #28]
 800a7ba:	d104      	bne.n	800a7c6 <_Bfree+0x22>
 800a7bc:	218f      	movs	r1, #143	@ 0x8f
 800a7be:	4b09      	ldr	r3, [pc, #36]	@ (800a7e4 <_Bfree+0x40>)
 800a7c0:	4809      	ldr	r0, [pc, #36]	@ (800a7e8 <_Bfree+0x44>)
 800a7c2:	f001 fd57 	bl	800c274 <__assert_func>
 800a7c6:	6046      	str	r6, [r0, #4]
 800a7c8:	6086      	str	r6, [r0, #8]
 800a7ca:	6006      	str	r6, [r0, #0]
 800a7cc:	60c6      	str	r6, [r0, #12]
 800a7ce:	2c00      	cmp	r4, #0
 800a7d0:	d007      	beq.n	800a7e2 <_Bfree+0x3e>
 800a7d2:	69eb      	ldr	r3, [r5, #28]
 800a7d4:	6862      	ldr	r2, [r4, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	0092      	lsls	r2, r2, #2
 800a7da:	189b      	adds	r3, r3, r2
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	6022      	str	r2, [r4, #0]
 800a7e0:	601c      	str	r4, [r3, #0]
 800a7e2:	bd70      	pop	{r4, r5, r6, pc}
 800a7e4:	0800ecba 	.word	0x0800ecba
 800a7e8:	0800ed3a 	.word	0x0800ed3a

0800a7ec <__multadd>:
 800a7ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ee:	000f      	movs	r7, r1
 800a7f0:	9001      	str	r0, [sp, #4]
 800a7f2:	000c      	movs	r4, r1
 800a7f4:	001e      	movs	r6, r3
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	690d      	ldr	r5, [r1, #16]
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	3001      	adds	r0, #1
 800a800:	b299      	uxth	r1, r3
 800a802:	4351      	muls	r1, r2
 800a804:	0c1b      	lsrs	r3, r3, #16
 800a806:	4353      	muls	r3, r2
 800a808:	1989      	adds	r1, r1, r6
 800a80a:	0c0e      	lsrs	r6, r1, #16
 800a80c:	199b      	adds	r3, r3, r6
 800a80e:	0c1e      	lsrs	r6, r3, #16
 800a810:	b289      	uxth	r1, r1
 800a812:	041b      	lsls	r3, r3, #16
 800a814:	185b      	adds	r3, r3, r1
 800a816:	c708      	stmia	r7!, {r3}
 800a818:	4285      	cmp	r5, r0
 800a81a:	dcef      	bgt.n	800a7fc <__multadd+0x10>
 800a81c:	2e00      	cmp	r6, #0
 800a81e:	d022      	beq.n	800a866 <__multadd+0x7a>
 800a820:	68a3      	ldr	r3, [r4, #8]
 800a822:	42ab      	cmp	r3, r5
 800a824:	dc19      	bgt.n	800a85a <__multadd+0x6e>
 800a826:	6861      	ldr	r1, [r4, #4]
 800a828:	9801      	ldr	r0, [sp, #4]
 800a82a:	3101      	adds	r1, #1
 800a82c:	f7ff ff76 	bl	800a71c <_Balloc>
 800a830:	1e07      	subs	r7, r0, #0
 800a832:	d105      	bne.n	800a840 <__multadd+0x54>
 800a834:	003a      	movs	r2, r7
 800a836:	21ba      	movs	r1, #186	@ 0xba
 800a838:	4b0c      	ldr	r3, [pc, #48]	@ (800a86c <__multadd+0x80>)
 800a83a:	480d      	ldr	r0, [pc, #52]	@ (800a870 <__multadd+0x84>)
 800a83c:	f001 fd1a 	bl	800c274 <__assert_func>
 800a840:	0021      	movs	r1, r4
 800a842:	6922      	ldr	r2, [r4, #16]
 800a844:	310c      	adds	r1, #12
 800a846:	3202      	adds	r2, #2
 800a848:	0092      	lsls	r2, r2, #2
 800a84a:	300c      	adds	r0, #12
 800a84c:	f001 fd03 	bl	800c256 <memcpy>
 800a850:	0021      	movs	r1, r4
 800a852:	9801      	ldr	r0, [sp, #4]
 800a854:	f7ff ffa6 	bl	800a7a4 <_Bfree>
 800a858:	003c      	movs	r4, r7
 800a85a:	1d2b      	adds	r3, r5, #4
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	18e3      	adds	r3, r4, r3
 800a860:	3501      	adds	r5, #1
 800a862:	605e      	str	r6, [r3, #4]
 800a864:	6125      	str	r5, [r4, #16]
 800a866:	0020      	movs	r0, r4
 800a868:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a86a:	46c0      	nop			@ (mov r8, r8)
 800a86c:	0800ed29 	.word	0x0800ed29
 800a870:	0800ed3a 	.word	0x0800ed3a

0800a874 <__s2b>:
 800a874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a876:	0007      	movs	r7, r0
 800a878:	0018      	movs	r0, r3
 800a87a:	000c      	movs	r4, r1
 800a87c:	3008      	adds	r0, #8
 800a87e:	2109      	movs	r1, #9
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	0015      	movs	r5, r2
 800a884:	f7f5 fce4 	bl	8000250 <__divsi3>
 800a888:	2301      	movs	r3, #1
 800a88a:	2100      	movs	r1, #0
 800a88c:	4283      	cmp	r3, r0
 800a88e:	db0a      	blt.n	800a8a6 <__s2b+0x32>
 800a890:	0038      	movs	r0, r7
 800a892:	f7ff ff43 	bl	800a71c <_Balloc>
 800a896:	1e01      	subs	r1, r0, #0
 800a898:	d108      	bne.n	800a8ac <__s2b+0x38>
 800a89a:	000a      	movs	r2, r1
 800a89c:	4b19      	ldr	r3, [pc, #100]	@ (800a904 <__s2b+0x90>)
 800a89e:	481a      	ldr	r0, [pc, #104]	@ (800a908 <__s2b+0x94>)
 800a8a0:	31d3      	adds	r1, #211	@ 0xd3
 800a8a2:	f001 fce7 	bl	800c274 <__assert_func>
 800a8a6:	005b      	lsls	r3, r3, #1
 800a8a8:	3101      	adds	r1, #1
 800a8aa:	e7ef      	b.n	800a88c <__s2b+0x18>
 800a8ac:	9b08      	ldr	r3, [sp, #32]
 800a8ae:	6143      	str	r3, [r0, #20]
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	6103      	str	r3, [r0, #16]
 800a8b4:	2d09      	cmp	r5, #9
 800a8b6:	dd18      	ble.n	800a8ea <__s2b+0x76>
 800a8b8:	0023      	movs	r3, r4
 800a8ba:	3309      	adds	r3, #9
 800a8bc:	001e      	movs	r6, r3
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	1964      	adds	r4, r4, r5
 800a8c2:	7833      	ldrb	r3, [r6, #0]
 800a8c4:	220a      	movs	r2, #10
 800a8c6:	0038      	movs	r0, r7
 800a8c8:	3b30      	subs	r3, #48	@ 0x30
 800a8ca:	f7ff ff8f 	bl	800a7ec <__multadd>
 800a8ce:	3601      	adds	r6, #1
 800a8d0:	0001      	movs	r1, r0
 800a8d2:	42a6      	cmp	r6, r4
 800a8d4:	d1f5      	bne.n	800a8c2 <__s2b+0x4e>
 800a8d6:	002c      	movs	r4, r5
 800a8d8:	9b00      	ldr	r3, [sp, #0]
 800a8da:	3c08      	subs	r4, #8
 800a8dc:	191c      	adds	r4, r3, r4
 800a8de:	002e      	movs	r6, r5
 800a8e0:	9b01      	ldr	r3, [sp, #4]
 800a8e2:	429e      	cmp	r6, r3
 800a8e4:	db04      	blt.n	800a8f0 <__s2b+0x7c>
 800a8e6:	0008      	movs	r0, r1
 800a8e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8ea:	2509      	movs	r5, #9
 800a8ec:	340a      	adds	r4, #10
 800a8ee:	e7f6      	b.n	800a8de <__s2b+0x6a>
 800a8f0:	1b63      	subs	r3, r4, r5
 800a8f2:	5d9b      	ldrb	r3, [r3, r6]
 800a8f4:	220a      	movs	r2, #10
 800a8f6:	0038      	movs	r0, r7
 800a8f8:	3b30      	subs	r3, #48	@ 0x30
 800a8fa:	f7ff ff77 	bl	800a7ec <__multadd>
 800a8fe:	3601      	adds	r6, #1
 800a900:	0001      	movs	r1, r0
 800a902:	e7ed      	b.n	800a8e0 <__s2b+0x6c>
 800a904:	0800ed29 	.word	0x0800ed29
 800a908:	0800ed3a 	.word	0x0800ed3a

0800a90c <__hi0bits>:
 800a90c:	2280      	movs	r2, #128	@ 0x80
 800a90e:	0003      	movs	r3, r0
 800a910:	0252      	lsls	r2, r2, #9
 800a912:	2000      	movs	r0, #0
 800a914:	4293      	cmp	r3, r2
 800a916:	d201      	bcs.n	800a91c <__hi0bits+0x10>
 800a918:	041b      	lsls	r3, r3, #16
 800a91a:	3010      	adds	r0, #16
 800a91c:	2280      	movs	r2, #128	@ 0x80
 800a91e:	0452      	lsls	r2, r2, #17
 800a920:	4293      	cmp	r3, r2
 800a922:	d201      	bcs.n	800a928 <__hi0bits+0x1c>
 800a924:	3008      	adds	r0, #8
 800a926:	021b      	lsls	r3, r3, #8
 800a928:	2280      	movs	r2, #128	@ 0x80
 800a92a:	0552      	lsls	r2, r2, #21
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d201      	bcs.n	800a934 <__hi0bits+0x28>
 800a930:	3004      	adds	r0, #4
 800a932:	011b      	lsls	r3, r3, #4
 800a934:	2280      	movs	r2, #128	@ 0x80
 800a936:	05d2      	lsls	r2, r2, #23
 800a938:	4293      	cmp	r3, r2
 800a93a:	d201      	bcs.n	800a940 <__hi0bits+0x34>
 800a93c:	3002      	adds	r0, #2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	2b00      	cmp	r3, #0
 800a942:	db03      	blt.n	800a94c <__hi0bits+0x40>
 800a944:	3001      	adds	r0, #1
 800a946:	4213      	tst	r3, r2
 800a948:	d100      	bne.n	800a94c <__hi0bits+0x40>
 800a94a:	2020      	movs	r0, #32
 800a94c:	4770      	bx	lr

0800a94e <__lo0bits>:
 800a94e:	6803      	ldr	r3, [r0, #0]
 800a950:	0001      	movs	r1, r0
 800a952:	2207      	movs	r2, #7
 800a954:	0018      	movs	r0, r3
 800a956:	4010      	ands	r0, r2
 800a958:	4213      	tst	r3, r2
 800a95a:	d00d      	beq.n	800a978 <__lo0bits+0x2a>
 800a95c:	3a06      	subs	r2, #6
 800a95e:	2000      	movs	r0, #0
 800a960:	4213      	tst	r3, r2
 800a962:	d105      	bne.n	800a970 <__lo0bits+0x22>
 800a964:	3002      	adds	r0, #2
 800a966:	4203      	tst	r3, r0
 800a968:	d003      	beq.n	800a972 <__lo0bits+0x24>
 800a96a:	40d3      	lsrs	r3, r2
 800a96c:	0010      	movs	r0, r2
 800a96e:	600b      	str	r3, [r1, #0]
 800a970:	4770      	bx	lr
 800a972:	089b      	lsrs	r3, r3, #2
 800a974:	600b      	str	r3, [r1, #0]
 800a976:	e7fb      	b.n	800a970 <__lo0bits+0x22>
 800a978:	b29a      	uxth	r2, r3
 800a97a:	2a00      	cmp	r2, #0
 800a97c:	d101      	bne.n	800a982 <__lo0bits+0x34>
 800a97e:	2010      	movs	r0, #16
 800a980:	0c1b      	lsrs	r3, r3, #16
 800a982:	b2da      	uxtb	r2, r3
 800a984:	2a00      	cmp	r2, #0
 800a986:	d101      	bne.n	800a98c <__lo0bits+0x3e>
 800a988:	3008      	adds	r0, #8
 800a98a:	0a1b      	lsrs	r3, r3, #8
 800a98c:	071a      	lsls	r2, r3, #28
 800a98e:	d101      	bne.n	800a994 <__lo0bits+0x46>
 800a990:	3004      	adds	r0, #4
 800a992:	091b      	lsrs	r3, r3, #4
 800a994:	079a      	lsls	r2, r3, #30
 800a996:	d101      	bne.n	800a99c <__lo0bits+0x4e>
 800a998:	3002      	adds	r0, #2
 800a99a:	089b      	lsrs	r3, r3, #2
 800a99c:	07da      	lsls	r2, r3, #31
 800a99e:	d4e9      	bmi.n	800a974 <__lo0bits+0x26>
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	085b      	lsrs	r3, r3, #1
 800a9a4:	d1e6      	bne.n	800a974 <__lo0bits+0x26>
 800a9a6:	2020      	movs	r0, #32
 800a9a8:	e7e2      	b.n	800a970 <__lo0bits+0x22>
	...

0800a9ac <__i2b>:
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	000c      	movs	r4, r1
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	f7ff feb3 	bl	800a71c <_Balloc>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d107      	bne.n	800a9ca <__i2b+0x1e>
 800a9ba:	2146      	movs	r1, #70	@ 0x46
 800a9bc:	4c05      	ldr	r4, [pc, #20]	@ (800a9d4 <__i2b+0x28>)
 800a9be:	0002      	movs	r2, r0
 800a9c0:	4b05      	ldr	r3, [pc, #20]	@ (800a9d8 <__i2b+0x2c>)
 800a9c2:	0020      	movs	r0, r4
 800a9c4:	31ff      	adds	r1, #255	@ 0xff
 800a9c6:	f001 fc55 	bl	800c274 <__assert_func>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	6144      	str	r4, [r0, #20]
 800a9ce:	6103      	str	r3, [r0, #16]
 800a9d0:	bd10      	pop	{r4, pc}
 800a9d2:	46c0      	nop			@ (mov r8, r8)
 800a9d4:	0800ed3a 	.word	0x0800ed3a
 800a9d8:	0800ed29 	.word	0x0800ed29

0800a9dc <__multiply>:
 800a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9de:	0014      	movs	r4, r2
 800a9e0:	690a      	ldr	r2, [r1, #16]
 800a9e2:	6923      	ldr	r3, [r4, #16]
 800a9e4:	000d      	movs	r5, r1
 800a9e6:	b08b      	sub	sp, #44	@ 0x2c
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	db02      	blt.n	800a9f2 <__multiply+0x16>
 800a9ec:	0023      	movs	r3, r4
 800a9ee:	000c      	movs	r4, r1
 800a9f0:	001d      	movs	r5, r3
 800a9f2:	6927      	ldr	r7, [r4, #16]
 800a9f4:	692e      	ldr	r6, [r5, #16]
 800a9f6:	6861      	ldr	r1, [r4, #4]
 800a9f8:	19bb      	adds	r3, r7, r6
 800a9fa:	9303      	str	r3, [sp, #12]
 800a9fc:	68a3      	ldr	r3, [r4, #8]
 800a9fe:	19ba      	adds	r2, r7, r6
 800aa00:	4293      	cmp	r3, r2
 800aa02:	da00      	bge.n	800aa06 <__multiply+0x2a>
 800aa04:	3101      	adds	r1, #1
 800aa06:	f7ff fe89 	bl	800a71c <_Balloc>
 800aa0a:	9002      	str	r0, [sp, #8]
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d106      	bne.n	800aa1e <__multiply+0x42>
 800aa10:	21b1      	movs	r1, #177	@ 0xb1
 800aa12:	4b49      	ldr	r3, [pc, #292]	@ (800ab38 <__multiply+0x15c>)
 800aa14:	4849      	ldr	r0, [pc, #292]	@ (800ab3c <__multiply+0x160>)
 800aa16:	9a02      	ldr	r2, [sp, #8]
 800aa18:	0049      	lsls	r1, r1, #1
 800aa1a:	f001 fc2b 	bl	800c274 <__assert_func>
 800aa1e:	9b02      	ldr	r3, [sp, #8]
 800aa20:	2200      	movs	r2, #0
 800aa22:	3314      	adds	r3, #20
 800aa24:	469c      	mov	ip, r3
 800aa26:	19bb      	adds	r3, r7, r6
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4463      	add	r3, ip
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	4663      	mov	r3, ip
 800aa30:	9904      	ldr	r1, [sp, #16]
 800aa32:	428b      	cmp	r3, r1
 800aa34:	d32a      	bcc.n	800aa8c <__multiply+0xb0>
 800aa36:	0023      	movs	r3, r4
 800aa38:	00bf      	lsls	r7, r7, #2
 800aa3a:	3314      	adds	r3, #20
 800aa3c:	3514      	adds	r5, #20
 800aa3e:	9308      	str	r3, [sp, #32]
 800aa40:	00b6      	lsls	r6, r6, #2
 800aa42:	19db      	adds	r3, r3, r7
 800aa44:	9305      	str	r3, [sp, #20]
 800aa46:	19ab      	adds	r3, r5, r6
 800aa48:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa4a:	2304      	movs	r3, #4
 800aa4c:	9306      	str	r3, [sp, #24]
 800aa4e:	0023      	movs	r3, r4
 800aa50:	9a05      	ldr	r2, [sp, #20]
 800aa52:	3315      	adds	r3, #21
 800aa54:	9501      	str	r5, [sp, #4]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d305      	bcc.n	800aa66 <__multiply+0x8a>
 800aa5a:	1b13      	subs	r3, r2, r4
 800aa5c:	3b15      	subs	r3, #21
 800aa5e:	089b      	lsrs	r3, r3, #2
 800aa60:	3301      	adds	r3, #1
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	9306      	str	r3, [sp, #24]
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d310      	bcc.n	800aa90 <__multiply+0xb4>
 800aa6e:	9b03      	ldr	r3, [sp, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dd05      	ble.n	800aa80 <__multiply+0xa4>
 800aa74:	9b04      	ldr	r3, [sp, #16]
 800aa76:	3b04      	subs	r3, #4
 800aa78:	9304      	str	r3, [sp, #16]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d056      	beq.n	800ab2e <__multiply+0x152>
 800aa80:	9b02      	ldr	r3, [sp, #8]
 800aa82:	9a03      	ldr	r2, [sp, #12]
 800aa84:	0018      	movs	r0, r3
 800aa86:	611a      	str	r2, [r3, #16]
 800aa88:	b00b      	add	sp, #44	@ 0x2c
 800aa8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa8c:	c304      	stmia	r3!, {r2}
 800aa8e:	e7cf      	b.n	800aa30 <__multiply+0x54>
 800aa90:	9b01      	ldr	r3, [sp, #4]
 800aa92:	6818      	ldr	r0, [r3, #0]
 800aa94:	b280      	uxth	r0, r0
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d01e      	beq.n	800aad8 <__multiply+0xfc>
 800aa9a:	4667      	mov	r7, ip
 800aa9c:	2500      	movs	r5, #0
 800aa9e:	9e08      	ldr	r6, [sp, #32]
 800aaa0:	ce02      	ldmia	r6!, {r1}
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	9307      	str	r3, [sp, #28]
 800aaa6:	b28b      	uxth	r3, r1
 800aaa8:	4343      	muls	r3, r0
 800aaaa:	001a      	movs	r2, r3
 800aaac:	466b      	mov	r3, sp
 800aaae:	0c09      	lsrs	r1, r1, #16
 800aab0:	8b9b      	ldrh	r3, [r3, #28]
 800aab2:	4341      	muls	r1, r0
 800aab4:	18d3      	adds	r3, r2, r3
 800aab6:	9a07      	ldr	r2, [sp, #28]
 800aab8:	195b      	adds	r3, r3, r5
 800aaba:	0c12      	lsrs	r2, r2, #16
 800aabc:	1889      	adds	r1, r1, r2
 800aabe:	0c1a      	lsrs	r2, r3, #16
 800aac0:	188a      	adds	r2, r1, r2
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	0c15      	lsrs	r5, r2, #16
 800aac6:	0412      	lsls	r2, r2, #16
 800aac8:	431a      	orrs	r2, r3
 800aaca:	9b05      	ldr	r3, [sp, #20]
 800aacc:	c704      	stmia	r7!, {r2}
 800aace:	42b3      	cmp	r3, r6
 800aad0:	d8e6      	bhi.n	800aaa0 <__multiply+0xc4>
 800aad2:	4663      	mov	r3, ip
 800aad4:	9a06      	ldr	r2, [sp, #24]
 800aad6:	509d      	str	r5, [r3, r2]
 800aad8:	9b01      	ldr	r3, [sp, #4]
 800aada:	6818      	ldr	r0, [r3, #0]
 800aadc:	0c00      	lsrs	r0, r0, #16
 800aade:	d020      	beq.n	800ab22 <__multiply+0x146>
 800aae0:	4663      	mov	r3, ip
 800aae2:	0025      	movs	r5, r4
 800aae4:	4661      	mov	r1, ip
 800aae6:	2700      	movs	r7, #0
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3514      	adds	r5, #20
 800aaec:	682a      	ldr	r2, [r5, #0]
 800aaee:	680e      	ldr	r6, [r1, #0]
 800aaf0:	b292      	uxth	r2, r2
 800aaf2:	4342      	muls	r2, r0
 800aaf4:	0c36      	lsrs	r6, r6, #16
 800aaf6:	1992      	adds	r2, r2, r6
 800aaf8:	19d2      	adds	r2, r2, r7
 800aafa:	0416      	lsls	r6, r2, #16
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	431e      	orrs	r6, r3
 800ab00:	600e      	str	r6, [r1, #0]
 800ab02:	cd40      	ldmia	r5!, {r6}
 800ab04:	684b      	ldr	r3, [r1, #4]
 800ab06:	0c36      	lsrs	r6, r6, #16
 800ab08:	4346      	muls	r6, r0
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	0c12      	lsrs	r2, r2, #16
 800ab0e:	18f3      	adds	r3, r6, r3
 800ab10:	189b      	adds	r3, r3, r2
 800ab12:	9a05      	ldr	r2, [sp, #20]
 800ab14:	0c1f      	lsrs	r7, r3, #16
 800ab16:	3104      	adds	r1, #4
 800ab18:	42aa      	cmp	r2, r5
 800ab1a:	d8e7      	bhi.n	800aaec <__multiply+0x110>
 800ab1c:	4662      	mov	r2, ip
 800ab1e:	9906      	ldr	r1, [sp, #24]
 800ab20:	5053      	str	r3, [r2, r1]
 800ab22:	9b01      	ldr	r3, [sp, #4]
 800ab24:	3304      	adds	r3, #4
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	2304      	movs	r3, #4
 800ab2a:	449c      	add	ip, r3
 800ab2c:	e79b      	b.n	800aa66 <__multiply+0x8a>
 800ab2e:	9b03      	ldr	r3, [sp, #12]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	9303      	str	r3, [sp, #12]
 800ab34:	e79b      	b.n	800aa6e <__multiply+0x92>
 800ab36:	46c0      	nop			@ (mov r8, r8)
 800ab38:	0800ed29 	.word	0x0800ed29
 800ab3c:	0800ed3a 	.word	0x0800ed3a

0800ab40 <__pow5mult>:
 800ab40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab42:	2303      	movs	r3, #3
 800ab44:	0015      	movs	r5, r2
 800ab46:	0007      	movs	r7, r0
 800ab48:	000e      	movs	r6, r1
 800ab4a:	401a      	ands	r2, r3
 800ab4c:	421d      	tst	r5, r3
 800ab4e:	d008      	beq.n	800ab62 <__pow5mult+0x22>
 800ab50:	4925      	ldr	r1, [pc, #148]	@ (800abe8 <__pow5mult+0xa8>)
 800ab52:	3a01      	subs	r2, #1
 800ab54:	0092      	lsls	r2, r2, #2
 800ab56:	5852      	ldr	r2, [r2, r1]
 800ab58:	2300      	movs	r3, #0
 800ab5a:	0031      	movs	r1, r6
 800ab5c:	f7ff fe46 	bl	800a7ec <__multadd>
 800ab60:	0006      	movs	r6, r0
 800ab62:	10ad      	asrs	r5, r5, #2
 800ab64:	d03d      	beq.n	800abe2 <__pow5mult+0xa2>
 800ab66:	69fc      	ldr	r4, [r7, #28]
 800ab68:	2c00      	cmp	r4, #0
 800ab6a:	d10f      	bne.n	800ab8c <__pow5mult+0x4c>
 800ab6c:	2010      	movs	r0, #16
 800ab6e:	f7fd fe05 	bl	800877c <malloc>
 800ab72:	1e02      	subs	r2, r0, #0
 800ab74:	61f8      	str	r0, [r7, #28]
 800ab76:	d105      	bne.n	800ab84 <__pow5mult+0x44>
 800ab78:	21b4      	movs	r1, #180	@ 0xb4
 800ab7a:	4b1c      	ldr	r3, [pc, #112]	@ (800abec <__pow5mult+0xac>)
 800ab7c:	481c      	ldr	r0, [pc, #112]	@ (800abf0 <__pow5mult+0xb0>)
 800ab7e:	31ff      	adds	r1, #255	@ 0xff
 800ab80:	f001 fb78 	bl	800c274 <__assert_func>
 800ab84:	6044      	str	r4, [r0, #4]
 800ab86:	6084      	str	r4, [r0, #8]
 800ab88:	6004      	str	r4, [r0, #0]
 800ab8a:	60c4      	str	r4, [r0, #12]
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	689c      	ldr	r4, [r3, #8]
 800ab90:	9301      	str	r3, [sp, #4]
 800ab92:	2c00      	cmp	r4, #0
 800ab94:	d108      	bne.n	800aba8 <__pow5mult+0x68>
 800ab96:	0038      	movs	r0, r7
 800ab98:	4916      	ldr	r1, [pc, #88]	@ (800abf4 <__pow5mult+0xb4>)
 800ab9a:	f7ff ff07 	bl	800a9ac <__i2b>
 800ab9e:	9b01      	ldr	r3, [sp, #4]
 800aba0:	0004      	movs	r4, r0
 800aba2:	6098      	str	r0, [r3, #8]
 800aba4:	2300      	movs	r3, #0
 800aba6:	6003      	str	r3, [r0, #0]
 800aba8:	2301      	movs	r3, #1
 800abaa:	421d      	tst	r5, r3
 800abac:	d00a      	beq.n	800abc4 <__pow5mult+0x84>
 800abae:	0031      	movs	r1, r6
 800abb0:	0022      	movs	r2, r4
 800abb2:	0038      	movs	r0, r7
 800abb4:	f7ff ff12 	bl	800a9dc <__multiply>
 800abb8:	0031      	movs	r1, r6
 800abba:	9001      	str	r0, [sp, #4]
 800abbc:	0038      	movs	r0, r7
 800abbe:	f7ff fdf1 	bl	800a7a4 <_Bfree>
 800abc2:	9e01      	ldr	r6, [sp, #4]
 800abc4:	106d      	asrs	r5, r5, #1
 800abc6:	d00c      	beq.n	800abe2 <__pow5mult+0xa2>
 800abc8:	6820      	ldr	r0, [r4, #0]
 800abca:	2800      	cmp	r0, #0
 800abcc:	d107      	bne.n	800abde <__pow5mult+0x9e>
 800abce:	0022      	movs	r2, r4
 800abd0:	0021      	movs	r1, r4
 800abd2:	0038      	movs	r0, r7
 800abd4:	f7ff ff02 	bl	800a9dc <__multiply>
 800abd8:	2300      	movs	r3, #0
 800abda:	6020      	str	r0, [r4, #0]
 800abdc:	6003      	str	r3, [r0, #0]
 800abde:	0004      	movs	r4, r0
 800abe0:	e7e2      	b.n	800aba8 <__pow5mult+0x68>
 800abe2:	0030      	movs	r0, r6
 800abe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abe6:	46c0      	nop			@ (mov r8, r8)
 800abe8:	0800ed94 	.word	0x0800ed94
 800abec:	0800ecba 	.word	0x0800ecba
 800abf0:	0800ed3a 	.word	0x0800ed3a
 800abf4:	00000271 	.word	0x00000271

0800abf8 <__lshift>:
 800abf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abfa:	000c      	movs	r4, r1
 800abfc:	0016      	movs	r6, r2
 800abfe:	6923      	ldr	r3, [r4, #16]
 800ac00:	1157      	asrs	r7, r2, #5
 800ac02:	b085      	sub	sp, #20
 800ac04:	18fb      	adds	r3, r7, r3
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	6849      	ldr	r1, [r1, #4]
 800ac0e:	68a3      	ldr	r3, [r4, #8]
 800ac10:	9002      	str	r0, [sp, #8]
 800ac12:	9a00      	ldr	r2, [sp, #0]
 800ac14:	4293      	cmp	r3, r2
 800ac16:	db10      	blt.n	800ac3a <__lshift+0x42>
 800ac18:	9802      	ldr	r0, [sp, #8]
 800ac1a:	f7ff fd7f 	bl	800a71c <_Balloc>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	0001      	movs	r1, r0
 800ac22:	0005      	movs	r5, r0
 800ac24:	001a      	movs	r2, r3
 800ac26:	3114      	adds	r1, #20
 800ac28:	4298      	cmp	r0, r3
 800ac2a:	d10c      	bne.n	800ac46 <__lshift+0x4e>
 800ac2c:	21ef      	movs	r1, #239	@ 0xef
 800ac2e:	002a      	movs	r2, r5
 800ac30:	4b25      	ldr	r3, [pc, #148]	@ (800acc8 <__lshift+0xd0>)
 800ac32:	4826      	ldr	r0, [pc, #152]	@ (800accc <__lshift+0xd4>)
 800ac34:	0049      	lsls	r1, r1, #1
 800ac36:	f001 fb1d 	bl	800c274 <__assert_func>
 800ac3a:	3101      	adds	r1, #1
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	e7e8      	b.n	800ac12 <__lshift+0x1a>
 800ac40:	0098      	lsls	r0, r3, #2
 800ac42:	500a      	str	r2, [r1, r0]
 800ac44:	3301      	adds	r3, #1
 800ac46:	42bb      	cmp	r3, r7
 800ac48:	dbfa      	blt.n	800ac40 <__lshift+0x48>
 800ac4a:	43fb      	mvns	r3, r7
 800ac4c:	17db      	asrs	r3, r3, #31
 800ac4e:	401f      	ands	r7, r3
 800ac50:	00bf      	lsls	r7, r7, #2
 800ac52:	0023      	movs	r3, r4
 800ac54:	201f      	movs	r0, #31
 800ac56:	19c9      	adds	r1, r1, r7
 800ac58:	0037      	movs	r7, r6
 800ac5a:	6922      	ldr	r2, [r4, #16]
 800ac5c:	3314      	adds	r3, #20
 800ac5e:	0092      	lsls	r2, r2, #2
 800ac60:	189a      	adds	r2, r3, r2
 800ac62:	4007      	ands	r7, r0
 800ac64:	4206      	tst	r6, r0
 800ac66:	d029      	beq.n	800acbc <__lshift+0xc4>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	1bc0      	subs	r0, r0, r7
 800ac6c:	9003      	str	r0, [sp, #12]
 800ac6e:	468c      	mov	ip, r1
 800ac70:	2000      	movs	r0, #0
 800ac72:	681e      	ldr	r6, [r3, #0]
 800ac74:	40be      	lsls	r6, r7
 800ac76:	4306      	orrs	r6, r0
 800ac78:	4660      	mov	r0, ip
 800ac7a:	c040      	stmia	r0!, {r6}
 800ac7c:	4684      	mov	ip, r0
 800ac7e:	9e03      	ldr	r6, [sp, #12]
 800ac80:	cb01      	ldmia	r3!, {r0}
 800ac82:	40f0      	lsrs	r0, r6
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d8f4      	bhi.n	800ac72 <__lshift+0x7a>
 800ac88:	0026      	movs	r6, r4
 800ac8a:	3615      	adds	r6, #21
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	42b2      	cmp	r2, r6
 800ac90:	d304      	bcc.n	800ac9c <__lshift+0xa4>
 800ac92:	1b13      	subs	r3, r2, r4
 800ac94:	3b15      	subs	r3, #21
 800ac96:	089b      	lsrs	r3, r3, #2
 800ac98:	3301      	adds	r3, #1
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	50c8      	str	r0, [r1, r3]
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d002      	beq.n	800aca8 <__lshift+0xb0>
 800aca2:	9b01      	ldr	r3, [sp, #4]
 800aca4:	3302      	adds	r3, #2
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	9b00      	ldr	r3, [sp, #0]
 800acaa:	9802      	ldr	r0, [sp, #8]
 800acac:	3b01      	subs	r3, #1
 800acae:	0021      	movs	r1, r4
 800acb0:	612b      	str	r3, [r5, #16]
 800acb2:	f7ff fd77 	bl	800a7a4 <_Bfree>
 800acb6:	0028      	movs	r0, r5
 800acb8:	b005      	add	sp, #20
 800acba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acbc:	cb01      	ldmia	r3!, {r0}
 800acbe:	c101      	stmia	r1!, {r0}
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d8fb      	bhi.n	800acbc <__lshift+0xc4>
 800acc4:	e7f0      	b.n	800aca8 <__lshift+0xb0>
 800acc6:	46c0      	nop			@ (mov r8, r8)
 800acc8:	0800ed29 	.word	0x0800ed29
 800accc:	0800ed3a 	.word	0x0800ed3a

0800acd0 <__mcmp>:
 800acd0:	b530      	push	{r4, r5, lr}
 800acd2:	690b      	ldr	r3, [r1, #16]
 800acd4:	6904      	ldr	r4, [r0, #16]
 800acd6:	0002      	movs	r2, r0
 800acd8:	1ae0      	subs	r0, r4, r3
 800acda:	429c      	cmp	r4, r3
 800acdc:	d10f      	bne.n	800acfe <__mcmp+0x2e>
 800acde:	3214      	adds	r2, #20
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	3114      	adds	r1, #20
 800ace4:	0014      	movs	r4, r2
 800ace6:	18c9      	adds	r1, r1, r3
 800ace8:	18d2      	adds	r2, r2, r3
 800acea:	3a04      	subs	r2, #4
 800acec:	3904      	subs	r1, #4
 800acee:	6815      	ldr	r5, [r2, #0]
 800acf0:	680b      	ldr	r3, [r1, #0]
 800acf2:	429d      	cmp	r5, r3
 800acf4:	d004      	beq.n	800ad00 <__mcmp+0x30>
 800acf6:	2001      	movs	r0, #1
 800acf8:	429d      	cmp	r5, r3
 800acfa:	d200      	bcs.n	800acfe <__mcmp+0x2e>
 800acfc:	3802      	subs	r0, #2
 800acfe:	bd30      	pop	{r4, r5, pc}
 800ad00:	4294      	cmp	r4, r2
 800ad02:	d3f2      	bcc.n	800acea <__mcmp+0x1a>
 800ad04:	e7fb      	b.n	800acfe <__mcmp+0x2e>
	...

0800ad08 <__mdiff>:
 800ad08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad0a:	000c      	movs	r4, r1
 800ad0c:	b087      	sub	sp, #28
 800ad0e:	9000      	str	r0, [sp, #0]
 800ad10:	0011      	movs	r1, r2
 800ad12:	0020      	movs	r0, r4
 800ad14:	0017      	movs	r7, r2
 800ad16:	f7ff ffdb 	bl	800acd0 <__mcmp>
 800ad1a:	1e05      	subs	r5, r0, #0
 800ad1c:	d110      	bne.n	800ad40 <__mdiff+0x38>
 800ad1e:	0001      	movs	r1, r0
 800ad20:	9800      	ldr	r0, [sp, #0]
 800ad22:	f7ff fcfb 	bl	800a71c <_Balloc>
 800ad26:	1e02      	subs	r2, r0, #0
 800ad28:	d104      	bne.n	800ad34 <__mdiff+0x2c>
 800ad2a:	4b40      	ldr	r3, [pc, #256]	@ (800ae2c <__mdiff+0x124>)
 800ad2c:	4840      	ldr	r0, [pc, #256]	@ (800ae30 <__mdiff+0x128>)
 800ad2e:	4941      	ldr	r1, [pc, #260]	@ (800ae34 <__mdiff+0x12c>)
 800ad30:	f001 faa0 	bl	800c274 <__assert_func>
 800ad34:	2301      	movs	r3, #1
 800ad36:	6145      	str	r5, [r0, #20]
 800ad38:	6103      	str	r3, [r0, #16]
 800ad3a:	0010      	movs	r0, r2
 800ad3c:	b007      	add	sp, #28
 800ad3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad40:	2600      	movs	r6, #0
 800ad42:	42b0      	cmp	r0, r6
 800ad44:	da03      	bge.n	800ad4e <__mdiff+0x46>
 800ad46:	0023      	movs	r3, r4
 800ad48:	003c      	movs	r4, r7
 800ad4a:	001f      	movs	r7, r3
 800ad4c:	3601      	adds	r6, #1
 800ad4e:	6861      	ldr	r1, [r4, #4]
 800ad50:	9800      	ldr	r0, [sp, #0]
 800ad52:	f7ff fce3 	bl	800a71c <_Balloc>
 800ad56:	1e02      	subs	r2, r0, #0
 800ad58:	d103      	bne.n	800ad62 <__mdiff+0x5a>
 800ad5a:	4b34      	ldr	r3, [pc, #208]	@ (800ae2c <__mdiff+0x124>)
 800ad5c:	4834      	ldr	r0, [pc, #208]	@ (800ae30 <__mdiff+0x128>)
 800ad5e:	4936      	ldr	r1, [pc, #216]	@ (800ae38 <__mdiff+0x130>)
 800ad60:	e7e6      	b.n	800ad30 <__mdiff+0x28>
 800ad62:	6923      	ldr	r3, [r4, #16]
 800ad64:	3414      	adds	r4, #20
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	18e3      	adds	r3, r4, r3
 800ad6c:	0021      	movs	r1, r4
 800ad6e:	9401      	str	r4, [sp, #4]
 800ad70:	003c      	movs	r4, r7
 800ad72:	9302      	str	r3, [sp, #8]
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	3414      	adds	r4, #20
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	18e3      	adds	r3, r4, r3
 800ad7c:	9303      	str	r3, [sp, #12]
 800ad7e:	0003      	movs	r3, r0
 800ad80:	60c6      	str	r6, [r0, #12]
 800ad82:	468c      	mov	ip, r1
 800ad84:	2000      	movs	r0, #0
 800ad86:	3314      	adds	r3, #20
 800ad88:	9304      	str	r3, [sp, #16]
 800ad8a:	9305      	str	r3, [sp, #20]
 800ad8c:	4663      	mov	r3, ip
 800ad8e:	cb20      	ldmia	r3!, {r5}
 800ad90:	b2a9      	uxth	r1, r5
 800ad92:	000e      	movs	r6, r1
 800ad94:	469c      	mov	ip, r3
 800ad96:	cc08      	ldmia	r4!, {r3}
 800ad98:	0c2d      	lsrs	r5, r5, #16
 800ad9a:	b299      	uxth	r1, r3
 800ad9c:	1a71      	subs	r1, r6, r1
 800ad9e:	1809      	adds	r1, r1, r0
 800ada0:	0c1b      	lsrs	r3, r3, #16
 800ada2:	1408      	asrs	r0, r1, #16
 800ada4:	1aeb      	subs	r3, r5, r3
 800ada6:	181b      	adds	r3, r3, r0
 800ada8:	1418      	asrs	r0, r3, #16
 800adaa:	b289      	uxth	r1, r1
 800adac:	041b      	lsls	r3, r3, #16
 800adae:	4319      	orrs	r1, r3
 800adb0:	9b05      	ldr	r3, [sp, #20]
 800adb2:	c302      	stmia	r3!, {r1}
 800adb4:	9305      	str	r3, [sp, #20]
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	42a3      	cmp	r3, r4
 800adba:	d8e7      	bhi.n	800ad8c <__mdiff+0x84>
 800adbc:	0039      	movs	r1, r7
 800adbe:	9c03      	ldr	r4, [sp, #12]
 800adc0:	3115      	adds	r1, #21
 800adc2:	2304      	movs	r3, #4
 800adc4:	428c      	cmp	r4, r1
 800adc6:	d304      	bcc.n	800add2 <__mdiff+0xca>
 800adc8:	1be3      	subs	r3, r4, r7
 800adca:	3b15      	subs	r3, #21
 800adcc:	089b      	lsrs	r3, r3, #2
 800adce:	3301      	adds	r3, #1
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	9901      	ldr	r1, [sp, #4]
 800add4:	18cd      	adds	r5, r1, r3
 800add6:	9904      	ldr	r1, [sp, #16]
 800add8:	002e      	movs	r6, r5
 800adda:	18cb      	adds	r3, r1, r3
 800addc:	001f      	movs	r7, r3
 800adde:	9902      	ldr	r1, [sp, #8]
 800ade0:	428e      	cmp	r6, r1
 800ade2:	d311      	bcc.n	800ae08 <__mdiff+0x100>
 800ade4:	9c02      	ldr	r4, [sp, #8]
 800ade6:	1ee9      	subs	r1, r5, #3
 800ade8:	2000      	movs	r0, #0
 800adea:	428c      	cmp	r4, r1
 800adec:	d304      	bcc.n	800adf8 <__mdiff+0xf0>
 800adee:	0021      	movs	r1, r4
 800adf0:	3103      	adds	r1, #3
 800adf2:	1b49      	subs	r1, r1, r5
 800adf4:	0889      	lsrs	r1, r1, #2
 800adf6:	0088      	lsls	r0, r1, #2
 800adf8:	181b      	adds	r3, r3, r0
 800adfa:	3b04      	subs	r3, #4
 800adfc:	6819      	ldr	r1, [r3, #0]
 800adfe:	2900      	cmp	r1, #0
 800ae00:	d010      	beq.n	800ae24 <__mdiff+0x11c>
 800ae02:	9b00      	ldr	r3, [sp, #0]
 800ae04:	6113      	str	r3, [r2, #16]
 800ae06:	e798      	b.n	800ad3a <__mdiff+0x32>
 800ae08:	4684      	mov	ip, r0
 800ae0a:	ce02      	ldmia	r6!, {r1}
 800ae0c:	b288      	uxth	r0, r1
 800ae0e:	4460      	add	r0, ip
 800ae10:	1400      	asrs	r0, r0, #16
 800ae12:	0c0c      	lsrs	r4, r1, #16
 800ae14:	1904      	adds	r4, r0, r4
 800ae16:	4461      	add	r1, ip
 800ae18:	1420      	asrs	r0, r4, #16
 800ae1a:	b289      	uxth	r1, r1
 800ae1c:	0424      	lsls	r4, r4, #16
 800ae1e:	4321      	orrs	r1, r4
 800ae20:	c702      	stmia	r7!, {r1}
 800ae22:	e7dc      	b.n	800adde <__mdiff+0xd6>
 800ae24:	9900      	ldr	r1, [sp, #0]
 800ae26:	3901      	subs	r1, #1
 800ae28:	9100      	str	r1, [sp, #0]
 800ae2a:	e7e6      	b.n	800adfa <__mdiff+0xf2>
 800ae2c:	0800ed29 	.word	0x0800ed29
 800ae30:	0800ed3a 	.word	0x0800ed3a
 800ae34:	00000237 	.word	0x00000237
 800ae38:	00000245 	.word	0x00000245

0800ae3c <__ulp>:
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	2400      	movs	r4, #0
 800ae40:	4b0c      	ldr	r3, [pc, #48]	@ (800ae74 <__ulp+0x38>)
 800ae42:	4a0d      	ldr	r2, [pc, #52]	@ (800ae78 <__ulp+0x3c>)
 800ae44:	400b      	ands	r3, r1
 800ae46:	189b      	adds	r3, r3, r2
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	dc06      	bgt.n	800ae5a <__ulp+0x1e>
 800ae4c:	425b      	negs	r3, r3
 800ae4e:	151a      	asrs	r2, r3, #20
 800ae50:	2a13      	cmp	r2, #19
 800ae52:	dc05      	bgt.n	800ae60 <__ulp+0x24>
 800ae54:	2380      	movs	r3, #128	@ 0x80
 800ae56:	031b      	lsls	r3, r3, #12
 800ae58:	4113      	asrs	r3, r2
 800ae5a:	0019      	movs	r1, r3
 800ae5c:	0020      	movs	r0, r4
 800ae5e:	bd10      	pop	{r4, pc}
 800ae60:	3a14      	subs	r2, #20
 800ae62:	2401      	movs	r4, #1
 800ae64:	2a1e      	cmp	r2, #30
 800ae66:	dc02      	bgt.n	800ae6e <__ulp+0x32>
 800ae68:	2480      	movs	r4, #128	@ 0x80
 800ae6a:	0624      	lsls	r4, r4, #24
 800ae6c:	40d4      	lsrs	r4, r2
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e7f3      	b.n	800ae5a <__ulp+0x1e>
 800ae72:	46c0      	nop			@ (mov r8, r8)
 800ae74:	7ff00000 	.word	0x7ff00000
 800ae78:	fcc00000 	.word	0xfcc00000

0800ae7c <__b2d>:
 800ae7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae7e:	0006      	movs	r6, r0
 800ae80:	6903      	ldr	r3, [r0, #16]
 800ae82:	3614      	adds	r6, #20
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	18f3      	adds	r3, r6, r3
 800ae88:	1f1d      	subs	r5, r3, #4
 800ae8a:	682c      	ldr	r4, [r5, #0]
 800ae8c:	000f      	movs	r7, r1
 800ae8e:	0020      	movs	r0, r4
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	f7ff fd3b 	bl	800a90c <__hi0bits>
 800ae96:	2220      	movs	r2, #32
 800ae98:	1a12      	subs	r2, r2, r0
 800ae9a:	603a      	str	r2, [r7, #0]
 800ae9c:	0003      	movs	r3, r0
 800ae9e:	4a1c      	ldr	r2, [pc, #112]	@ (800af10 <__b2d+0x94>)
 800aea0:	280a      	cmp	r0, #10
 800aea2:	dc15      	bgt.n	800aed0 <__b2d+0x54>
 800aea4:	210b      	movs	r1, #11
 800aea6:	0027      	movs	r7, r4
 800aea8:	1a09      	subs	r1, r1, r0
 800aeaa:	40cf      	lsrs	r7, r1
 800aeac:	433a      	orrs	r2, r7
 800aeae:	468c      	mov	ip, r1
 800aeb0:	0011      	movs	r1, r2
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	42ae      	cmp	r6, r5
 800aeb6:	d202      	bcs.n	800aebe <__b2d+0x42>
 800aeb8:	9a01      	ldr	r2, [sp, #4]
 800aeba:	3a08      	subs	r2, #8
 800aebc:	6812      	ldr	r2, [r2, #0]
 800aebe:	3315      	adds	r3, #21
 800aec0:	409c      	lsls	r4, r3
 800aec2:	4663      	mov	r3, ip
 800aec4:	0027      	movs	r7, r4
 800aec6:	40da      	lsrs	r2, r3
 800aec8:	4317      	orrs	r7, r2
 800aeca:	0038      	movs	r0, r7
 800aecc:	b003      	add	sp, #12
 800aece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed0:	2700      	movs	r7, #0
 800aed2:	42ae      	cmp	r6, r5
 800aed4:	d202      	bcs.n	800aedc <__b2d+0x60>
 800aed6:	9d01      	ldr	r5, [sp, #4]
 800aed8:	3d08      	subs	r5, #8
 800aeda:	682f      	ldr	r7, [r5, #0]
 800aedc:	210b      	movs	r1, #11
 800aede:	4249      	negs	r1, r1
 800aee0:	468c      	mov	ip, r1
 800aee2:	449c      	add	ip, r3
 800aee4:	2b0b      	cmp	r3, #11
 800aee6:	d010      	beq.n	800af0a <__b2d+0x8e>
 800aee8:	4661      	mov	r1, ip
 800aeea:	2320      	movs	r3, #32
 800aeec:	408c      	lsls	r4, r1
 800aeee:	1a5b      	subs	r3, r3, r1
 800aef0:	0039      	movs	r1, r7
 800aef2:	40d9      	lsrs	r1, r3
 800aef4:	430c      	orrs	r4, r1
 800aef6:	4322      	orrs	r2, r4
 800aef8:	0011      	movs	r1, r2
 800aefa:	2200      	movs	r2, #0
 800aefc:	42b5      	cmp	r5, r6
 800aefe:	d901      	bls.n	800af04 <__b2d+0x88>
 800af00:	3d04      	subs	r5, #4
 800af02:	682a      	ldr	r2, [r5, #0]
 800af04:	4664      	mov	r4, ip
 800af06:	40a7      	lsls	r7, r4
 800af08:	e7dd      	b.n	800aec6 <__b2d+0x4a>
 800af0a:	4322      	orrs	r2, r4
 800af0c:	0011      	movs	r1, r2
 800af0e:	e7dc      	b.n	800aeca <__b2d+0x4e>
 800af10:	3ff00000 	.word	0x3ff00000

0800af14 <__d2b>:
 800af14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af16:	2101      	movs	r1, #1
 800af18:	0016      	movs	r6, r2
 800af1a:	001f      	movs	r7, r3
 800af1c:	f7ff fbfe 	bl	800a71c <_Balloc>
 800af20:	1e04      	subs	r4, r0, #0
 800af22:	d105      	bne.n	800af30 <__d2b+0x1c>
 800af24:	0022      	movs	r2, r4
 800af26:	4b25      	ldr	r3, [pc, #148]	@ (800afbc <__d2b+0xa8>)
 800af28:	4825      	ldr	r0, [pc, #148]	@ (800afc0 <__d2b+0xac>)
 800af2a:	4926      	ldr	r1, [pc, #152]	@ (800afc4 <__d2b+0xb0>)
 800af2c:	f001 f9a2 	bl	800c274 <__assert_func>
 800af30:	033b      	lsls	r3, r7, #12
 800af32:	007d      	lsls	r5, r7, #1
 800af34:	0b1b      	lsrs	r3, r3, #12
 800af36:	0d6d      	lsrs	r5, r5, #21
 800af38:	d002      	beq.n	800af40 <__d2b+0x2c>
 800af3a:	2280      	movs	r2, #128	@ 0x80
 800af3c:	0352      	lsls	r2, r2, #13
 800af3e:	4313      	orrs	r3, r2
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	2e00      	cmp	r6, #0
 800af44:	d025      	beq.n	800af92 <__d2b+0x7e>
 800af46:	4668      	mov	r0, sp
 800af48:	9600      	str	r6, [sp, #0]
 800af4a:	f7ff fd00 	bl	800a94e <__lo0bits>
 800af4e:	9b01      	ldr	r3, [sp, #4]
 800af50:	9900      	ldr	r1, [sp, #0]
 800af52:	2800      	cmp	r0, #0
 800af54:	d01b      	beq.n	800af8e <__d2b+0x7a>
 800af56:	2220      	movs	r2, #32
 800af58:	001e      	movs	r6, r3
 800af5a:	1a12      	subs	r2, r2, r0
 800af5c:	4096      	lsls	r6, r2
 800af5e:	0032      	movs	r2, r6
 800af60:	40c3      	lsrs	r3, r0
 800af62:	430a      	orrs	r2, r1
 800af64:	6162      	str	r2, [r4, #20]
 800af66:	9301      	str	r3, [sp, #4]
 800af68:	9e01      	ldr	r6, [sp, #4]
 800af6a:	61a6      	str	r6, [r4, #24]
 800af6c:	1e73      	subs	r3, r6, #1
 800af6e:	419e      	sbcs	r6, r3
 800af70:	3601      	adds	r6, #1
 800af72:	6126      	str	r6, [r4, #16]
 800af74:	2d00      	cmp	r5, #0
 800af76:	d014      	beq.n	800afa2 <__d2b+0x8e>
 800af78:	2635      	movs	r6, #53	@ 0x35
 800af7a:	4b13      	ldr	r3, [pc, #76]	@ (800afc8 <__d2b+0xb4>)
 800af7c:	18ed      	adds	r5, r5, r3
 800af7e:	9b08      	ldr	r3, [sp, #32]
 800af80:	182d      	adds	r5, r5, r0
 800af82:	601d      	str	r5, [r3, #0]
 800af84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af86:	1a36      	subs	r6, r6, r0
 800af88:	601e      	str	r6, [r3, #0]
 800af8a:	0020      	movs	r0, r4
 800af8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af8e:	6161      	str	r1, [r4, #20]
 800af90:	e7ea      	b.n	800af68 <__d2b+0x54>
 800af92:	a801      	add	r0, sp, #4
 800af94:	f7ff fcdb 	bl	800a94e <__lo0bits>
 800af98:	9b01      	ldr	r3, [sp, #4]
 800af9a:	2601      	movs	r6, #1
 800af9c:	6163      	str	r3, [r4, #20]
 800af9e:	3020      	adds	r0, #32
 800afa0:	e7e7      	b.n	800af72 <__d2b+0x5e>
 800afa2:	4b0a      	ldr	r3, [pc, #40]	@ (800afcc <__d2b+0xb8>)
 800afa4:	18c0      	adds	r0, r0, r3
 800afa6:	9b08      	ldr	r3, [sp, #32]
 800afa8:	6018      	str	r0, [r3, #0]
 800afaa:	4b09      	ldr	r3, [pc, #36]	@ (800afd0 <__d2b+0xbc>)
 800afac:	18f3      	adds	r3, r6, r3
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	18e3      	adds	r3, r4, r3
 800afb2:	6958      	ldr	r0, [r3, #20]
 800afb4:	f7ff fcaa 	bl	800a90c <__hi0bits>
 800afb8:	0176      	lsls	r6, r6, #5
 800afba:	e7e3      	b.n	800af84 <__d2b+0x70>
 800afbc:	0800ed29 	.word	0x0800ed29
 800afc0:	0800ed3a 	.word	0x0800ed3a
 800afc4:	0000030f 	.word	0x0000030f
 800afc8:	fffffbcd 	.word	0xfffffbcd
 800afcc:	fffffbce 	.word	0xfffffbce
 800afd0:	3fffffff 	.word	0x3fffffff

0800afd4 <__ratio>:
 800afd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afd6:	b087      	sub	sp, #28
 800afd8:	000f      	movs	r7, r1
 800afda:	a904      	add	r1, sp, #16
 800afdc:	0006      	movs	r6, r0
 800afde:	f7ff ff4d 	bl	800ae7c <__b2d>
 800afe2:	9000      	str	r0, [sp, #0]
 800afe4:	9101      	str	r1, [sp, #4]
 800afe6:	9b00      	ldr	r3, [sp, #0]
 800afe8:	9c01      	ldr	r4, [sp, #4]
 800afea:	0038      	movs	r0, r7
 800afec:	a905      	add	r1, sp, #20
 800afee:	9302      	str	r3, [sp, #8]
 800aff0:	9403      	str	r4, [sp, #12]
 800aff2:	f7ff ff43 	bl	800ae7c <__b2d>
 800aff6:	000d      	movs	r5, r1
 800aff8:	0002      	movs	r2, r0
 800affa:	000b      	movs	r3, r1
 800affc:	6930      	ldr	r0, [r6, #16]
 800affe:	6939      	ldr	r1, [r7, #16]
 800b000:	9e04      	ldr	r6, [sp, #16]
 800b002:	1a40      	subs	r0, r0, r1
 800b004:	9905      	ldr	r1, [sp, #20]
 800b006:	0140      	lsls	r0, r0, #5
 800b008:	1a71      	subs	r1, r6, r1
 800b00a:	1841      	adds	r1, r0, r1
 800b00c:	0508      	lsls	r0, r1, #20
 800b00e:	2900      	cmp	r1, #0
 800b010:	dd08      	ble.n	800b024 <__ratio+0x50>
 800b012:	9901      	ldr	r1, [sp, #4]
 800b014:	1841      	adds	r1, r0, r1
 800b016:	9103      	str	r1, [sp, #12]
 800b018:	9802      	ldr	r0, [sp, #8]
 800b01a:	9903      	ldr	r1, [sp, #12]
 800b01c:	f7f6 fd24 	bl	8001a68 <__aeabi_ddiv>
 800b020:	b007      	add	sp, #28
 800b022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b024:	1a2b      	subs	r3, r5, r0
 800b026:	e7f7      	b.n	800b018 <__ratio+0x44>

0800b028 <__copybits>:
 800b028:	b570      	push	{r4, r5, r6, lr}
 800b02a:	0014      	movs	r4, r2
 800b02c:	0005      	movs	r5, r0
 800b02e:	3901      	subs	r1, #1
 800b030:	6913      	ldr	r3, [r2, #16]
 800b032:	1149      	asrs	r1, r1, #5
 800b034:	3101      	adds	r1, #1
 800b036:	0089      	lsls	r1, r1, #2
 800b038:	3414      	adds	r4, #20
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	1841      	adds	r1, r0, r1
 800b03e:	18e3      	adds	r3, r4, r3
 800b040:	42a3      	cmp	r3, r4
 800b042:	d80d      	bhi.n	800b060 <__copybits+0x38>
 800b044:	0014      	movs	r4, r2
 800b046:	3411      	adds	r4, #17
 800b048:	2500      	movs	r5, #0
 800b04a:	429c      	cmp	r4, r3
 800b04c:	d803      	bhi.n	800b056 <__copybits+0x2e>
 800b04e:	1a9b      	subs	r3, r3, r2
 800b050:	3b11      	subs	r3, #17
 800b052:	089b      	lsrs	r3, r3, #2
 800b054:	009d      	lsls	r5, r3, #2
 800b056:	2300      	movs	r3, #0
 800b058:	1940      	adds	r0, r0, r5
 800b05a:	4281      	cmp	r1, r0
 800b05c:	d803      	bhi.n	800b066 <__copybits+0x3e>
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	cc40      	ldmia	r4!, {r6}
 800b062:	c540      	stmia	r5!, {r6}
 800b064:	e7ec      	b.n	800b040 <__copybits+0x18>
 800b066:	c008      	stmia	r0!, {r3}
 800b068:	e7f7      	b.n	800b05a <__copybits+0x32>

0800b06a <__any_on>:
 800b06a:	0002      	movs	r2, r0
 800b06c:	6900      	ldr	r0, [r0, #16]
 800b06e:	b510      	push	{r4, lr}
 800b070:	3214      	adds	r2, #20
 800b072:	114b      	asrs	r3, r1, #5
 800b074:	4298      	cmp	r0, r3
 800b076:	db13      	blt.n	800b0a0 <__any_on+0x36>
 800b078:	dd0c      	ble.n	800b094 <__any_on+0x2a>
 800b07a:	241f      	movs	r4, #31
 800b07c:	0008      	movs	r0, r1
 800b07e:	4020      	ands	r0, r4
 800b080:	4221      	tst	r1, r4
 800b082:	d007      	beq.n	800b094 <__any_on+0x2a>
 800b084:	0099      	lsls	r1, r3, #2
 800b086:	588c      	ldr	r4, [r1, r2]
 800b088:	0021      	movs	r1, r4
 800b08a:	40c1      	lsrs	r1, r0
 800b08c:	4081      	lsls	r1, r0
 800b08e:	2001      	movs	r0, #1
 800b090:	428c      	cmp	r4, r1
 800b092:	d104      	bne.n	800b09e <__any_on+0x34>
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	18d3      	adds	r3, r2, r3
 800b098:	4293      	cmp	r3, r2
 800b09a:	d803      	bhi.n	800b0a4 <__any_on+0x3a>
 800b09c:	2000      	movs	r0, #0
 800b09e:	bd10      	pop	{r4, pc}
 800b0a0:	0003      	movs	r3, r0
 800b0a2:	e7f7      	b.n	800b094 <__any_on+0x2a>
 800b0a4:	3b04      	subs	r3, #4
 800b0a6:	6819      	ldr	r1, [r3, #0]
 800b0a8:	2900      	cmp	r1, #0
 800b0aa:	d0f5      	beq.n	800b098 <__any_on+0x2e>
 800b0ac:	2001      	movs	r0, #1
 800b0ae:	e7f6      	b.n	800b09e <__any_on+0x34>

0800b0b0 <sulp>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	0016      	movs	r6, r2
 800b0b4:	000d      	movs	r5, r1
 800b0b6:	f7ff fec1 	bl	800ae3c <__ulp>
 800b0ba:	2e00      	cmp	r6, #0
 800b0bc:	d00d      	beq.n	800b0da <sulp+0x2a>
 800b0be:	236b      	movs	r3, #107	@ 0x6b
 800b0c0:	006a      	lsls	r2, r5, #1
 800b0c2:	0d52      	lsrs	r2, r2, #21
 800b0c4:	1a9b      	subs	r3, r3, r2
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	dd07      	ble.n	800b0da <sulp+0x2a>
 800b0ca:	2400      	movs	r4, #0
 800b0cc:	4a03      	ldr	r2, [pc, #12]	@ (800b0dc <sulp+0x2c>)
 800b0ce:	051b      	lsls	r3, r3, #20
 800b0d0:	189d      	adds	r5, r3, r2
 800b0d2:	002b      	movs	r3, r5
 800b0d4:	0022      	movs	r2, r4
 800b0d6:	f7f7 f90b 	bl	80022f0 <__aeabi_dmul>
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	3ff00000 	.word	0x3ff00000

0800b0e0 <_strtod_l>:
 800b0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0e2:	b0a3      	sub	sp, #140	@ 0x8c
 800b0e4:	921b      	str	r2, [sp, #108]	@ 0x6c
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	2600      	movs	r6, #0
 800b0ea:	2700      	movs	r7, #0
 800b0ec:	9005      	str	r0, [sp, #20]
 800b0ee:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0f0:	921e      	str	r2, [sp, #120]	@ 0x78
 800b0f2:	911d      	str	r1, [sp, #116]	@ 0x74
 800b0f4:	780a      	ldrb	r2, [r1, #0]
 800b0f6:	2a2b      	cmp	r2, #43	@ 0x2b
 800b0f8:	d053      	beq.n	800b1a2 <_strtod_l+0xc2>
 800b0fa:	d83f      	bhi.n	800b17c <_strtod_l+0x9c>
 800b0fc:	2a0d      	cmp	r2, #13
 800b0fe:	d839      	bhi.n	800b174 <_strtod_l+0x94>
 800b100:	2a08      	cmp	r2, #8
 800b102:	d839      	bhi.n	800b178 <_strtod_l+0x98>
 800b104:	2a00      	cmp	r2, #0
 800b106:	d042      	beq.n	800b18e <_strtod_l+0xae>
 800b108:	2200      	movs	r2, #0
 800b10a:	9212      	str	r2, [sp, #72]	@ 0x48
 800b10c:	2100      	movs	r1, #0
 800b10e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800b110:	910c      	str	r1, [sp, #48]	@ 0x30
 800b112:	782a      	ldrb	r2, [r5, #0]
 800b114:	2a30      	cmp	r2, #48	@ 0x30
 800b116:	d000      	beq.n	800b11a <_strtod_l+0x3a>
 800b118:	e083      	b.n	800b222 <_strtod_l+0x142>
 800b11a:	786a      	ldrb	r2, [r5, #1]
 800b11c:	3120      	adds	r1, #32
 800b11e:	438a      	bics	r2, r1
 800b120:	2a58      	cmp	r2, #88	@ 0x58
 800b122:	d000      	beq.n	800b126 <_strtod_l+0x46>
 800b124:	e073      	b.n	800b20e <_strtod_l+0x12e>
 800b126:	9302      	str	r3, [sp, #8]
 800b128:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b12a:	4a95      	ldr	r2, [pc, #596]	@ (800b380 <_strtod_l+0x2a0>)
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	ab1e      	add	r3, sp, #120	@ 0x78
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	9805      	ldr	r0, [sp, #20]
 800b134:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b136:	a91d      	add	r1, sp, #116	@ 0x74
 800b138:	f001 f950 	bl	800c3dc <__gethex>
 800b13c:	230f      	movs	r3, #15
 800b13e:	0002      	movs	r2, r0
 800b140:	401a      	ands	r2, r3
 800b142:	0004      	movs	r4, r0
 800b144:	9206      	str	r2, [sp, #24]
 800b146:	4218      	tst	r0, r3
 800b148:	d005      	beq.n	800b156 <_strtod_l+0x76>
 800b14a:	2a06      	cmp	r2, #6
 800b14c:	d12b      	bne.n	800b1a6 <_strtod_l+0xc6>
 800b14e:	2300      	movs	r3, #0
 800b150:	3501      	adds	r5, #1
 800b152:	951d      	str	r5, [sp, #116]	@ 0x74
 800b154:	9312      	str	r3, [sp, #72]	@ 0x48
 800b156:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d002      	beq.n	800b162 <_strtod_l+0x82>
 800b15c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b15e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b160:	6013      	str	r3, [r2, #0]
 800b162:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b164:	2b00      	cmp	r3, #0
 800b166:	d019      	beq.n	800b19c <_strtod_l+0xbc>
 800b168:	2380      	movs	r3, #128	@ 0x80
 800b16a:	0030      	movs	r0, r6
 800b16c:	061b      	lsls	r3, r3, #24
 800b16e:	18f9      	adds	r1, r7, r3
 800b170:	b023      	add	sp, #140	@ 0x8c
 800b172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b174:	2a20      	cmp	r2, #32
 800b176:	d1c7      	bne.n	800b108 <_strtod_l+0x28>
 800b178:	3101      	adds	r1, #1
 800b17a:	e7ba      	b.n	800b0f2 <_strtod_l+0x12>
 800b17c:	2a2d      	cmp	r2, #45	@ 0x2d
 800b17e:	d1c3      	bne.n	800b108 <_strtod_l+0x28>
 800b180:	3a2c      	subs	r2, #44	@ 0x2c
 800b182:	9212      	str	r2, [sp, #72]	@ 0x48
 800b184:	1c4a      	adds	r2, r1, #1
 800b186:	921d      	str	r2, [sp, #116]	@ 0x74
 800b188:	784a      	ldrb	r2, [r1, #1]
 800b18a:	2a00      	cmp	r2, #0
 800b18c:	d1be      	bne.n	800b10c <_strtod_l+0x2c>
 800b18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b190:	931d      	str	r3, [sp, #116]	@ 0x74
 800b192:	2300      	movs	r3, #0
 800b194:	9312      	str	r3, [sp, #72]	@ 0x48
 800b196:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1df      	bne.n	800b15c <_strtod_l+0x7c>
 800b19c:	0030      	movs	r0, r6
 800b19e:	0039      	movs	r1, r7
 800b1a0:	e7e6      	b.n	800b170 <_strtod_l+0x90>
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	e7ed      	b.n	800b182 <_strtod_l+0xa2>
 800b1a6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800b1a8:	2a00      	cmp	r2, #0
 800b1aa:	d007      	beq.n	800b1bc <_strtod_l+0xdc>
 800b1ac:	2135      	movs	r1, #53	@ 0x35
 800b1ae:	a820      	add	r0, sp, #128	@ 0x80
 800b1b0:	f7ff ff3a 	bl	800b028 <__copybits>
 800b1b4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b1b6:	9805      	ldr	r0, [sp, #20]
 800b1b8:	f7ff faf4 	bl	800a7a4 <_Bfree>
 800b1bc:	9806      	ldr	r0, [sp, #24]
 800b1be:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b1c0:	3801      	subs	r0, #1
 800b1c2:	2804      	cmp	r0, #4
 800b1c4:	d806      	bhi.n	800b1d4 <_strtod_l+0xf4>
 800b1c6:	f7f4 ffa5 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b1ca:	0312      	.short	0x0312
 800b1cc:	1e1c      	.short	0x1e1c
 800b1ce:	12          	.byte	0x12
 800b1cf:	00          	.byte	0x00
 800b1d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b1d2:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800b1d4:	05e4      	lsls	r4, r4, #23
 800b1d6:	d502      	bpl.n	800b1de <_strtod_l+0xfe>
 800b1d8:	2380      	movs	r3, #128	@ 0x80
 800b1da:	061b      	lsls	r3, r3, #24
 800b1dc:	431f      	orrs	r7, r3
 800b1de:	4b69      	ldr	r3, [pc, #420]	@ (800b384 <_strtod_l+0x2a4>)
 800b1e0:	423b      	tst	r3, r7
 800b1e2:	d1b8      	bne.n	800b156 <_strtod_l+0x76>
 800b1e4:	f7fe fb92 	bl	800990c <__errno>
 800b1e8:	2322      	movs	r3, #34	@ 0x22
 800b1ea:	6003      	str	r3, [r0, #0]
 800b1ec:	e7b3      	b.n	800b156 <_strtod_l+0x76>
 800b1ee:	4966      	ldr	r1, [pc, #408]	@ (800b388 <_strtod_l+0x2a8>)
 800b1f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b1f2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b1f4:	400a      	ands	r2, r1
 800b1f6:	4965      	ldr	r1, [pc, #404]	@ (800b38c <_strtod_l+0x2ac>)
 800b1f8:	185b      	adds	r3, r3, r1
 800b1fa:	051b      	lsls	r3, r3, #20
 800b1fc:	431a      	orrs	r2, r3
 800b1fe:	0017      	movs	r7, r2
 800b200:	e7e8      	b.n	800b1d4 <_strtod_l+0xf4>
 800b202:	4f60      	ldr	r7, [pc, #384]	@ (800b384 <_strtod_l+0x2a4>)
 800b204:	e7e6      	b.n	800b1d4 <_strtod_l+0xf4>
 800b206:	2601      	movs	r6, #1
 800b208:	4f61      	ldr	r7, [pc, #388]	@ (800b390 <_strtod_l+0x2b0>)
 800b20a:	4276      	negs	r6, r6
 800b20c:	e7e2      	b.n	800b1d4 <_strtod_l+0xf4>
 800b20e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	921d      	str	r2, [sp, #116]	@ 0x74
 800b214:	785b      	ldrb	r3, [r3, #1]
 800b216:	2b30      	cmp	r3, #48	@ 0x30
 800b218:	d0f9      	beq.n	800b20e <_strtod_l+0x12e>
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d09b      	beq.n	800b156 <_strtod_l+0x76>
 800b21e:	2301      	movs	r3, #1
 800b220:	930c      	str	r3, [sp, #48]	@ 0x30
 800b222:	2500      	movs	r5, #0
 800b224:	220a      	movs	r2, #10
 800b226:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b228:	950d      	str	r5, [sp, #52]	@ 0x34
 800b22a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b22c:	9508      	str	r5, [sp, #32]
 800b22e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800b230:	7804      	ldrb	r4, [r0, #0]
 800b232:	0023      	movs	r3, r4
 800b234:	3b30      	subs	r3, #48	@ 0x30
 800b236:	b2d9      	uxtb	r1, r3
 800b238:	2909      	cmp	r1, #9
 800b23a:	d927      	bls.n	800b28c <_strtod_l+0x1ac>
 800b23c:	2201      	movs	r2, #1
 800b23e:	4955      	ldr	r1, [pc, #340]	@ (800b394 <_strtod_l+0x2b4>)
 800b240:	f000 fff8 	bl	800c234 <strncmp>
 800b244:	2800      	cmp	r0, #0
 800b246:	d031      	beq.n	800b2ac <_strtod_l+0x1cc>
 800b248:	2000      	movs	r0, #0
 800b24a:	0023      	movs	r3, r4
 800b24c:	4684      	mov	ip, r0
 800b24e:	9a08      	ldr	r2, [sp, #32]
 800b250:	900e      	str	r0, [sp, #56]	@ 0x38
 800b252:	9206      	str	r2, [sp, #24]
 800b254:	2220      	movs	r2, #32
 800b256:	0019      	movs	r1, r3
 800b258:	4391      	bics	r1, r2
 800b25a:	000a      	movs	r2, r1
 800b25c:	2100      	movs	r1, #0
 800b25e:	9107      	str	r1, [sp, #28]
 800b260:	2a45      	cmp	r2, #69	@ 0x45
 800b262:	d000      	beq.n	800b266 <_strtod_l+0x186>
 800b264:	e0c0      	b.n	800b3e8 <_strtod_l+0x308>
 800b266:	9b06      	ldr	r3, [sp, #24]
 800b268:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b26a:	4303      	orrs	r3, r0
 800b26c:	4313      	orrs	r3, r2
 800b26e:	428b      	cmp	r3, r1
 800b270:	d08d      	beq.n	800b18e <_strtod_l+0xae>
 800b272:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b274:	9309      	str	r3, [sp, #36]	@ 0x24
 800b276:	3301      	adds	r3, #1
 800b278:	931d      	str	r3, [sp, #116]	@ 0x74
 800b27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b27c:	785b      	ldrb	r3, [r3, #1]
 800b27e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b280:	d070      	beq.n	800b364 <_strtod_l+0x284>
 800b282:	000c      	movs	r4, r1
 800b284:	2b2d      	cmp	r3, #45	@ 0x2d
 800b286:	d173      	bne.n	800b370 <_strtod_l+0x290>
 800b288:	2401      	movs	r4, #1
 800b28a:	e06c      	b.n	800b366 <_strtod_l+0x286>
 800b28c:	9908      	ldr	r1, [sp, #32]
 800b28e:	2908      	cmp	r1, #8
 800b290:	dc09      	bgt.n	800b2a6 <_strtod_l+0x1c6>
 800b292:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b294:	4351      	muls	r1, r2
 800b296:	185b      	adds	r3, r3, r1
 800b298:	930d      	str	r3, [sp, #52]	@ 0x34
 800b29a:	9b08      	ldr	r3, [sp, #32]
 800b29c:	3001      	adds	r0, #1
 800b29e:	3301      	adds	r3, #1
 800b2a0:	9308      	str	r3, [sp, #32]
 800b2a2:	901d      	str	r0, [sp, #116]	@ 0x74
 800b2a4:	e7c3      	b.n	800b22e <_strtod_l+0x14e>
 800b2a6:	4355      	muls	r5, r2
 800b2a8:	195d      	adds	r5, r3, r5
 800b2aa:	e7f6      	b.n	800b29a <_strtod_l+0x1ba>
 800b2ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	921d      	str	r2, [sp, #116]	@ 0x74
 800b2b2:	9a08      	ldr	r2, [sp, #32]
 800b2b4:	785b      	ldrb	r3, [r3, #1]
 800b2b6:	2a00      	cmp	r2, #0
 800b2b8:	d03a      	beq.n	800b330 <_strtod_l+0x250>
 800b2ba:	900e      	str	r0, [sp, #56]	@ 0x38
 800b2bc:	9206      	str	r2, [sp, #24]
 800b2be:	001a      	movs	r2, r3
 800b2c0:	3a30      	subs	r2, #48	@ 0x30
 800b2c2:	2a09      	cmp	r2, #9
 800b2c4:	d912      	bls.n	800b2ec <_strtod_l+0x20c>
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	4694      	mov	ip, r2
 800b2ca:	e7c3      	b.n	800b254 <_strtod_l+0x174>
 800b2cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	921d      	str	r2, [sp, #116]	@ 0x74
 800b2d4:	785b      	ldrb	r3, [r3, #1]
 800b2d6:	2b30      	cmp	r3, #48	@ 0x30
 800b2d8:	d0f8      	beq.n	800b2cc <_strtod_l+0x1ec>
 800b2da:	001a      	movs	r2, r3
 800b2dc:	3a31      	subs	r2, #49	@ 0x31
 800b2de:	2a08      	cmp	r2, #8
 800b2e0:	d83b      	bhi.n	800b35a <_strtod_l+0x27a>
 800b2e2:	900e      	str	r0, [sp, #56]	@ 0x38
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b2e8:	9006      	str	r0, [sp, #24]
 800b2ea:	9213      	str	r2, [sp, #76]	@ 0x4c
 800b2ec:	001a      	movs	r2, r3
 800b2ee:	1c41      	adds	r1, r0, #1
 800b2f0:	3a30      	subs	r2, #48	@ 0x30
 800b2f2:	2b30      	cmp	r3, #48	@ 0x30
 800b2f4:	d016      	beq.n	800b324 <_strtod_l+0x244>
 800b2f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2f8:	185b      	adds	r3, r3, r1
 800b2fa:	930e      	str	r3, [sp, #56]	@ 0x38
 800b2fc:	9b06      	ldr	r3, [sp, #24]
 800b2fe:	210a      	movs	r1, #10
 800b300:	469c      	mov	ip, r3
 800b302:	4484      	add	ip, r0
 800b304:	459c      	cmp	ip, r3
 800b306:	d115      	bne.n	800b334 <_strtod_l+0x254>
 800b308:	9906      	ldr	r1, [sp, #24]
 800b30a:	9b06      	ldr	r3, [sp, #24]
 800b30c:	3101      	adds	r1, #1
 800b30e:	1809      	adds	r1, r1, r0
 800b310:	181b      	adds	r3, r3, r0
 800b312:	9106      	str	r1, [sp, #24]
 800b314:	2b08      	cmp	r3, #8
 800b316:	dc19      	bgt.n	800b34c <_strtod_l+0x26c>
 800b318:	230a      	movs	r3, #10
 800b31a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b31c:	434b      	muls	r3, r1
 800b31e:	2100      	movs	r1, #0
 800b320:	18d3      	adds	r3, r2, r3
 800b322:	930d      	str	r3, [sp, #52]	@ 0x34
 800b324:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b326:	0008      	movs	r0, r1
 800b328:	1c5a      	adds	r2, r3, #1
 800b32a:	921d      	str	r2, [sp, #116]	@ 0x74
 800b32c:	785b      	ldrb	r3, [r3, #1]
 800b32e:	e7c6      	b.n	800b2be <_strtod_l+0x1de>
 800b330:	9808      	ldr	r0, [sp, #32]
 800b332:	e7d0      	b.n	800b2d6 <_strtod_l+0x1f6>
 800b334:	1c5c      	adds	r4, r3, #1
 800b336:	2b08      	cmp	r3, #8
 800b338:	dc04      	bgt.n	800b344 <_strtod_l+0x264>
 800b33a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b33c:	434b      	muls	r3, r1
 800b33e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b340:	0023      	movs	r3, r4
 800b342:	e7df      	b.n	800b304 <_strtod_l+0x224>
 800b344:	2c10      	cmp	r4, #16
 800b346:	dcfb      	bgt.n	800b340 <_strtod_l+0x260>
 800b348:	434d      	muls	r5, r1
 800b34a:	e7f9      	b.n	800b340 <_strtod_l+0x260>
 800b34c:	2100      	movs	r1, #0
 800b34e:	2b0f      	cmp	r3, #15
 800b350:	dce8      	bgt.n	800b324 <_strtod_l+0x244>
 800b352:	230a      	movs	r3, #10
 800b354:	435d      	muls	r5, r3
 800b356:	1955      	adds	r5, r2, r5
 800b358:	e7e4      	b.n	800b324 <_strtod_l+0x244>
 800b35a:	2200      	movs	r2, #0
 800b35c:	920e      	str	r2, [sp, #56]	@ 0x38
 800b35e:	9206      	str	r2, [sp, #24]
 800b360:	3201      	adds	r2, #1
 800b362:	e7b1      	b.n	800b2c8 <_strtod_l+0x1e8>
 800b364:	2400      	movs	r4, #0
 800b366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b368:	3302      	adds	r3, #2
 800b36a:	931d      	str	r3, [sp, #116]	@ 0x74
 800b36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b36e:	789b      	ldrb	r3, [r3, #2]
 800b370:	001a      	movs	r2, r3
 800b372:	3a30      	subs	r2, #48	@ 0x30
 800b374:	2a09      	cmp	r2, #9
 800b376:	d913      	bls.n	800b3a0 <_strtod_l+0x2c0>
 800b378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b37a:	921d      	str	r2, [sp, #116]	@ 0x74
 800b37c:	2200      	movs	r2, #0
 800b37e:	e032      	b.n	800b3e6 <_strtod_l+0x306>
 800b380:	0800eea8 	.word	0x0800eea8
 800b384:	7ff00000 	.word	0x7ff00000
 800b388:	ffefffff 	.word	0xffefffff
 800b38c:	00000433 	.word	0x00000433
 800b390:	7fffffff 	.word	0x7fffffff
 800b394:	0800ee90 	.word	0x0800ee90
 800b398:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	921d      	str	r2, [sp, #116]	@ 0x74
 800b39e:	785b      	ldrb	r3, [r3, #1]
 800b3a0:	2b30      	cmp	r3, #48	@ 0x30
 800b3a2:	d0f9      	beq.n	800b398 <_strtod_l+0x2b8>
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	9207      	str	r2, [sp, #28]
 800b3a8:	001a      	movs	r2, r3
 800b3aa:	3a31      	subs	r2, #49	@ 0x31
 800b3ac:	2a08      	cmp	r2, #8
 800b3ae:	d81b      	bhi.n	800b3e8 <_strtod_l+0x308>
 800b3b0:	3b30      	subs	r3, #48	@ 0x30
 800b3b2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b3b6:	9307      	str	r3, [sp, #28]
 800b3b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b3ba:	1c59      	adds	r1, r3, #1
 800b3bc:	911d      	str	r1, [sp, #116]	@ 0x74
 800b3be:	785b      	ldrb	r3, [r3, #1]
 800b3c0:	001a      	movs	r2, r3
 800b3c2:	3a30      	subs	r2, #48	@ 0x30
 800b3c4:	2a09      	cmp	r2, #9
 800b3c6:	d93a      	bls.n	800b43e <_strtod_l+0x35e>
 800b3c8:	9a07      	ldr	r2, [sp, #28]
 800b3ca:	1a8a      	subs	r2, r1, r2
 800b3cc:	49b4      	ldr	r1, [pc, #720]	@ (800b6a0 <_strtod_l+0x5c0>)
 800b3ce:	9107      	str	r1, [sp, #28]
 800b3d0:	2a08      	cmp	r2, #8
 800b3d2:	dc04      	bgt.n	800b3de <_strtod_l+0x2fe>
 800b3d4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b3d6:	9207      	str	r2, [sp, #28]
 800b3d8:	428a      	cmp	r2, r1
 800b3da:	dd00      	ble.n	800b3de <_strtod_l+0x2fe>
 800b3dc:	9107      	str	r1, [sp, #28]
 800b3de:	2c00      	cmp	r4, #0
 800b3e0:	d002      	beq.n	800b3e8 <_strtod_l+0x308>
 800b3e2:	9a07      	ldr	r2, [sp, #28]
 800b3e4:	4252      	negs	r2, r2
 800b3e6:	9207      	str	r2, [sp, #28]
 800b3e8:	9a06      	ldr	r2, [sp, #24]
 800b3ea:	2a00      	cmp	r2, #0
 800b3ec:	d14d      	bne.n	800b48a <_strtod_l+0x3aa>
 800b3ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b3f0:	4310      	orrs	r0, r2
 800b3f2:	d000      	beq.n	800b3f6 <_strtod_l+0x316>
 800b3f4:	e6af      	b.n	800b156 <_strtod_l+0x76>
 800b3f6:	4662      	mov	r2, ip
 800b3f8:	2a00      	cmp	r2, #0
 800b3fa:	d000      	beq.n	800b3fe <_strtod_l+0x31e>
 800b3fc:	e6c7      	b.n	800b18e <_strtod_l+0xae>
 800b3fe:	2b69      	cmp	r3, #105	@ 0x69
 800b400:	d027      	beq.n	800b452 <_strtod_l+0x372>
 800b402:	dc23      	bgt.n	800b44c <_strtod_l+0x36c>
 800b404:	2b49      	cmp	r3, #73	@ 0x49
 800b406:	d024      	beq.n	800b452 <_strtod_l+0x372>
 800b408:	2b4e      	cmp	r3, #78	@ 0x4e
 800b40a:	d000      	beq.n	800b40e <_strtod_l+0x32e>
 800b40c:	e6bf      	b.n	800b18e <_strtod_l+0xae>
 800b40e:	49a5      	ldr	r1, [pc, #660]	@ (800b6a4 <_strtod_l+0x5c4>)
 800b410:	a81d      	add	r0, sp, #116	@ 0x74
 800b412:	f001 fa19 	bl	800c848 <__match>
 800b416:	2800      	cmp	r0, #0
 800b418:	d100      	bne.n	800b41c <_strtod_l+0x33c>
 800b41a:	e6b8      	b.n	800b18e <_strtod_l+0xae>
 800b41c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	2b28      	cmp	r3, #40	@ 0x28
 800b422:	d12c      	bne.n	800b47e <_strtod_l+0x39e>
 800b424:	49a0      	ldr	r1, [pc, #640]	@ (800b6a8 <_strtod_l+0x5c8>)
 800b426:	aa20      	add	r2, sp, #128	@ 0x80
 800b428:	a81d      	add	r0, sp, #116	@ 0x74
 800b42a:	f001 fa21 	bl	800c870 <__hexnan>
 800b42e:	2805      	cmp	r0, #5
 800b430:	d125      	bne.n	800b47e <_strtod_l+0x39e>
 800b432:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b434:	4a9d      	ldr	r2, [pc, #628]	@ (800b6ac <_strtod_l+0x5cc>)
 800b436:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b438:	431a      	orrs	r2, r3
 800b43a:	0017      	movs	r7, r2
 800b43c:	e68b      	b.n	800b156 <_strtod_l+0x76>
 800b43e:	220a      	movs	r2, #10
 800b440:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b442:	434a      	muls	r2, r1
 800b444:	18d2      	adds	r2, r2, r3
 800b446:	3a30      	subs	r2, #48	@ 0x30
 800b448:	9210      	str	r2, [sp, #64]	@ 0x40
 800b44a:	e7b5      	b.n	800b3b8 <_strtod_l+0x2d8>
 800b44c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b44e:	d0de      	beq.n	800b40e <_strtod_l+0x32e>
 800b450:	e69d      	b.n	800b18e <_strtod_l+0xae>
 800b452:	4997      	ldr	r1, [pc, #604]	@ (800b6b0 <_strtod_l+0x5d0>)
 800b454:	a81d      	add	r0, sp, #116	@ 0x74
 800b456:	f001 f9f7 	bl	800c848 <__match>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d100      	bne.n	800b460 <_strtod_l+0x380>
 800b45e:	e696      	b.n	800b18e <_strtod_l+0xae>
 800b460:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b462:	4994      	ldr	r1, [pc, #592]	@ (800b6b4 <_strtod_l+0x5d4>)
 800b464:	3b01      	subs	r3, #1
 800b466:	a81d      	add	r0, sp, #116	@ 0x74
 800b468:	931d      	str	r3, [sp, #116]	@ 0x74
 800b46a:	f001 f9ed 	bl	800c848 <__match>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d102      	bne.n	800b478 <_strtod_l+0x398>
 800b472:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b474:	3301      	adds	r3, #1
 800b476:	931d      	str	r3, [sp, #116]	@ 0x74
 800b478:	2600      	movs	r6, #0
 800b47a:	4f8c      	ldr	r7, [pc, #560]	@ (800b6ac <_strtod_l+0x5cc>)
 800b47c:	e66b      	b.n	800b156 <_strtod_l+0x76>
 800b47e:	488e      	ldr	r0, [pc, #568]	@ (800b6b8 <_strtod_l+0x5d8>)
 800b480:	f000 fef2 	bl	800c268 <nan>
 800b484:	0006      	movs	r6, r0
 800b486:	000f      	movs	r7, r1
 800b488:	e665      	b.n	800b156 <_strtod_l+0x76>
 800b48a:	9b07      	ldr	r3, [sp, #28]
 800b48c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b48e:	1a9b      	subs	r3, r3, r2
 800b490:	930c      	str	r3, [sp, #48]	@ 0x30
 800b492:	9b08      	ldr	r3, [sp, #32]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <_strtod_l+0x3bc>
 800b498:	9b06      	ldr	r3, [sp, #24]
 800b49a:	9308      	str	r3, [sp, #32]
 800b49c:	9c06      	ldr	r4, [sp, #24]
 800b49e:	2c10      	cmp	r4, #16
 800b4a0:	dd00      	ble.n	800b4a4 <_strtod_l+0x3c4>
 800b4a2:	2410      	movs	r4, #16
 800b4a4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b4a6:	f7f7 fe13 	bl	80030d0 <__aeabi_ui2d>
 800b4aa:	9b06      	ldr	r3, [sp, #24]
 800b4ac:	0006      	movs	r6, r0
 800b4ae:	000f      	movs	r7, r1
 800b4b0:	2b09      	cmp	r3, #9
 800b4b2:	dc13      	bgt.n	800b4dc <_strtod_l+0x3fc>
 800b4b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d100      	bne.n	800b4bc <_strtod_l+0x3dc>
 800b4ba:	e64c      	b.n	800b156 <_strtod_l+0x76>
 800b4bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	dc00      	bgt.n	800b4c4 <_strtod_l+0x3e4>
 800b4c2:	e07e      	b.n	800b5c2 <_strtod_l+0x4e2>
 800b4c4:	2b16      	cmp	r3, #22
 800b4c6:	dc63      	bgt.n	800b590 <_strtod_l+0x4b0>
 800b4c8:	497c      	ldr	r1, [pc, #496]	@ (800b6bc <_strtod_l+0x5dc>)
 800b4ca:	00db      	lsls	r3, r3, #3
 800b4cc:	18c9      	adds	r1, r1, r3
 800b4ce:	0032      	movs	r2, r6
 800b4d0:	6808      	ldr	r0, [r1, #0]
 800b4d2:	6849      	ldr	r1, [r1, #4]
 800b4d4:	003b      	movs	r3, r7
 800b4d6:	f7f6 ff0b 	bl	80022f0 <__aeabi_dmul>
 800b4da:	e7d3      	b.n	800b484 <_strtod_l+0x3a4>
 800b4dc:	0022      	movs	r2, r4
 800b4de:	4b77      	ldr	r3, [pc, #476]	@ (800b6bc <_strtod_l+0x5dc>)
 800b4e0:	3a09      	subs	r2, #9
 800b4e2:	00d2      	lsls	r2, r2, #3
 800b4e4:	189b      	adds	r3, r3, r2
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	f7f6 ff01 	bl	80022f0 <__aeabi_dmul>
 800b4ee:	0006      	movs	r6, r0
 800b4f0:	0028      	movs	r0, r5
 800b4f2:	000f      	movs	r7, r1
 800b4f4:	f7f7 fdec 	bl	80030d0 <__aeabi_ui2d>
 800b4f8:	000b      	movs	r3, r1
 800b4fa:	0002      	movs	r2, r0
 800b4fc:	0039      	movs	r1, r7
 800b4fe:	0030      	movs	r0, r6
 800b500:	f7f5 ff4e 	bl	80013a0 <__aeabi_dadd>
 800b504:	9b06      	ldr	r3, [sp, #24]
 800b506:	0006      	movs	r6, r0
 800b508:	000f      	movs	r7, r1
 800b50a:	2b0f      	cmp	r3, #15
 800b50c:	ddd2      	ble.n	800b4b4 <_strtod_l+0x3d4>
 800b50e:	9b06      	ldr	r3, [sp, #24]
 800b510:	1b1c      	subs	r4, r3, r4
 800b512:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b514:	18e4      	adds	r4, r4, r3
 800b516:	2c00      	cmp	r4, #0
 800b518:	dc00      	bgt.n	800b51c <_strtod_l+0x43c>
 800b51a:	e09b      	b.n	800b654 <_strtod_l+0x574>
 800b51c:	220f      	movs	r2, #15
 800b51e:	0023      	movs	r3, r4
 800b520:	4013      	ands	r3, r2
 800b522:	4214      	tst	r4, r2
 800b524:	d00a      	beq.n	800b53c <_strtod_l+0x45c>
 800b526:	4965      	ldr	r1, [pc, #404]	@ (800b6bc <_strtod_l+0x5dc>)
 800b528:	00db      	lsls	r3, r3, #3
 800b52a:	18c9      	adds	r1, r1, r3
 800b52c:	0032      	movs	r2, r6
 800b52e:	6808      	ldr	r0, [r1, #0]
 800b530:	6849      	ldr	r1, [r1, #4]
 800b532:	003b      	movs	r3, r7
 800b534:	f7f6 fedc 	bl	80022f0 <__aeabi_dmul>
 800b538:	0006      	movs	r6, r0
 800b53a:	000f      	movs	r7, r1
 800b53c:	230f      	movs	r3, #15
 800b53e:	439c      	bics	r4, r3
 800b540:	d073      	beq.n	800b62a <_strtod_l+0x54a>
 800b542:	3326      	adds	r3, #38	@ 0x26
 800b544:	33ff      	adds	r3, #255	@ 0xff
 800b546:	429c      	cmp	r4, r3
 800b548:	dd4b      	ble.n	800b5e2 <_strtod_l+0x502>
 800b54a:	2300      	movs	r3, #0
 800b54c:	9306      	str	r3, [sp, #24]
 800b54e:	9307      	str	r3, [sp, #28]
 800b550:	930d      	str	r3, [sp, #52]	@ 0x34
 800b552:	9308      	str	r3, [sp, #32]
 800b554:	2322      	movs	r3, #34	@ 0x22
 800b556:	2600      	movs	r6, #0
 800b558:	9a05      	ldr	r2, [sp, #20]
 800b55a:	4f54      	ldr	r7, [pc, #336]	@ (800b6ac <_strtod_l+0x5cc>)
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b560:	42b3      	cmp	r3, r6
 800b562:	d100      	bne.n	800b566 <_strtod_l+0x486>
 800b564:	e5f7      	b.n	800b156 <_strtod_l+0x76>
 800b566:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b568:	9805      	ldr	r0, [sp, #20]
 800b56a:	f7ff f91b 	bl	800a7a4 <_Bfree>
 800b56e:	9908      	ldr	r1, [sp, #32]
 800b570:	9805      	ldr	r0, [sp, #20]
 800b572:	f7ff f917 	bl	800a7a4 <_Bfree>
 800b576:	9907      	ldr	r1, [sp, #28]
 800b578:	9805      	ldr	r0, [sp, #20]
 800b57a:	f7ff f913 	bl	800a7a4 <_Bfree>
 800b57e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b580:	9805      	ldr	r0, [sp, #20]
 800b582:	f7ff f90f 	bl	800a7a4 <_Bfree>
 800b586:	9906      	ldr	r1, [sp, #24]
 800b588:	9805      	ldr	r0, [sp, #20]
 800b58a:	f7ff f90b 	bl	800a7a4 <_Bfree>
 800b58e:	e5e2      	b.n	800b156 <_strtod_l+0x76>
 800b590:	2325      	movs	r3, #37	@ 0x25
 800b592:	9a06      	ldr	r2, [sp, #24]
 800b594:	1a9b      	subs	r3, r3, r2
 800b596:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b598:	4293      	cmp	r3, r2
 800b59a:	dbb8      	blt.n	800b50e <_strtod_l+0x42e>
 800b59c:	240f      	movs	r4, #15
 800b59e:	9b06      	ldr	r3, [sp, #24]
 800b5a0:	4d46      	ldr	r5, [pc, #280]	@ (800b6bc <_strtod_l+0x5dc>)
 800b5a2:	1ae4      	subs	r4, r4, r3
 800b5a4:	00e1      	lsls	r1, r4, #3
 800b5a6:	1869      	adds	r1, r5, r1
 800b5a8:	0032      	movs	r2, r6
 800b5aa:	6808      	ldr	r0, [r1, #0]
 800b5ac:	6849      	ldr	r1, [r1, #4]
 800b5ae:	003b      	movs	r3, r7
 800b5b0:	f7f6 fe9e 	bl	80022f0 <__aeabi_dmul>
 800b5b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5b6:	1b1c      	subs	r4, r3, r4
 800b5b8:	00e4      	lsls	r4, r4, #3
 800b5ba:	192d      	adds	r5, r5, r4
 800b5bc:	682a      	ldr	r2, [r5, #0]
 800b5be:	686b      	ldr	r3, [r5, #4]
 800b5c0:	e789      	b.n	800b4d6 <_strtod_l+0x3f6>
 800b5c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5c4:	3316      	adds	r3, #22
 800b5c6:	dba2      	blt.n	800b50e <_strtod_l+0x42e>
 800b5c8:	9907      	ldr	r1, [sp, #28]
 800b5ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5cc:	4b3b      	ldr	r3, [pc, #236]	@ (800b6bc <_strtod_l+0x5dc>)
 800b5ce:	1a52      	subs	r2, r2, r1
 800b5d0:	00d2      	lsls	r2, r2, #3
 800b5d2:	189b      	adds	r3, r3, r2
 800b5d4:	0030      	movs	r0, r6
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	0039      	movs	r1, r7
 800b5dc:	f7f6 fa44 	bl	8001a68 <__aeabi_ddiv>
 800b5e0:	e750      	b.n	800b484 <_strtod_l+0x3a4>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	0030      	movs	r0, r6
 800b5e6:	0039      	movs	r1, r7
 800b5e8:	4d35      	ldr	r5, [pc, #212]	@ (800b6c0 <_strtod_l+0x5e0>)
 800b5ea:	1124      	asrs	r4, r4, #4
 800b5ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5ee:	2c01      	cmp	r4, #1
 800b5f0:	dc1e      	bgt.n	800b630 <_strtod_l+0x550>
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <_strtod_l+0x51a>
 800b5f6:	0006      	movs	r6, r0
 800b5f8:	000f      	movs	r7, r1
 800b5fa:	4b32      	ldr	r3, [pc, #200]	@ (800b6c4 <_strtod_l+0x5e4>)
 800b5fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5fe:	18ff      	adds	r7, r7, r3
 800b600:	4b2f      	ldr	r3, [pc, #188]	@ (800b6c0 <_strtod_l+0x5e0>)
 800b602:	00d5      	lsls	r5, r2, #3
 800b604:	195d      	adds	r5, r3, r5
 800b606:	0032      	movs	r2, r6
 800b608:	6828      	ldr	r0, [r5, #0]
 800b60a:	6869      	ldr	r1, [r5, #4]
 800b60c:	003b      	movs	r3, r7
 800b60e:	f7f6 fe6f 	bl	80022f0 <__aeabi_dmul>
 800b612:	4b26      	ldr	r3, [pc, #152]	@ (800b6ac <_strtod_l+0x5cc>)
 800b614:	4a2c      	ldr	r2, [pc, #176]	@ (800b6c8 <_strtod_l+0x5e8>)
 800b616:	0006      	movs	r6, r0
 800b618:	400b      	ands	r3, r1
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d895      	bhi.n	800b54a <_strtod_l+0x46a>
 800b61e:	4a2b      	ldr	r2, [pc, #172]	@ (800b6cc <_strtod_l+0x5ec>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d913      	bls.n	800b64c <_strtod_l+0x56c>
 800b624:	2601      	movs	r6, #1
 800b626:	4f2a      	ldr	r7, [pc, #168]	@ (800b6d0 <_strtod_l+0x5f0>)
 800b628:	4276      	negs	r6, r6
 800b62a:	2300      	movs	r3, #0
 800b62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b62e:	e086      	b.n	800b73e <_strtod_l+0x65e>
 800b630:	2201      	movs	r2, #1
 800b632:	4214      	tst	r4, r2
 800b634:	d004      	beq.n	800b640 <_strtod_l+0x560>
 800b636:	682a      	ldr	r2, [r5, #0]
 800b638:	686b      	ldr	r3, [r5, #4]
 800b63a:	f7f6 fe59 	bl	80022f0 <__aeabi_dmul>
 800b63e:	2301      	movs	r3, #1
 800b640:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b642:	1064      	asrs	r4, r4, #1
 800b644:	3201      	adds	r2, #1
 800b646:	9209      	str	r2, [sp, #36]	@ 0x24
 800b648:	3508      	adds	r5, #8
 800b64a:	e7d0      	b.n	800b5ee <_strtod_l+0x50e>
 800b64c:	23d4      	movs	r3, #212	@ 0xd4
 800b64e:	049b      	lsls	r3, r3, #18
 800b650:	18cf      	adds	r7, r1, r3
 800b652:	e7ea      	b.n	800b62a <_strtod_l+0x54a>
 800b654:	2c00      	cmp	r4, #0
 800b656:	d0e8      	beq.n	800b62a <_strtod_l+0x54a>
 800b658:	4264      	negs	r4, r4
 800b65a:	230f      	movs	r3, #15
 800b65c:	0022      	movs	r2, r4
 800b65e:	401a      	ands	r2, r3
 800b660:	421c      	tst	r4, r3
 800b662:	d00a      	beq.n	800b67a <_strtod_l+0x59a>
 800b664:	4b15      	ldr	r3, [pc, #84]	@ (800b6bc <_strtod_l+0x5dc>)
 800b666:	00d2      	lsls	r2, r2, #3
 800b668:	189b      	adds	r3, r3, r2
 800b66a:	0030      	movs	r0, r6
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	0039      	movs	r1, r7
 800b672:	f7f6 f9f9 	bl	8001a68 <__aeabi_ddiv>
 800b676:	0006      	movs	r6, r0
 800b678:	000f      	movs	r7, r1
 800b67a:	1124      	asrs	r4, r4, #4
 800b67c:	d0d5      	beq.n	800b62a <_strtod_l+0x54a>
 800b67e:	2c1f      	cmp	r4, #31
 800b680:	dd28      	ble.n	800b6d4 <_strtod_l+0x5f4>
 800b682:	2300      	movs	r3, #0
 800b684:	9306      	str	r3, [sp, #24]
 800b686:	9307      	str	r3, [sp, #28]
 800b688:	930d      	str	r3, [sp, #52]	@ 0x34
 800b68a:	9308      	str	r3, [sp, #32]
 800b68c:	2322      	movs	r3, #34	@ 0x22
 800b68e:	9a05      	ldr	r2, [sp, #20]
 800b690:	2600      	movs	r6, #0
 800b692:	6013      	str	r3, [r2, #0]
 800b694:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b696:	2700      	movs	r7, #0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d000      	beq.n	800b69e <_strtod_l+0x5be>
 800b69c:	e763      	b.n	800b566 <_strtod_l+0x486>
 800b69e:	e55a      	b.n	800b156 <_strtod_l+0x76>
 800b6a0:	00004e1f 	.word	0x00004e1f
 800b6a4:	0800ec81 	.word	0x0800ec81
 800b6a8:	0800ee94 	.word	0x0800ee94
 800b6ac:	7ff00000 	.word	0x7ff00000
 800b6b0:	0800ec79 	.word	0x0800ec79
 800b6b4:	0800ecb0 	.word	0x0800ecb0
 800b6b8:	0800f03d 	.word	0x0800f03d
 800b6bc:	0800edc8 	.word	0x0800edc8
 800b6c0:	0800eda0 	.word	0x0800eda0
 800b6c4:	fcb00000 	.word	0xfcb00000
 800b6c8:	7ca00000 	.word	0x7ca00000
 800b6cc:	7c900000 	.word	0x7c900000
 800b6d0:	7fefffff 	.word	0x7fefffff
 800b6d4:	2310      	movs	r3, #16
 800b6d6:	0022      	movs	r2, r4
 800b6d8:	401a      	ands	r2, r3
 800b6da:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6dc:	421c      	tst	r4, r3
 800b6de:	d001      	beq.n	800b6e4 <_strtod_l+0x604>
 800b6e0:	335a      	adds	r3, #90	@ 0x5a
 800b6e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6e4:	0030      	movs	r0, r6
 800b6e6:	0039      	movs	r1, r7
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4dbf      	ldr	r5, [pc, #764]	@ (800b9e8 <_strtod_l+0x908>)
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	4214      	tst	r4, r2
 800b6f0:	d004      	beq.n	800b6fc <_strtod_l+0x61c>
 800b6f2:	682a      	ldr	r2, [r5, #0]
 800b6f4:	686b      	ldr	r3, [r5, #4]
 800b6f6:	f7f6 fdfb 	bl	80022f0 <__aeabi_dmul>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	1064      	asrs	r4, r4, #1
 800b6fe:	3508      	adds	r5, #8
 800b700:	2c00      	cmp	r4, #0
 800b702:	d1f3      	bne.n	800b6ec <_strtod_l+0x60c>
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <_strtod_l+0x62c>
 800b708:	0006      	movs	r6, r0
 800b70a:	000f      	movs	r7, r1
 800b70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00d      	beq.n	800b72e <_strtod_l+0x64e>
 800b712:	236b      	movs	r3, #107	@ 0x6b
 800b714:	007a      	lsls	r2, r7, #1
 800b716:	0d52      	lsrs	r2, r2, #21
 800b718:	0039      	movs	r1, r7
 800b71a:	1a9b      	subs	r3, r3, r2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	dd06      	ble.n	800b72e <_strtod_l+0x64e>
 800b720:	2b1f      	cmp	r3, #31
 800b722:	dd5a      	ble.n	800b7da <_strtod_l+0x6fa>
 800b724:	2600      	movs	r6, #0
 800b726:	2b34      	cmp	r3, #52	@ 0x34
 800b728:	dd50      	ble.n	800b7cc <_strtod_l+0x6ec>
 800b72a:	27dc      	movs	r7, #220	@ 0xdc
 800b72c:	04bf      	lsls	r7, r7, #18
 800b72e:	2200      	movs	r2, #0
 800b730:	2300      	movs	r3, #0
 800b732:	0030      	movs	r0, r6
 800b734:	0039      	movs	r1, r7
 800b736:	f7f4 fe87 	bl	8000448 <__aeabi_dcmpeq>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d1a1      	bne.n	800b682 <_strtod_l+0x5a2>
 800b73e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b740:	9a08      	ldr	r2, [sp, #32]
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b746:	9b06      	ldr	r3, [sp, #24]
 800b748:	9805      	ldr	r0, [sp, #20]
 800b74a:	f7ff f893 	bl	800a874 <__s2b>
 800b74e:	900d      	str	r0, [sp, #52]	@ 0x34
 800b750:	2800      	cmp	r0, #0
 800b752:	d100      	bne.n	800b756 <_strtod_l+0x676>
 800b754:	e6f9      	b.n	800b54a <_strtod_l+0x46a>
 800b756:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b758:	9907      	ldr	r1, [sp, #28]
 800b75a:	17da      	asrs	r2, r3, #31
 800b75c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b75e:	1a5b      	subs	r3, r3, r1
 800b760:	401a      	ands	r2, r3
 800b762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b764:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b766:	43db      	mvns	r3, r3
 800b768:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b76a:	17db      	asrs	r3, r3, #31
 800b76c:	401a      	ands	r2, r3
 800b76e:	2300      	movs	r3, #0
 800b770:	921a      	str	r2, [sp, #104]	@ 0x68
 800b772:	9306      	str	r3, [sp, #24]
 800b774:	9307      	str	r3, [sp, #28]
 800b776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b778:	9805      	ldr	r0, [sp, #20]
 800b77a:	6859      	ldr	r1, [r3, #4]
 800b77c:	f7fe ffce 	bl	800a71c <_Balloc>
 800b780:	9008      	str	r0, [sp, #32]
 800b782:	2800      	cmp	r0, #0
 800b784:	d100      	bne.n	800b788 <_strtod_l+0x6a8>
 800b786:	e6e5      	b.n	800b554 <_strtod_l+0x474>
 800b788:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b78a:	300c      	adds	r0, #12
 800b78c:	0019      	movs	r1, r3
 800b78e:	691a      	ldr	r2, [r3, #16]
 800b790:	310c      	adds	r1, #12
 800b792:	3202      	adds	r2, #2
 800b794:	0092      	lsls	r2, r2, #2
 800b796:	f000 fd5e 	bl	800c256 <memcpy>
 800b79a:	ab20      	add	r3, sp, #128	@ 0x80
 800b79c:	9301      	str	r3, [sp, #4]
 800b79e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b7a0:	9300      	str	r3, [sp, #0]
 800b7a2:	0032      	movs	r2, r6
 800b7a4:	003b      	movs	r3, r7
 800b7a6:	9805      	ldr	r0, [sp, #20]
 800b7a8:	9610      	str	r6, [sp, #64]	@ 0x40
 800b7aa:	9711      	str	r7, [sp, #68]	@ 0x44
 800b7ac:	f7ff fbb2 	bl	800af14 <__d2b>
 800b7b0:	901e      	str	r0, [sp, #120]	@ 0x78
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d100      	bne.n	800b7b8 <_strtod_l+0x6d8>
 800b7b6:	e6cd      	b.n	800b554 <_strtod_l+0x474>
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	9805      	ldr	r0, [sp, #20]
 800b7bc:	f7ff f8f6 	bl	800a9ac <__i2b>
 800b7c0:	9007      	str	r0, [sp, #28]
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d10e      	bne.n	800b7e4 <_strtod_l+0x704>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9307      	str	r3, [sp, #28]
 800b7ca:	e6c3      	b.n	800b554 <_strtod_l+0x474>
 800b7cc:	234b      	movs	r3, #75	@ 0x4b
 800b7ce:	1a9a      	subs	r2, r3, r2
 800b7d0:	3b4c      	subs	r3, #76	@ 0x4c
 800b7d2:	4093      	lsls	r3, r2
 800b7d4:	4019      	ands	r1, r3
 800b7d6:	000f      	movs	r7, r1
 800b7d8:	e7a9      	b.n	800b72e <_strtod_l+0x64e>
 800b7da:	2201      	movs	r2, #1
 800b7dc:	4252      	negs	r2, r2
 800b7de:	409a      	lsls	r2, r3
 800b7e0:	4016      	ands	r6, r2
 800b7e2:	e7a4      	b.n	800b72e <_strtod_l+0x64e>
 800b7e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b7e6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b7e8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800b7ea:	1ad4      	subs	r4, r2, r3
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	db01      	blt.n	800b7f4 <_strtod_l+0x714>
 800b7f0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800b7f2:	195d      	adds	r5, r3, r5
 800b7f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b7f8:	1a5b      	subs	r3, r3, r1
 800b7fa:	2136      	movs	r1, #54	@ 0x36
 800b7fc:	189b      	adds	r3, r3, r2
 800b7fe:	1a8a      	subs	r2, r1, r2
 800b800:	497a      	ldr	r1, [pc, #488]	@ (800b9ec <_strtod_l+0x90c>)
 800b802:	2001      	movs	r0, #1
 800b804:	468c      	mov	ip, r1
 800b806:	2100      	movs	r1, #0
 800b808:	3b01      	subs	r3, #1
 800b80a:	9116      	str	r1, [sp, #88]	@ 0x58
 800b80c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b80e:	4563      	cmp	r3, ip
 800b810:	da06      	bge.n	800b820 <_strtod_l+0x740>
 800b812:	4661      	mov	r1, ip
 800b814:	1ac9      	subs	r1, r1, r3
 800b816:	1a52      	subs	r2, r2, r1
 800b818:	291f      	cmp	r1, #31
 800b81a:	dc3f      	bgt.n	800b89c <_strtod_l+0x7bc>
 800b81c:	4088      	lsls	r0, r1
 800b81e:	9014      	str	r0, [sp, #80]	@ 0x50
 800b820:	18ab      	adds	r3, r5, r2
 800b822:	930e      	str	r3, [sp, #56]	@ 0x38
 800b824:	18a4      	adds	r4, r4, r2
 800b826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b828:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b82a:	191c      	adds	r4, r3, r4
 800b82c:	002b      	movs	r3, r5
 800b82e:	4295      	cmp	r5, r2
 800b830:	dd00      	ble.n	800b834 <_strtod_l+0x754>
 800b832:	0013      	movs	r3, r2
 800b834:	42a3      	cmp	r3, r4
 800b836:	dd00      	ble.n	800b83a <_strtod_l+0x75a>
 800b838:	0023      	movs	r3, r4
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	dd04      	ble.n	800b848 <_strtod_l+0x768>
 800b83e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b840:	1ae4      	subs	r4, r4, r3
 800b842:	1ad2      	subs	r2, r2, r3
 800b844:	920e      	str	r2, [sp, #56]	@ 0x38
 800b846:	1aed      	subs	r5, r5, r3
 800b848:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	dd16      	ble.n	800b87c <_strtod_l+0x79c>
 800b84e:	001a      	movs	r2, r3
 800b850:	9907      	ldr	r1, [sp, #28]
 800b852:	9805      	ldr	r0, [sp, #20]
 800b854:	f7ff f974 	bl	800ab40 <__pow5mult>
 800b858:	9007      	str	r0, [sp, #28]
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d0b3      	beq.n	800b7c6 <_strtod_l+0x6e6>
 800b85e:	0001      	movs	r1, r0
 800b860:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800b862:	9805      	ldr	r0, [sp, #20]
 800b864:	f7ff f8ba 	bl	800a9dc <__multiply>
 800b868:	9013      	str	r0, [sp, #76]	@ 0x4c
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d100      	bne.n	800b870 <_strtod_l+0x790>
 800b86e:	e671      	b.n	800b554 <_strtod_l+0x474>
 800b870:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b872:	9805      	ldr	r0, [sp, #20]
 800b874:	f7fe ff96 	bl	800a7a4 <_Bfree>
 800b878:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b87a:	931e      	str	r3, [sp, #120]	@ 0x78
 800b87c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b87e:	2b00      	cmp	r3, #0
 800b880:	dc12      	bgt.n	800b8a8 <_strtod_l+0x7c8>
 800b882:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b884:	2b00      	cmp	r3, #0
 800b886:	dd18      	ble.n	800b8ba <_strtod_l+0x7da>
 800b888:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b88a:	9908      	ldr	r1, [sp, #32]
 800b88c:	9805      	ldr	r0, [sp, #20]
 800b88e:	f7ff f957 	bl	800ab40 <__pow5mult>
 800b892:	9008      	str	r0, [sp, #32]
 800b894:	2800      	cmp	r0, #0
 800b896:	d110      	bne.n	800b8ba <_strtod_l+0x7da>
 800b898:	2300      	movs	r3, #0
 800b89a:	e65a      	b.n	800b552 <_strtod_l+0x472>
 800b89c:	4954      	ldr	r1, [pc, #336]	@ (800b9f0 <_strtod_l+0x910>)
 800b89e:	1acb      	subs	r3, r1, r3
 800b8a0:	0001      	movs	r1, r0
 800b8a2:	4099      	lsls	r1, r3
 800b8a4:	9116      	str	r1, [sp, #88]	@ 0x58
 800b8a6:	e7ba      	b.n	800b81e <_strtod_l+0x73e>
 800b8a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8aa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b8ac:	9805      	ldr	r0, [sp, #20]
 800b8ae:	f7ff f9a3 	bl	800abf8 <__lshift>
 800b8b2:	901e      	str	r0, [sp, #120]	@ 0x78
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d1e4      	bne.n	800b882 <_strtod_l+0x7a2>
 800b8b8:	e64c      	b.n	800b554 <_strtod_l+0x474>
 800b8ba:	2c00      	cmp	r4, #0
 800b8bc:	dd07      	ble.n	800b8ce <_strtod_l+0x7ee>
 800b8be:	0022      	movs	r2, r4
 800b8c0:	9908      	ldr	r1, [sp, #32]
 800b8c2:	9805      	ldr	r0, [sp, #20]
 800b8c4:	f7ff f998 	bl	800abf8 <__lshift>
 800b8c8:	9008      	str	r0, [sp, #32]
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d0e4      	beq.n	800b898 <_strtod_l+0x7b8>
 800b8ce:	2d00      	cmp	r5, #0
 800b8d0:	dd08      	ble.n	800b8e4 <_strtod_l+0x804>
 800b8d2:	002a      	movs	r2, r5
 800b8d4:	9907      	ldr	r1, [sp, #28]
 800b8d6:	9805      	ldr	r0, [sp, #20]
 800b8d8:	f7ff f98e 	bl	800abf8 <__lshift>
 800b8dc:	9007      	str	r0, [sp, #28]
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d100      	bne.n	800b8e4 <_strtod_l+0x804>
 800b8e2:	e637      	b.n	800b554 <_strtod_l+0x474>
 800b8e4:	9a08      	ldr	r2, [sp, #32]
 800b8e6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b8e8:	9805      	ldr	r0, [sp, #20]
 800b8ea:	f7ff fa0d 	bl	800ad08 <__mdiff>
 800b8ee:	9006      	str	r0, [sp, #24]
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d100      	bne.n	800b8f6 <_strtod_l+0x816>
 800b8f4:	e62e      	b.n	800b554 <_strtod_l+0x474>
 800b8f6:	68c3      	ldr	r3, [r0, #12]
 800b8f8:	9907      	ldr	r1, [sp, #28]
 800b8fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	60c3      	str	r3, [r0, #12]
 800b900:	f7ff f9e6 	bl	800acd0 <__mcmp>
 800b904:	2800      	cmp	r0, #0
 800b906:	da3b      	bge.n	800b980 <_strtod_l+0x8a0>
 800b908:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b90a:	4333      	orrs	r3, r6
 800b90c:	d167      	bne.n	800b9de <_strtod_l+0x8fe>
 800b90e:	033b      	lsls	r3, r7, #12
 800b910:	d165      	bne.n	800b9de <_strtod_l+0x8fe>
 800b912:	22d6      	movs	r2, #214	@ 0xd6
 800b914:	4b37      	ldr	r3, [pc, #220]	@ (800b9f4 <_strtod_l+0x914>)
 800b916:	04d2      	lsls	r2, r2, #19
 800b918:	403b      	ands	r3, r7
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d95f      	bls.n	800b9de <_strtod_l+0x8fe>
 800b91e:	9b06      	ldr	r3, [sp, #24]
 800b920:	695b      	ldr	r3, [r3, #20]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d103      	bne.n	800b92e <_strtod_l+0x84e>
 800b926:	9b06      	ldr	r3, [sp, #24]
 800b928:	691b      	ldr	r3, [r3, #16]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	dd57      	ble.n	800b9de <_strtod_l+0x8fe>
 800b92e:	9906      	ldr	r1, [sp, #24]
 800b930:	2201      	movs	r2, #1
 800b932:	9805      	ldr	r0, [sp, #20]
 800b934:	f7ff f960 	bl	800abf8 <__lshift>
 800b938:	9907      	ldr	r1, [sp, #28]
 800b93a:	9006      	str	r0, [sp, #24]
 800b93c:	f7ff f9c8 	bl	800acd0 <__mcmp>
 800b940:	2800      	cmp	r0, #0
 800b942:	dd4c      	ble.n	800b9de <_strtod_l+0x8fe>
 800b944:	4b2b      	ldr	r3, [pc, #172]	@ (800b9f4 <_strtod_l+0x914>)
 800b946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b948:	403b      	ands	r3, r7
 800b94a:	2a00      	cmp	r2, #0
 800b94c:	d074      	beq.n	800ba38 <_strtod_l+0x958>
 800b94e:	22d6      	movs	r2, #214	@ 0xd6
 800b950:	04d2      	lsls	r2, r2, #19
 800b952:	4293      	cmp	r3, r2
 800b954:	d870      	bhi.n	800ba38 <_strtod_l+0x958>
 800b956:	22dc      	movs	r2, #220	@ 0xdc
 800b958:	0492      	lsls	r2, r2, #18
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d800      	bhi.n	800b960 <_strtod_l+0x880>
 800b95e:	e695      	b.n	800b68c <_strtod_l+0x5ac>
 800b960:	0030      	movs	r0, r6
 800b962:	0039      	movs	r1, r7
 800b964:	4b24      	ldr	r3, [pc, #144]	@ (800b9f8 <_strtod_l+0x918>)
 800b966:	2200      	movs	r2, #0
 800b968:	f7f6 fcc2 	bl	80022f0 <__aeabi_dmul>
 800b96c:	4b21      	ldr	r3, [pc, #132]	@ (800b9f4 <_strtod_l+0x914>)
 800b96e:	0006      	movs	r6, r0
 800b970:	000f      	movs	r7, r1
 800b972:	420b      	tst	r3, r1
 800b974:	d000      	beq.n	800b978 <_strtod_l+0x898>
 800b976:	e5f6      	b.n	800b566 <_strtod_l+0x486>
 800b978:	2322      	movs	r3, #34	@ 0x22
 800b97a:	9a05      	ldr	r2, [sp, #20]
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	e5f2      	b.n	800b566 <_strtod_l+0x486>
 800b980:	970e      	str	r7, [sp, #56]	@ 0x38
 800b982:	2800      	cmp	r0, #0
 800b984:	d175      	bne.n	800ba72 <_strtod_l+0x992>
 800b986:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b988:	033b      	lsls	r3, r7, #12
 800b98a:	0b1b      	lsrs	r3, r3, #12
 800b98c:	2a00      	cmp	r2, #0
 800b98e:	d039      	beq.n	800ba04 <_strtod_l+0x924>
 800b990:	4a1a      	ldr	r2, [pc, #104]	@ (800b9fc <_strtod_l+0x91c>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d138      	bne.n	800ba08 <_strtod_l+0x928>
 800b996:	2101      	movs	r1, #1
 800b998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b99a:	4249      	negs	r1, r1
 800b99c:	0032      	movs	r2, r6
 800b99e:	0008      	movs	r0, r1
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00b      	beq.n	800b9bc <_strtod_l+0x8dc>
 800b9a4:	24d4      	movs	r4, #212	@ 0xd4
 800b9a6:	4b13      	ldr	r3, [pc, #76]	@ (800b9f4 <_strtod_l+0x914>)
 800b9a8:	0008      	movs	r0, r1
 800b9aa:	403b      	ands	r3, r7
 800b9ac:	04e4      	lsls	r4, r4, #19
 800b9ae:	42a3      	cmp	r3, r4
 800b9b0:	d804      	bhi.n	800b9bc <_strtod_l+0x8dc>
 800b9b2:	306c      	adds	r0, #108	@ 0x6c
 800b9b4:	0d1b      	lsrs	r3, r3, #20
 800b9b6:	1ac3      	subs	r3, r0, r3
 800b9b8:	4099      	lsls	r1, r3
 800b9ba:	0008      	movs	r0, r1
 800b9bc:	4282      	cmp	r2, r0
 800b9be:	d123      	bne.n	800ba08 <_strtod_l+0x928>
 800b9c0:	4b0f      	ldr	r3, [pc, #60]	@ (800ba00 <_strtod_l+0x920>)
 800b9c2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b9c4:	4299      	cmp	r1, r3
 800b9c6:	d102      	bne.n	800b9ce <_strtod_l+0x8ee>
 800b9c8:	3201      	adds	r2, #1
 800b9ca:	d100      	bne.n	800b9ce <_strtod_l+0x8ee>
 800b9cc:	e5c2      	b.n	800b554 <_strtod_l+0x474>
 800b9ce:	4b09      	ldr	r3, [pc, #36]	@ (800b9f4 <_strtod_l+0x914>)
 800b9d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9d2:	2600      	movs	r6, #0
 800b9d4:	401a      	ands	r2, r3
 800b9d6:	0013      	movs	r3, r2
 800b9d8:	2280      	movs	r2, #128	@ 0x80
 800b9da:	0352      	lsls	r2, r2, #13
 800b9dc:	189f      	adds	r7, r3, r2
 800b9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1bd      	bne.n	800b960 <_strtod_l+0x880>
 800b9e4:	e5bf      	b.n	800b566 <_strtod_l+0x486>
 800b9e6:	46c0      	nop			@ (mov r8, r8)
 800b9e8:	0800eec0 	.word	0x0800eec0
 800b9ec:	fffffc02 	.word	0xfffffc02
 800b9f0:	fffffbe2 	.word	0xfffffbe2
 800b9f4:	7ff00000 	.word	0x7ff00000
 800b9f8:	39500000 	.word	0x39500000
 800b9fc:	000fffff 	.word	0x000fffff
 800ba00:	7fefffff 	.word	0x7fefffff
 800ba04:	4333      	orrs	r3, r6
 800ba06:	d09d      	beq.n	800b944 <_strtod_l+0x864>
 800ba08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d01c      	beq.n	800ba48 <_strtod_l+0x968>
 800ba0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba10:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ba12:	4213      	tst	r3, r2
 800ba14:	d0e3      	beq.n	800b9de <_strtod_l+0x8fe>
 800ba16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba18:	0030      	movs	r0, r6
 800ba1a:	0039      	movs	r1, r7
 800ba1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d016      	beq.n	800ba50 <_strtod_l+0x970>
 800ba22:	f7ff fb45 	bl	800b0b0 <sulp>
 800ba26:	0002      	movs	r2, r0
 800ba28:	000b      	movs	r3, r1
 800ba2a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ba2c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ba2e:	f7f5 fcb7 	bl	80013a0 <__aeabi_dadd>
 800ba32:	0006      	movs	r6, r0
 800ba34:	000f      	movs	r7, r1
 800ba36:	e7d2      	b.n	800b9de <_strtod_l+0x8fe>
 800ba38:	2601      	movs	r6, #1
 800ba3a:	4a92      	ldr	r2, [pc, #584]	@ (800bc84 <_strtod_l+0xba4>)
 800ba3c:	4276      	negs	r6, r6
 800ba3e:	189b      	adds	r3, r3, r2
 800ba40:	4a91      	ldr	r2, [pc, #580]	@ (800bc88 <_strtod_l+0xba8>)
 800ba42:	431a      	orrs	r2, r3
 800ba44:	0017      	movs	r7, r2
 800ba46:	e7ca      	b.n	800b9de <_strtod_l+0x8fe>
 800ba48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ba4a:	4233      	tst	r3, r6
 800ba4c:	d0c7      	beq.n	800b9de <_strtod_l+0x8fe>
 800ba4e:	e7e2      	b.n	800ba16 <_strtod_l+0x936>
 800ba50:	f7ff fb2e 	bl	800b0b0 <sulp>
 800ba54:	0002      	movs	r2, r0
 800ba56:	000b      	movs	r3, r1
 800ba58:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ba5a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ba5c:	f7f6 ff10 	bl	8002880 <__aeabi_dsub>
 800ba60:	2200      	movs	r2, #0
 800ba62:	2300      	movs	r3, #0
 800ba64:	0006      	movs	r6, r0
 800ba66:	000f      	movs	r7, r1
 800ba68:	f7f4 fcee 	bl	8000448 <__aeabi_dcmpeq>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d0b6      	beq.n	800b9de <_strtod_l+0x8fe>
 800ba70:	e60c      	b.n	800b68c <_strtod_l+0x5ac>
 800ba72:	9907      	ldr	r1, [sp, #28]
 800ba74:	9806      	ldr	r0, [sp, #24]
 800ba76:	f7ff faad 	bl	800afd4 <__ratio>
 800ba7a:	2380      	movs	r3, #128	@ 0x80
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	05db      	lsls	r3, r3, #23
 800ba80:	0004      	movs	r4, r0
 800ba82:	000d      	movs	r5, r1
 800ba84:	f7f4 fcf0 	bl	8000468 <__aeabi_dcmple>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d06c      	beq.n	800bb66 <_strtod_l+0xa86>
 800ba8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d177      	bne.n	800bb82 <_strtod_l+0xaa2>
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	d157      	bne.n	800bb46 <_strtod_l+0xa66>
 800ba96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba98:	031b      	lsls	r3, r3, #12
 800ba9a:	d15a      	bne.n	800bb52 <_strtod_l+0xa72>
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	0020      	movs	r0, r4
 800baa0:	0029      	movs	r1, r5
 800baa2:	4b7a      	ldr	r3, [pc, #488]	@ (800bc8c <_strtod_l+0xbac>)
 800baa4:	f7f4 fcd6 	bl	8000454 <__aeabi_dcmplt>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d159      	bne.n	800bb60 <_strtod_l+0xa80>
 800baac:	0020      	movs	r0, r4
 800baae:	0029      	movs	r1, r5
 800bab0:	2200      	movs	r2, #0
 800bab2:	4b77      	ldr	r3, [pc, #476]	@ (800bc90 <_strtod_l+0xbb0>)
 800bab4:	f7f6 fc1c 	bl	80022f0 <__aeabi_dmul>
 800bab8:	0004      	movs	r4, r0
 800baba:	000d      	movs	r5, r1
 800babc:	2380      	movs	r3, #128	@ 0x80
 800babe:	061b      	lsls	r3, r3, #24
 800bac0:	18eb      	adds	r3, r5, r3
 800bac2:	940a      	str	r4, [sp, #40]	@ 0x28
 800bac4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bac6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bac8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baca:	9214      	str	r2, [sp, #80]	@ 0x50
 800bacc:	9315      	str	r3, [sp, #84]	@ 0x54
 800bace:	4a71      	ldr	r2, [pc, #452]	@ (800bc94 <_strtod_l+0xbb4>)
 800bad0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bad2:	4013      	ands	r3, r2
 800bad4:	9316      	str	r3, [sp, #88]	@ 0x58
 800bad6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bad8:	4b6f      	ldr	r3, [pc, #444]	@ (800bc98 <_strtod_l+0xbb8>)
 800bada:	429a      	cmp	r2, r3
 800badc:	d000      	beq.n	800bae0 <_strtod_l+0xa00>
 800bade:	e087      	b.n	800bbf0 <_strtod_l+0xb10>
 800bae0:	4a6e      	ldr	r2, [pc, #440]	@ (800bc9c <_strtod_l+0xbbc>)
 800bae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bae4:	4694      	mov	ip, r2
 800bae6:	4463      	add	r3, ip
 800bae8:	001f      	movs	r7, r3
 800baea:	0030      	movs	r0, r6
 800baec:	0019      	movs	r1, r3
 800baee:	f7ff f9a5 	bl	800ae3c <__ulp>
 800baf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800baf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baf6:	f7f6 fbfb 	bl	80022f0 <__aeabi_dmul>
 800bafa:	0032      	movs	r2, r6
 800bafc:	003b      	movs	r3, r7
 800bafe:	f7f5 fc4f 	bl	80013a0 <__aeabi_dadd>
 800bb02:	4a64      	ldr	r2, [pc, #400]	@ (800bc94 <_strtod_l+0xbb4>)
 800bb04:	4b66      	ldr	r3, [pc, #408]	@ (800bca0 <_strtod_l+0xbc0>)
 800bb06:	0006      	movs	r6, r0
 800bb08:	400a      	ands	r2, r1
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d940      	bls.n	800bb90 <_strtod_l+0xab0>
 800bb0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb10:	4a64      	ldr	r2, [pc, #400]	@ (800bca4 <_strtod_l+0xbc4>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d103      	bne.n	800bb1e <_strtod_l+0xa3e>
 800bb16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb18:	3301      	adds	r3, #1
 800bb1a:	d100      	bne.n	800bb1e <_strtod_l+0xa3e>
 800bb1c:	e51a      	b.n	800b554 <_strtod_l+0x474>
 800bb1e:	2601      	movs	r6, #1
 800bb20:	4f60      	ldr	r7, [pc, #384]	@ (800bca4 <_strtod_l+0xbc4>)
 800bb22:	4276      	negs	r6, r6
 800bb24:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800bb26:	9805      	ldr	r0, [sp, #20]
 800bb28:	f7fe fe3c 	bl	800a7a4 <_Bfree>
 800bb2c:	9908      	ldr	r1, [sp, #32]
 800bb2e:	9805      	ldr	r0, [sp, #20]
 800bb30:	f7fe fe38 	bl	800a7a4 <_Bfree>
 800bb34:	9907      	ldr	r1, [sp, #28]
 800bb36:	9805      	ldr	r0, [sp, #20]
 800bb38:	f7fe fe34 	bl	800a7a4 <_Bfree>
 800bb3c:	9906      	ldr	r1, [sp, #24]
 800bb3e:	9805      	ldr	r0, [sp, #20]
 800bb40:	f7fe fe30 	bl	800a7a4 <_Bfree>
 800bb44:	e617      	b.n	800b776 <_strtod_l+0x696>
 800bb46:	2e01      	cmp	r6, #1
 800bb48:	d103      	bne.n	800bb52 <_strtod_l+0xa72>
 800bb4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d100      	bne.n	800bb52 <_strtod_l+0xa72>
 800bb50:	e59c      	b.n	800b68c <_strtod_l+0x5ac>
 800bb52:	2300      	movs	r3, #0
 800bb54:	4c54      	ldr	r4, [pc, #336]	@ (800bca8 <_strtod_l+0xbc8>)
 800bb56:	4d4d      	ldr	r5, [pc, #308]	@ (800bc8c <_strtod_l+0xbac>)
 800bb58:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb5c:	2400      	movs	r4, #0
 800bb5e:	e7b2      	b.n	800bac6 <_strtod_l+0x9e6>
 800bb60:	2400      	movs	r4, #0
 800bb62:	4d4b      	ldr	r5, [pc, #300]	@ (800bc90 <_strtod_l+0xbb0>)
 800bb64:	e7aa      	b.n	800babc <_strtod_l+0x9dc>
 800bb66:	0020      	movs	r0, r4
 800bb68:	0029      	movs	r1, r5
 800bb6a:	4b49      	ldr	r3, [pc, #292]	@ (800bc90 <_strtod_l+0xbb0>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f7f6 fbbf 	bl	80022f0 <__aeabi_dmul>
 800bb72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb74:	0004      	movs	r4, r0
 800bb76:	000d      	movs	r5, r1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d09f      	beq.n	800babc <_strtod_l+0x9dc>
 800bb7c:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb7e:	950b      	str	r5, [sp, #44]	@ 0x2c
 800bb80:	e7a1      	b.n	800bac6 <_strtod_l+0x9e6>
 800bb82:	2300      	movs	r3, #0
 800bb84:	4c41      	ldr	r4, [pc, #260]	@ (800bc8c <_strtod_l+0xbac>)
 800bb86:	0025      	movs	r5, r4
 800bb88:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb8c:	001c      	movs	r4, r3
 800bb8e:	e79a      	b.n	800bac6 <_strtod_l+0x9e6>
 800bb90:	23d4      	movs	r3, #212	@ 0xd4
 800bb92:	049b      	lsls	r3, r3, #18
 800bb94:	18cf      	adds	r7, r1, r3
 800bb96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb98:	9710      	str	r7, [sp, #64]	@ 0x40
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1c2      	bne.n	800bb24 <_strtod_l+0xa44>
 800bb9e:	4b3d      	ldr	r3, [pc, #244]	@ (800bc94 <_strtod_l+0xbb4>)
 800bba0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bba2:	403b      	ands	r3, r7
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d1bd      	bne.n	800bb24 <_strtod_l+0xa44>
 800bba8:	0020      	movs	r0, r4
 800bbaa:	0029      	movs	r1, r5
 800bbac:	f7f4 fcea 	bl	8000584 <__aeabi_d2lz>
 800bbb0:	f7f4 fd22 	bl	80005f8 <__aeabi_l2d>
 800bbb4:	0002      	movs	r2, r0
 800bbb6:	000b      	movs	r3, r1
 800bbb8:	0020      	movs	r0, r4
 800bbba:	0029      	movs	r1, r5
 800bbbc:	f7f6 fe60 	bl	8002880 <__aeabi_dsub>
 800bbc0:	033c      	lsls	r4, r7, #12
 800bbc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bbc4:	0b24      	lsrs	r4, r4, #12
 800bbc6:	4334      	orrs	r4, r6
 800bbc8:	900e      	str	r0, [sp, #56]	@ 0x38
 800bbca:	910f      	str	r1, [sp, #60]	@ 0x3c
 800bbcc:	4a37      	ldr	r2, [pc, #220]	@ (800bcac <_strtod_l+0xbcc>)
 800bbce:	431c      	orrs	r4, r3
 800bbd0:	d052      	beq.n	800bc78 <_strtod_l+0xb98>
 800bbd2:	4b37      	ldr	r3, [pc, #220]	@ (800bcb0 <_strtod_l+0xbd0>)
 800bbd4:	f7f4 fc3e 	bl	8000454 <__aeabi_dcmplt>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d000      	beq.n	800bbde <_strtod_l+0xafe>
 800bbdc:	e4c3      	b.n	800b566 <_strtod_l+0x486>
 800bbde:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800bbe0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bbe2:	4a34      	ldr	r2, [pc, #208]	@ (800bcb4 <_strtod_l+0xbd4>)
 800bbe4:	4b2a      	ldr	r3, [pc, #168]	@ (800bc90 <_strtod_l+0xbb0>)
 800bbe6:	f7f4 fc49 	bl	800047c <__aeabi_dcmpgt>
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d09a      	beq.n	800bb24 <_strtod_l+0xa44>
 800bbee:	e4ba      	b.n	800b566 <_strtod_l+0x486>
 800bbf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d02a      	beq.n	800bc4c <_strtod_l+0xb6c>
 800bbf6:	23d4      	movs	r3, #212	@ 0xd4
 800bbf8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bbfa:	04db      	lsls	r3, r3, #19
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d825      	bhi.n	800bc4c <_strtod_l+0xb6c>
 800bc00:	0020      	movs	r0, r4
 800bc02:	0029      	movs	r1, r5
 800bc04:	4a2c      	ldr	r2, [pc, #176]	@ (800bcb8 <_strtod_l+0xbd8>)
 800bc06:	4b2d      	ldr	r3, [pc, #180]	@ (800bcbc <_strtod_l+0xbdc>)
 800bc08:	f7f4 fc2e 	bl	8000468 <__aeabi_dcmple>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d016      	beq.n	800bc3e <_strtod_l+0xb5e>
 800bc10:	0020      	movs	r0, r4
 800bc12:	0029      	movs	r1, r5
 800bc14:	f7f4 fc98 	bl	8000548 <__aeabi_d2uiz>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d100      	bne.n	800bc1e <_strtod_l+0xb3e>
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	f7f7 fa57 	bl	80030d0 <__aeabi_ui2d>
 800bc22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc24:	0004      	movs	r4, r0
 800bc26:	000d      	movs	r5, r1
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d122      	bne.n	800bc72 <_strtod_l+0xb92>
 800bc2c:	2380      	movs	r3, #128	@ 0x80
 800bc2e:	061b      	lsls	r3, r3, #24
 800bc30:	18cb      	adds	r3, r1, r3
 800bc32:	9018      	str	r0, [sp, #96]	@ 0x60
 800bc34:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc36:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800bc38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc3a:	9214      	str	r2, [sp, #80]	@ 0x50
 800bc3c:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc3e:	22d6      	movs	r2, #214	@ 0xd6
 800bc40:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bc42:	04d2      	lsls	r2, r2, #19
 800bc44:	189b      	adds	r3, r3, r2
 800bc46:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bc48:	1a9b      	subs	r3, r3, r2
 800bc4a:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc4c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bc4e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800bc50:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800bc52:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800bc54:	f7ff f8f2 	bl	800ae3c <__ulp>
 800bc58:	0002      	movs	r2, r0
 800bc5a:	000b      	movs	r3, r1
 800bc5c:	0030      	movs	r0, r6
 800bc5e:	0039      	movs	r1, r7
 800bc60:	f7f6 fb46 	bl	80022f0 <__aeabi_dmul>
 800bc64:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bc66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc68:	f7f5 fb9a 	bl	80013a0 <__aeabi_dadd>
 800bc6c:	0006      	movs	r6, r0
 800bc6e:	000f      	movs	r7, r1
 800bc70:	e791      	b.n	800bb96 <_strtod_l+0xab6>
 800bc72:	9418      	str	r4, [sp, #96]	@ 0x60
 800bc74:	9519      	str	r5, [sp, #100]	@ 0x64
 800bc76:	e7de      	b.n	800bc36 <_strtod_l+0xb56>
 800bc78:	4b11      	ldr	r3, [pc, #68]	@ (800bcc0 <_strtod_l+0xbe0>)
 800bc7a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800bc7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bc7e:	f7f4 fbe9 	bl	8000454 <__aeabi_dcmplt>
 800bc82:	e7b2      	b.n	800bbea <_strtod_l+0xb0a>
 800bc84:	fff00000 	.word	0xfff00000
 800bc88:	000fffff 	.word	0x000fffff
 800bc8c:	3ff00000 	.word	0x3ff00000
 800bc90:	3fe00000 	.word	0x3fe00000
 800bc94:	7ff00000 	.word	0x7ff00000
 800bc98:	7fe00000 	.word	0x7fe00000
 800bc9c:	fcb00000 	.word	0xfcb00000
 800bca0:	7c9fffff 	.word	0x7c9fffff
 800bca4:	7fefffff 	.word	0x7fefffff
 800bca8:	bff00000 	.word	0xbff00000
 800bcac:	94a03595 	.word	0x94a03595
 800bcb0:	3fdfffff 	.word	0x3fdfffff
 800bcb4:	35afe535 	.word	0x35afe535
 800bcb8:	ffc00000 	.word	0xffc00000
 800bcbc:	41dfffff 	.word	0x41dfffff
 800bcc0:	3fcfffff 	.word	0x3fcfffff

0800bcc4 <_strtod_r>:
 800bcc4:	b510      	push	{r4, lr}
 800bcc6:	4b02      	ldr	r3, [pc, #8]	@ (800bcd0 <_strtod_r+0xc>)
 800bcc8:	f7ff fa0a 	bl	800b0e0 <_strtod_l>
 800bccc:	bd10      	pop	{r4, pc}
 800bcce:	46c0      	nop			@ (mov r8, r8)
 800bcd0:	20000080 	.word	0x20000080

0800bcd4 <_strtol_l.constprop.0>:
 800bcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	0017      	movs	r7, r2
 800bcda:	001e      	movs	r6, r3
 800bcdc:	9003      	str	r0, [sp, #12]
 800bcde:	9101      	str	r1, [sp, #4]
 800bce0:	2b24      	cmp	r3, #36	@ 0x24
 800bce2:	d844      	bhi.n	800bd6e <_strtol_l.constprop.0+0x9a>
 800bce4:	000c      	movs	r4, r1
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d041      	beq.n	800bd6e <_strtol_l.constprop.0+0x9a>
 800bcea:	4b3d      	ldr	r3, [pc, #244]	@ (800bde0 <_strtol_l.constprop.0+0x10c>)
 800bcec:	2208      	movs	r2, #8
 800bcee:	469c      	mov	ip, r3
 800bcf0:	0023      	movs	r3, r4
 800bcf2:	4661      	mov	r1, ip
 800bcf4:	781d      	ldrb	r5, [r3, #0]
 800bcf6:	3401      	adds	r4, #1
 800bcf8:	5d48      	ldrb	r0, [r1, r5]
 800bcfa:	0001      	movs	r1, r0
 800bcfc:	4011      	ands	r1, r2
 800bcfe:	4210      	tst	r0, r2
 800bd00:	d1f6      	bne.n	800bcf0 <_strtol_l.constprop.0+0x1c>
 800bd02:	2d2d      	cmp	r5, #45	@ 0x2d
 800bd04:	d13a      	bne.n	800bd7c <_strtol_l.constprop.0+0xa8>
 800bd06:	7825      	ldrb	r5, [r4, #0]
 800bd08:	1c9c      	adds	r4, r3, #2
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	2210      	movs	r2, #16
 800bd10:	0033      	movs	r3, r6
 800bd12:	4393      	bics	r3, r2
 800bd14:	d109      	bne.n	800bd2a <_strtol_l.constprop.0+0x56>
 800bd16:	2d30      	cmp	r5, #48	@ 0x30
 800bd18:	d136      	bne.n	800bd88 <_strtol_l.constprop.0+0xb4>
 800bd1a:	2120      	movs	r1, #32
 800bd1c:	7823      	ldrb	r3, [r4, #0]
 800bd1e:	438b      	bics	r3, r1
 800bd20:	2b58      	cmp	r3, #88	@ 0x58
 800bd22:	d131      	bne.n	800bd88 <_strtol_l.constprop.0+0xb4>
 800bd24:	0016      	movs	r6, r2
 800bd26:	7865      	ldrb	r5, [r4, #1]
 800bd28:	3402      	adds	r4, #2
 800bd2a:	4a2e      	ldr	r2, [pc, #184]	@ (800bde4 <_strtol_l.constprop.0+0x110>)
 800bd2c:	9b00      	ldr	r3, [sp, #0]
 800bd2e:	4694      	mov	ip, r2
 800bd30:	4463      	add	r3, ip
 800bd32:	0031      	movs	r1, r6
 800bd34:	0018      	movs	r0, r3
 800bd36:	9302      	str	r3, [sp, #8]
 800bd38:	f7f4 fa86 	bl	8000248 <__aeabi_uidivmod>
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	4684      	mov	ip, r0
 800bd40:	0010      	movs	r0, r2
 800bd42:	002b      	movs	r3, r5
 800bd44:	3b30      	subs	r3, #48	@ 0x30
 800bd46:	2b09      	cmp	r3, #9
 800bd48:	d825      	bhi.n	800bd96 <_strtol_l.constprop.0+0xc2>
 800bd4a:	001d      	movs	r5, r3
 800bd4c:	42ae      	cmp	r6, r5
 800bd4e:	dd31      	ble.n	800bdb4 <_strtol_l.constprop.0+0xe0>
 800bd50:	1c53      	adds	r3, r2, #1
 800bd52:	d009      	beq.n	800bd68 <_strtol_l.constprop.0+0x94>
 800bd54:	2201      	movs	r2, #1
 800bd56:	4252      	negs	r2, r2
 800bd58:	4584      	cmp	ip, r0
 800bd5a:	d305      	bcc.n	800bd68 <_strtol_l.constprop.0+0x94>
 800bd5c:	d101      	bne.n	800bd62 <_strtol_l.constprop.0+0x8e>
 800bd5e:	42a9      	cmp	r1, r5
 800bd60:	db25      	blt.n	800bdae <_strtol_l.constprop.0+0xda>
 800bd62:	2201      	movs	r2, #1
 800bd64:	4370      	muls	r0, r6
 800bd66:	1828      	adds	r0, r5, r0
 800bd68:	7825      	ldrb	r5, [r4, #0]
 800bd6a:	3401      	adds	r4, #1
 800bd6c:	e7e9      	b.n	800bd42 <_strtol_l.constprop.0+0x6e>
 800bd6e:	f7fd fdcd 	bl	800990c <__errno>
 800bd72:	2316      	movs	r3, #22
 800bd74:	6003      	str	r3, [r0, #0]
 800bd76:	2000      	movs	r0, #0
 800bd78:	b005      	add	sp, #20
 800bd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd7c:	9100      	str	r1, [sp, #0]
 800bd7e:	2d2b      	cmp	r5, #43	@ 0x2b
 800bd80:	d1c5      	bne.n	800bd0e <_strtol_l.constprop.0+0x3a>
 800bd82:	7825      	ldrb	r5, [r4, #0]
 800bd84:	1c9c      	adds	r4, r3, #2
 800bd86:	e7c2      	b.n	800bd0e <_strtol_l.constprop.0+0x3a>
 800bd88:	2e00      	cmp	r6, #0
 800bd8a:	d1ce      	bne.n	800bd2a <_strtol_l.constprop.0+0x56>
 800bd8c:	3608      	adds	r6, #8
 800bd8e:	2d30      	cmp	r5, #48	@ 0x30
 800bd90:	d0cb      	beq.n	800bd2a <_strtol_l.constprop.0+0x56>
 800bd92:	3602      	adds	r6, #2
 800bd94:	e7c9      	b.n	800bd2a <_strtol_l.constprop.0+0x56>
 800bd96:	002b      	movs	r3, r5
 800bd98:	3b41      	subs	r3, #65	@ 0x41
 800bd9a:	2b19      	cmp	r3, #25
 800bd9c:	d801      	bhi.n	800bda2 <_strtol_l.constprop.0+0xce>
 800bd9e:	3d37      	subs	r5, #55	@ 0x37
 800bda0:	e7d4      	b.n	800bd4c <_strtol_l.constprop.0+0x78>
 800bda2:	002b      	movs	r3, r5
 800bda4:	3b61      	subs	r3, #97	@ 0x61
 800bda6:	2b19      	cmp	r3, #25
 800bda8:	d804      	bhi.n	800bdb4 <_strtol_l.constprop.0+0xe0>
 800bdaa:	3d57      	subs	r5, #87	@ 0x57
 800bdac:	e7ce      	b.n	800bd4c <_strtol_l.constprop.0+0x78>
 800bdae:	2201      	movs	r2, #1
 800bdb0:	4252      	negs	r2, r2
 800bdb2:	e7d9      	b.n	800bd68 <_strtol_l.constprop.0+0x94>
 800bdb4:	1c53      	adds	r3, r2, #1
 800bdb6:	d108      	bne.n	800bdca <_strtol_l.constprop.0+0xf6>
 800bdb8:	2322      	movs	r3, #34	@ 0x22
 800bdba:	9a03      	ldr	r2, [sp, #12]
 800bdbc:	9802      	ldr	r0, [sp, #8]
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	2f00      	cmp	r7, #0
 800bdc2:	d0d9      	beq.n	800bd78 <_strtol_l.constprop.0+0xa4>
 800bdc4:	1e63      	subs	r3, r4, #1
 800bdc6:	9301      	str	r3, [sp, #4]
 800bdc8:	e007      	b.n	800bdda <_strtol_l.constprop.0+0x106>
 800bdca:	9b00      	ldr	r3, [sp, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d000      	beq.n	800bdd2 <_strtol_l.constprop.0+0xfe>
 800bdd0:	4240      	negs	r0, r0
 800bdd2:	2f00      	cmp	r7, #0
 800bdd4:	d0d0      	beq.n	800bd78 <_strtol_l.constprop.0+0xa4>
 800bdd6:	2a00      	cmp	r2, #0
 800bdd8:	d1f4      	bne.n	800bdc4 <_strtol_l.constprop.0+0xf0>
 800bdda:	9b01      	ldr	r3, [sp, #4]
 800bddc:	603b      	str	r3, [r7, #0]
 800bdde:	e7cb      	b.n	800bd78 <_strtol_l.constprop.0+0xa4>
 800bde0:	0800eee9 	.word	0x0800eee9
 800bde4:	7fffffff 	.word	0x7fffffff

0800bde8 <_strtol_r>:
 800bde8:	b510      	push	{r4, lr}
 800bdea:	f7ff ff73 	bl	800bcd4 <_strtol_l.constprop.0>
 800bdee:	bd10      	pop	{r4, pc}

0800bdf0 <__ssputs_r>:
 800bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdf2:	688e      	ldr	r6, [r1, #8]
 800bdf4:	b085      	sub	sp, #20
 800bdf6:	001f      	movs	r7, r3
 800bdf8:	000c      	movs	r4, r1
 800bdfa:	680b      	ldr	r3, [r1, #0]
 800bdfc:	9002      	str	r0, [sp, #8]
 800bdfe:	9203      	str	r2, [sp, #12]
 800be00:	42be      	cmp	r6, r7
 800be02:	d830      	bhi.n	800be66 <__ssputs_r+0x76>
 800be04:	210c      	movs	r1, #12
 800be06:	5e62      	ldrsh	r2, [r4, r1]
 800be08:	2190      	movs	r1, #144	@ 0x90
 800be0a:	00c9      	lsls	r1, r1, #3
 800be0c:	420a      	tst	r2, r1
 800be0e:	d028      	beq.n	800be62 <__ssputs_r+0x72>
 800be10:	2003      	movs	r0, #3
 800be12:	6921      	ldr	r1, [r4, #16]
 800be14:	1a5b      	subs	r3, r3, r1
 800be16:	9301      	str	r3, [sp, #4]
 800be18:	6963      	ldr	r3, [r4, #20]
 800be1a:	4343      	muls	r3, r0
 800be1c:	9801      	ldr	r0, [sp, #4]
 800be1e:	0fdd      	lsrs	r5, r3, #31
 800be20:	18ed      	adds	r5, r5, r3
 800be22:	1c7b      	adds	r3, r7, #1
 800be24:	181b      	adds	r3, r3, r0
 800be26:	106d      	asrs	r5, r5, #1
 800be28:	42ab      	cmp	r3, r5
 800be2a:	d900      	bls.n	800be2e <__ssputs_r+0x3e>
 800be2c:	001d      	movs	r5, r3
 800be2e:	0552      	lsls	r2, r2, #21
 800be30:	d528      	bpl.n	800be84 <__ssputs_r+0x94>
 800be32:	0029      	movs	r1, r5
 800be34:	9802      	ldr	r0, [sp, #8]
 800be36:	f7fc fccd 	bl	80087d4 <_malloc_r>
 800be3a:	1e06      	subs	r6, r0, #0
 800be3c:	d02c      	beq.n	800be98 <__ssputs_r+0xa8>
 800be3e:	9a01      	ldr	r2, [sp, #4]
 800be40:	6921      	ldr	r1, [r4, #16]
 800be42:	f000 fa08 	bl	800c256 <memcpy>
 800be46:	89a2      	ldrh	r2, [r4, #12]
 800be48:	4b18      	ldr	r3, [pc, #96]	@ (800beac <__ssputs_r+0xbc>)
 800be4a:	401a      	ands	r2, r3
 800be4c:	2380      	movs	r3, #128	@ 0x80
 800be4e:	4313      	orrs	r3, r2
 800be50:	81a3      	strh	r3, [r4, #12]
 800be52:	9b01      	ldr	r3, [sp, #4]
 800be54:	6126      	str	r6, [r4, #16]
 800be56:	18f6      	adds	r6, r6, r3
 800be58:	6026      	str	r6, [r4, #0]
 800be5a:	003e      	movs	r6, r7
 800be5c:	6165      	str	r5, [r4, #20]
 800be5e:	1aed      	subs	r5, r5, r3
 800be60:	60a5      	str	r5, [r4, #8]
 800be62:	42be      	cmp	r6, r7
 800be64:	d900      	bls.n	800be68 <__ssputs_r+0x78>
 800be66:	003e      	movs	r6, r7
 800be68:	0032      	movs	r2, r6
 800be6a:	9903      	ldr	r1, [sp, #12]
 800be6c:	6820      	ldr	r0, [r4, #0]
 800be6e:	f000 f9ce 	bl	800c20e <memmove>
 800be72:	2000      	movs	r0, #0
 800be74:	68a3      	ldr	r3, [r4, #8]
 800be76:	1b9b      	subs	r3, r3, r6
 800be78:	60a3      	str	r3, [r4, #8]
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	199b      	adds	r3, r3, r6
 800be7e:	6023      	str	r3, [r4, #0]
 800be80:	b005      	add	sp, #20
 800be82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be84:	002a      	movs	r2, r5
 800be86:	9802      	ldr	r0, [sp, #8]
 800be88:	f000 fdac 	bl	800c9e4 <_realloc_r>
 800be8c:	1e06      	subs	r6, r0, #0
 800be8e:	d1e0      	bne.n	800be52 <__ssputs_r+0x62>
 800be90:	6921      	ldr	r1, [r4, #16]
 800be92:	9802      	ldr	r0, [sp, #8]
 800be94:	f7fe fbf8 	bl	800a688 <_free_r>
 800be98:	230c      	movs	r3, #12
 800be9a:	2001      	movs	r0, #1
 800be9c:	9a02      	ldr	r2, [sp, #8]
 800be9e:	4240      	negs	r0, r0
 800bea0:	6013      	str	r3, [r2, #0]
 800bea2:	89a2      	ldrh	r2, [r4, #12]
 800bea4:	3334      	adds	r3, #52	@ 0x34
 800bea6:	4313      	orrs	r3, r2
 800bea8:	81a3      	strh	r3, [r4, #12]
 800beaa:	e7e9      	b.n	800be80 <__ssputs_r+0x90>
 800beac:	fffffb7f 	.word	0xfffffb7f

0800beb0 <_svfiprintf_r>:
 800beb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb2:	b0a1      	sub	sp, #132	@ 0x84
 800beb4:	9003      	str	r0, [sp, #12]
 800beb6:	001d      	movs	r5, r3
 800beb8:	898b      	ldrh	r3, [r1, #12]
 800beba:	000f      	movs	r7, r1
 800bebc:	0016      	movs	r6, r2
 800bebe:	061b      	lsls	r3, r3, #24
 800bec0:	d511      	bpl.n	800bee6 <_svfiprintf_r+0x36>
 800bec2:	690b      	ldr	r3, [r1, #16]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10e      	bne.n	800bee6 <_svfiprintf_r+0x36>
 800bec8:	2140      	movs	r1, #64	@ 0x40
 800beca:	f7fc fc83 	bl	80087d4 <_malloc_r>
 800bece:	6038      	str	r0, [r7, #0]
 800bed0:	6138      	str	r0, [r7, #16]
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d105      	bne.n	800bee2 <_svfiprintf_r+0x32>
 800bed6:	230c      	movs	r3, #12
 800bed8:	9a03      	ldr	r2, [sp, #12]
 800beda:	6013      	str	r3, [r2, #0]
 800bedc:	2001      	movs	r0, #1
 800bede:	4240      	negs	r0, r0
 800bee0:	e0cf      	b.n	800c082 <_svfiprintf_r+0x1d2>
 800bee2:	2340      	movs	r3, #64	@ 0x40
 800bee4:	617b      	str	r3, [r7, #20]
 800bee6:	2300      	movs	r3, #0
 800bee8:	ac08      	add	r4, sp, #32
 800beea:	6163      	str	r3, [r4, #20]
 800beec:	3320      	adds	r3, #32
 800beee:	7663      	strb	r3, [r4, #25]
 800bef0:	3310      	adds	r3, #16
 800bef2:	76a3      	strb	r3, [r4, #26]
 800bef4:	9507      	str	r5, [sp, #28]
 800bef6:	0035      	movs	r5, r6
 800bef8:	782b      	ldrb	r3, [r5, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d001      	beq.n	800bf02 <_svfiprintf_r+0x52>
 800befe:	2b25      	cmp	r3, #37	@ 0x25
 800bf00:	d148      	bne.n	800bf94 <_svfiprintf_r+0xe4>
 800bf02:	1bab      	subs	r3, r5, r6
 800bf04:	9305      	str	r3, [sp, #20]
 800bf06:	42b5      	cmp	r5, r6
 800bf08:	d00b      	beq.n	800bf22 <_svfiprintf_r+0x72>
 800bf0a:	0032      	movs	r2, r6
 800bf0c:	0039      	movs	r1, r7
 800bf0e:	9803      	ldr	r0, [sp, #12]
 800bf10:	f7ff ff6e 	bl	800bdf0 <__ssputs_r>
 800bf14:	3001      	adds	r0, #1
 800bf16:	d100      	bne.n	800bf1a <_svfiprintf_r+0x6a>
 800bf18:	e0ae      	b.n	800c078 <_svfiprintf_r+0x1c8>
 800bf1a:	6963      	ldr	r3, [r4, #20]
 800bf1c:	9a05      	ldr	r2, [sp, #20]
 800bf1e:	189b      	adds	r3, r3, r2
 800bf20:	6163      	str	r3, [r4, #20]
 800bf22:	782b      	ldrb	r3, [r5, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d100      	bne.n	800bf2a <_svfiprintf_r+0x7a>
 800bf28:	e0a6      	b.n	800c078 <_svfiprintf_r+0x1c8>
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	4252      	negs	r2, r2
 800bf30:	6062      	str	r2, [r4, #4]
 800bf32:	a904      	add	r1, sp, #16
 800bf34:	3254      	adds	r2, #84	@ 0x54
 800bf36:	1852      	adds	r2, r2, r1
 800bf38:	1c6e      	adds	r6, r5, #1
 800bf3a:	6023      	str	r3, [r4, #0]
 800bf3c:	60e3      	str	r3, [r4, #12]
 800bf3e:	60a3      	str	r3, [r4, #8]
 800bf40:	7013      	strb	r3, [r2, #0]
 800bf42:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bf44:	4b54      	ldr	r3, [pc, #336]	@ (800c098 <_svfiprintf_r+0x1e8>)
 800bf46:	2205      	movs	r2, #5
 800bf48:	0018      	movs	r0, r3
 800bf4a:	7831      	ldrb	r1, [r6, #0]
 800bf4c:	9305      	str	r3, [sp, #20]
 800bf4e:	f7fd fd0a 	bl	8009966 <memchr>
 800bf52:	1c75      	adds	r5, r6, #1
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d11f      	bne.n	800bf98 <_svfiprintf_r+0xe8>
 800bf58:	6822      	ldr	r2, [r4, #0]
 800bf5a:	06d3      	lsls	r3, r2, #27
 800bf5c:	d504      	bpl.n	800bf68 <_svfiprintf_r+0xb8>
 800bf5e:	2353      	movs	r3, #83	@ 0x53
 800bf60:	a904      	add	r1, sp, #16
 800bf62:	185b      	adds	r3, r3, r1
 800bf64:	2120      	movs	r1, #32
 800bf66:	7019      	strb	r1, [r3, #0]
 800bf68:	0713      	lsls	r3, r2, #28
 800bf6a:	d504      	bpl.n	800bf76 <_svfiprintf_r+0xc6>
 800bf6c:	2353      	movs	r3, #83	@ 0x53
 800bf6e:	a904      	add	r1, sp, #16
 800bf70:	185b      	adds	r3, r3, r1
 800bf72:	212b      	movs	r1, #43	@ 0x2b
 800bf74:	7019      	strb	r1, [r3, #0]
 800bf76:	7833      	ldrb	r3, [r6, #0]
 800bf78:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf7a:	d016      	beq.n	800bfaa <_svfiprintf_r+0xfa>
 800bf7c:	0035      	movs	r5, r6
 800bf7e:	2100      	movs	r1, #0
 800bf80:	200a      	movs	r0, #10
 800bf82:	68e3      	ldr	r3, [r4, #12]
 800bf84:	782a      	ldrb	r2, [r5, #0]
 800bf86:	1c6e      	adds	r6, r5, #1
 800bf88:	3a30      	subs	r2, #48	@ 0x30
 800bf8a:	2a09      	cmp	r2, #9
 800bf8c:	d950      	bls.n	800c030 <_svfiprintf_r+0x180>
 800bf8e:	2900      	cmp	r1, #0
 800bf90:	d111      	bne.n	800bfb6 <_svfiprintf_r+0x106>
 800bf92:	e017      	b.n	800bfc4 <_svfiprintf_r+0x114>
 800bf94:	3501      	adds	r5, #1
 800bf96:	e7af      	b.n	800bef8 <_svfiprintf_r+0x48>
 800bf98:	9b05      	ldr	r3, [sp, #20]
 800bf9a:	6822      	ldr	r2, [r4, #0]
 800bf9c:	1ac0      	subs	r0, r0, r3
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	4083      	lsls	r3, r0
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	002e      	movs	r6, r5
 800bfa6:	6023      	str	r3, [r4, #0]
 800bfa8:	e7cc      	b.n	800bf44 <_svfiprintf_r+0x94>
 800bfaa:	9b07      	ldr	r3, [sp, #28]
 800bfac:	1d19      	adds	r1, r3, #4
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	9107      	str	r1, [sp, #28]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	db01      	blt.n	800bfba <_svfiprintf_r+0x10a>
 800bfb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfb8:	e004      	b.n	800bfc4 <_svfiprintf_r+0x114>
 800bfba:	425b      	negs	r3, r3
 800bfbc:	60e3      	str	r3, [r4, #12]
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	6023      	str	r3, [r4, #0]
 800bfc4:	782b      	ldrb	r3, [r5, #0]
 800bfc6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfc8:	d10c      	bne.n	800bfe4 <_svfiprintf_r+0x134>
 800bfca:	786b      	ldrb	r3, [r5, #1]
 800bfcc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfce:	d134      	bne.n	800c03a <_svfiprintf_r+0x18a>
 800bfd0:	9b07      	ldr	r3, [sp, #28]
 800bfd2:	3502      	adds	r5, #2
 800bfd4:	1d1a      	adds	r2, r3, #4
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	9207      	str	r2, [sp, #28]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	da01      	bge.n	800bfe2 <_svfiprintf_r+0x132>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	425b      	negs	r3, r3
 800bfe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfe4:	4e2d      	ldr	r6, [pc, #180]	@ (800c09c <_svfiprintf_r+0x1ec>)
 800bfe6:	2203      	movs	r2, #3
 800bfe8:	0030      	movs	r0, r6
 800bfea:	7829      	ldrb	r1, [r5, #0]
 800bfec:	f7fd fcbb 	bl	8009966 <memchr>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d006      	beq.n	800c002 <_svfiprintf_r+0x152>
 800bff4:	2340      	movs	r3, #64	@ 0x40
 800bff6:	1b80      	subs	r0, r0, r6
 800bff8:	4083      	lsls	r3, r0
 800bffa:	6822      	ldr	r2, [r4, #0]
 800bffc:	3501      	adds	r5, #1
 800bffe:	4313      	orrs	r3, r2
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	7829      	ldrb	r1, [r5, #0]
 800c004:	2206      	movs	r2, #6
 800c006:	4826      	ldr	r0, [pc, #152]	@ (800c0a0 <_svfiprintf_r+0x1f0>)
 800c008:	1c6e      	adds	r6, r5, #1
 800c00a:	7621      	strb	r1, [r4, #24]
 800c00c:	f7fd fcab 	bl	8009966 <memchr>
 800c010:	2800      	cmp	r0, #0
 800c012:	d038      	beq.n	800c086 <_svfiprintf_r+0x1d6>
 800c014:	4b23      	ldr	r3, [pc, #140]	@ (800c0a4 <_svfiprintf_r+0x1f4>)
 800c016:	2b00      	cmp	r3, #0
 800c018:	d122      	bne.n	800c060 <_svfiprintf_r+0x1b0>
 800c01a:	2207      	movs	r2, #7
 800c01c:	9b07      	ldr	r3, [sp, #28]
 800c01e:	3307      	adds	r3, #7
 800c020:	4393      	bics	r3, r2
 800c022:	3308      	adds	r3, #8
 800c024:	9307      	str	r3, [sp, #28]
 800c026:	6963      	ldr	r3, [r4, #20]
 800c028:	9a04      	ldr	r2, [sp, #16]
 800c02a:	189b      	adds	r3, r3, r2
 800c02c:	6163      	str	r3, [r4, #20]
 800c02e:	e762      	b.n	800bef6 <_svfiprintf_r+0x46>
 800c030:	4343      	muls	r3, r0
 800c032:	0035      	movs	r5, r6
 800c034:	2101      	movs	r1, #1
 800c036:	189b      	adds	r3, r3, r2
 800c038:	e7a4      	b.n	800bf84 <_svfiprintf_r+0xd4>
 800c03a:	2300      	movs	r3, #0
 800c03c:	200a      	movs	r0, #10
 800c03e:	0019      	movs	r1, r3
 800c040:	3501      	adds	r5, #1
 800c042:	6063      	str	r3, [r4, #4]
 800c044:	782a      	ldrb	r2, [r5, #0]
 800c046:	1c6e      	adds	r6, r5, #1
 800c048:	3a30      	subs	r2, #48	@ 0x30
 800c04a:	2a09      	cmp	r2, #9
 800c04c:	d903      	bls.n	800c056 <_svfiprintf_r+0x1a6>
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d0c8      	beq.n	800bfe4 <_svfiprintf_r+0x134>
 800c052:	9109      	str	r1, [sp, #36]	@ 0x24
 800c054:	e7c6      	b.n	800bfe4 <_svfiprintf_r+0x134>
 800c056:	4341      	muls	r1, r0
 800c058:	0035      	movs	r5, r6
 800c05a:	2301      	movs	r3, #1
 800c05c:	1889      	adds	r1, r1, r2
 800c05e:	e7f1      	b.n	800c044 <_svfiprintf_r+0x194>
 800c060:	aa07      	add	r2, sp, #28
 800c062:	9200      	str	r2, [sp, #0]
 800c064:	0021      	movs	r1, r4
 800c066:	003a      	movs	r2, r7
 800c068:	4b0f      	ldr	r3, [pc, #60]	@ (800c0a8 <_svfiprintf_r+0x1f8>)
 800c06a:	9803      	ldr	r0, [sp, #12]
 800c06c:	f7fc fce8 	bl	8008a40 <_printf_float>
 800c070:	9004      	str	r0, [sp, #16]
 800c072:	9b04      	ldr	r3, [sp, #16]
 800c074:	3301      	adds	r3, #1
 800c076:	d1d6      	bne.n	800c026 <_svfiprintf_r+0x176>
 800c078:	89bb      	ldrh	r3, [r7, #12]
 800c07a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c07c:	065b      	lsls	r3, r3, #25
 800c07e:	d500      	bpl.n	800c082 <_svfiprintf_r+0x1d2>
 800c080:	e72c      	b.n	800bedc <_svfiprintf_r+0x2c>
 800c082:	b021      	add	sp, #132	@ 0x84
 800c084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c086:	aa07      	add	r2, sp, #28
 800c088:	9200      	str	r2, [sp, #0]
 800c08a:	0021      	movs	r1, r4
 800c08c:	003a      	movs	r2, r7
 800c08e:	4b06      	ldr	r3, [pc, #24]	@ (800c0a8 <_svfiprintf_r+0x1f8>)
 800c090:	9803      	ldr	r0, [sp, #12]
 800c092:	f7fc ff83 	bl	8008f9c <_printf_i>
 800c096:	e7eb      	b.n	800c070 <_svfiprintf_r+0x1c0>
 800c098:	0800efe9 	.word	0x0800efe9
 800c09c:	0800efef 	.word	0x0800efef
 800c0a0:	0800eff3 	.word	0x0800eff3
 800c0a4:	08008a41 	.word	0x08008a41
 800c0a8:	0800bdf1 	.word	0x0800bdf1

0800c0ac <__sflush_r>:
 800c0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0ae:	220c      	movs	r2, #12
 800c0b0:	5e8b      	ldrsh	r3, [r1, r2]
 800c0b2:	0005      	movs	r5, r0
 800c0b4:	000c      	movs	r4, r1
 800c0b6:	071a      	lsls	r2, r3, #28
 800c0b8:	d456      	bmi.n	800c168 <__sflush_r+0xbc>
 800c0ba:	684a      	ldr	r2, [r1, #4]
 800c0bc:	2a00      	cmp	r2, #0
 800c0be:	dc02      	bgt.n	800c0c6 <__sflush_r+0x1a>
 800c0c0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800c0c2:	2a00      	cmp	r2, #0
 800c0c4:	dd4e      	ble.n	800c164 <__sflush_r+0xb8>
 800c0c6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c0c8:	2f00      	cmp	r7, #0
 800c0ca:	d04b      	beq.n	800c164 <__sflush_r+0xb8>
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	2080      	movs	r0, #128	@ 0x80
 800c0d0:	682e      	ldr	r6, [r5, #0]
 800c0d2:	602a      	str	r2, [r5, #0]
 800c0d4:	001a      	movs	r2, r3
 800c0d6:	0140      	lsls	r0, r0, #5
 800c0d8:	6a21      	ldr	r1, [r4, #32]
 800c0da:	4002      	ands	r2, r0
 800c0dc:	4203      	tst	r3, r0
 800c0de:	d033      	beq.n	800c148 <__sflush_r+0x9c>
 800c0e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	075b      	lsls	r3, r3, #29
 800c0e6:	d506      	bpl.n	800c0f6 <__sflush_r+0x4a>
 800c0e8:	6863      	ldr	r3, [r4, #4]
 800c0ea:	1ad2      	subs	r2, r2, r3
 800c0ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d001      	beq.n	800c0f6 <__sflush_r+0x4a>
 800c0f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0f4:	1ad2      	subs	r2, r2, r3
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	0028      	movs	r0, r5
 800c0fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c0fc:	6a21      	ldr	r1, [r4, #32]
 800c0fe:	47b8      	blx	r7
 800c100:	89a2      	ldrh	r2, [r4, #12]
 800c102:	1c43      	adds	r3, r0, #1
 800c104:	d106      	bne.n	800c114 <__sflush_r+0x68>
 800c106:	6829      	ldr	r1, [r5, #0]
 800c108:	291d      	cmp	r1, #29
 800c10a:	d846      	bhi.n	800c19a <__sflush_r+0xee>
 800c10c:	4b29      	ldr	r3, [pc, #164]	@ (800c1b4 <__sflush_r+0x108>)
 800c10e:	410b      	asrs	r3, r1
 800c110:	07db      	lsls	r3, r3, #31
 800c112:	d442      	bmi.n	800c19a <__sflush_r+0xee>
 800c114:	2300      	movs	r3, #0
 800c116:	6063      	str	r3, [r4, #4]
 800c118:	6923      	ldr	r3, [r4, #16]
 800c11a:	6023      	str	r3, [r4, #0]
 800c11c:	04d2      	lsls	r2, r2, #19
 800c11e:	d505      	bpl.n	800c12c <__sflush_r+0x80>
 800c120:	1c43      	adds	r3, r0, #1
 800c122:	d102      	bne.n	800c12a <__sflush_r+0x7e>
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d100      	bne.n	800c12c <__sflush_r+0x80>
 800c12a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c12c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c12e:	602e      	str	r6, [r5, #0]
 800c130:	2900      	cmp	r1, #0
 800c132:	d017      	beq.n	800c164 <__sflush_r+0xb8>
 800c134:	0023      	movs	r3, r4
 800c136:	3344      	adds	r3, #68	@ 0x44
 800c138:	4299      	cmp	r1, r3
 800c13a:	d002      	beq.n	800c142 <__sflush_r+0x96>
 800c13c:	0028      	movs	r0, r5
 800c13e:	f7fe faa3 	bl	800a688 <_free_r>
 800c142:	2300      	movs	r3, #0
 800c144:	6363      	str	r3, [r4, #52]	@ 0x34
 800c146:	e00d      	b.n	800c164 <__sflush_r+0xb8>
 800c148:	2301      	movs	r3, #1
 800c14a:	0028      	movs	r0, r5
 800c14c:	47b8      	blx	r7
 800c14e:	0002      	movs	r2, r0
 800c150:	1c43      	adds	r3, r0, #1
 800c152:	d1c6      	bne.n	800c0e2 <__sflush_r+0x36>
 800c154:	682b      	ldr	r3, [r5, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d0c3      	beq.n	800c0e2 <__sflush_r+0x36>
 800c15a:	2b1d      	cmp	r3, #29
 800c15c:	d001      	beq.n	800c162 <__sflush_r+0xb6>
 800c15e:	2b16      	cmp	r3, #22
 800c160:	d11a      	bne.n	800c198 <__sflush_r+0xec>
 800c162:	602e      	str	r6, [r5, #0]
 800c164:	2000      	movs	r0, #0
 800c166:	e01e      	b.n	800c1a6 <__sflush_r+0xfa>
 800c168:	690e      	ldr	r6, [r1, #16]
 800c16a:	2e00      	cmp	r6, #0
 800c16c:	d0fa      	beq.n	800c164 <__sflush_r+0xb8>
 800c16e:	680f      	ldr	r7, [r1, #0]
 800c170:	600e      	str	r6, [r1, #0]
 800c172:	1bba      	subs	r2, r7, r6
 800c174:	9201      	str	r2, [sp, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	079b      	lsls	r3, r3, #30
 800c17a:	d100      	bne.n	800c17e <__sflush_r+0xd2>
 800c17c:	694a      	ldr	r2, [r1, #20]
 800c17e:	60a2      	str	r2, [r4, #8]
 800c180:	9b01      	ldr	r3, [sp, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	ddee      	ble.n	800c164 <__sflush_r+0xb8>
 800c186:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c188:	0032      	movs	r2, r6
 800c18a:	001f      	movs	r7, r3
 800c18c:	0028      	movs	r0, r5
 800c18e:	9b01      	ldr	r3, [sp, #4]
 800c190:	6a21      	ldr	r1, [r4, #32]
 800c192:	47b8      	blx	r7
 800c194:	2800      	cmp	r0, #0
 800c196:	dc07      	bgt.n	800c1a8 <__sflush_r+0xfc>
 800c198:	89a2      	ldrh	r2, [r4, #12]
 800c19a:	2340      	movs	r3, #64	@ 0x40
 800c19c:	2001      	movs	r0, #1
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	b21b      	sxth	r3, r3
 800c1a2:	81a3      	strh	r3, [r4, #12]
 800c1a4:	4240      	negs	r0, r0
 800c1a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1a8:	9b01      	ldr	r3, [sp, #4]
 800c1aa:	1836      	adds	r6, r6, r0
 800c1ac:	1a1b      	subs	r3, r3, r0
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	e7e6      	b.n	800c180 <__sflush_r+0xd4>
 800c1b2:	46c0      	nop			@ (mov r8, r8)
 800c1b4:	dfbffffe 	.word	0xdfbffffe

0800c1b8 <_fflush_r>:
 800c1b8:	690b      	ldr	r3, [r1, #16]
 800c1ba:	b570      	push	{r4, r5, r6, lr}
 800c1bc:	0005      	movs	r5, r0
 800c1be:	000c      	movs	r4, r1
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d102      	bne.n	800c1ca <_fflush_r+0x12>
 800c1c4:	2500      	movs	r5, #0
 800c1c6:	0028      	movs	r0, r5
 800c1c8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d004      	beq.n	800c1d8 <_fflush_r+0x20>
 800c1ce:	6a03      	ldr	r3, [r0, #32]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <_fflush_r+0x20>
 800c1d4:	f7fd fa8e 	bl	80096f4 <__sinit>
 800c1d8:	220c      	movs	r2, #12
 800c1da:	5ea3      	ldrsh	r3, [r4, r2]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0f1      	beq.n	800c1c4 <_fflush_r+0xc>
 800c1e0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1e2:	07d2      	lsls	r2, r2, #31
 800c1e4:	d404      	bmi.n	800c1f0 <_fflush_r+0x38>
 800c1e6:	059b      	lsls	r3, r3, #22
 800c1e8:	d402      	bmi.n	800c1f0 <_fflush_r+0x38>
 800c1ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1ec:	f7fd fbb9 	bl	8009962 <__retarget_lock_acquire_recursive>
 800c1f0:	0028      	movs	r0, r5
 800c1f2:	0021      	movs	r1, r4
 800c1f4:	f7ff ff5a 	bl	800c0ac <__sflush_r>
 800c1f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1fa:	0005      	movs	r5, r0
 800c1fc:	07db      	lsls	r3, r3, #31
 800c1fe:	d4e2      	bmi.n	800c1c6 <_fflush_r+0xe>
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	059b      	lsls	r3, r3, #22
 800c204:	d4df      	bmi.n	800c1c6 <_fflush_r+0xe>
 800c206:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c208:	f7fd fbac 	bl	8009964 <__retarget_lock_release_recursive>
 800c20c:	e7db      	b.n	800c1c6 <_fflush_r+0xe>

0800c20e <memmove>:
 800c20e:	b510      	push	{r4, lr}
 800c210:	4288      	cmp	r0, r1
 800c212:	d806      	bhi.n	800c222 <memmove+0x14>
 800c214:	2300      	movs	r3, #0
 800c216:	429a      	cmp	r2, r3
 800c218:	d008      	beq.n	800c22c <memmove+0x1e>
 800c21a:	5ccc      	ldrb	r4, [r1, r3]
 800c21c:	54c4      	strb	r4, [r0, r3]
 800c21e:	3301      	adds	r3, #1
 800c220:	e7f9      	b.n	800c216 <memmove+0x8>
 800c222:	188b      	adds	r3, r1, r2
 800c224:	4298      	cmp	r0, r3
 800c226:	d2f5      	bcs.n	800c214 <memmove+0x6>
 800c228:	3a01      	subs	r2, #1
 800c22a:	d200      	bcs.n	800c22e <memmove+0x20>
 800c22c:	bd10      	pop	{r4, pc}
 800c22e:	5c8b      	ldrb	r3, [r1, r2]
 800c230:	5483      	strb	r3, [r0, r2]
 800c232:	e7f9      	b.n	800c228 <memmove+0x1a>

0800c234 <strncmp>:
 800c234:	b530      	push	{r4, r5, lr}
 800c236:	0005      	movs	r5, r0
 800c238:	1e10      	subs	r0, r2, #0
 800c23a:	d00b      	beq.n	800c254 <strncmp+0x20>
 800c23c:	2400      	movs	r4, #0
 800c23e:	3a01      	subs	r2, #1
 800c240:	5d2b      	ldrb	r3, [r5, r4]
 800c242:	5d08      	ldrb	r0, [r1, r4]
 800c244:	4283      	cmp	r3, r0
 800c246:	d104      	bne.n	800c252 <strncmp+0x1e>
 800c248:	42a2      	cmp	r2, r4
 800c24a:	d002      	beq.n	800c252 <strncmp+0x1e>
 800c24c:	3401      	adds	r4, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1f6      	bne.n	800c240 <strncmp+0xc>
 800c252:	1a18      	subs	r0, r3, r0
 800c254:	bd30      	pop	{r4, r5, pc}

0800c256 <memcpy>:
 800c256:	2300      	movs	r3, #0
 800c258:	b510      	push	{r4, lr}
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d100      	bne.n	800c260 <memcpy+0xa>
 800c25e:	bd10      	pop	{r4, pc}
 800c260:	5ccc      	ldrb	r4, [r1, r3]
 800c262:	54c4      	strb	r4, [r0, r3]
 800c264:	3301      	adds	r3, #1
 800c266:	e7f8      	b.n	800c25a <memcpy+0x4>

0800c268 <nan>:
 800c268:	2000      	movs	r0, #0
 800c26a:	4901      	ldr	r1, [pc, #4]	@ (800c270 <nan+0x8>)
 800c26c:	4770      	bx	lr
 800c26e:	46c0      	nop			@ (mov r8, r8)
 800c270:	7ff80000 	.word	0x7ff80000

0800c274 <__assert_func>:
 800c274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c276:	0014      	movs	r4, r2
 800c278:	001a      	movs	r2, r3
 800c27a:	4b09      	ldr	r3, [pc, #36]	@ (800c2a0 <__assert_func+0x2c>)
 800c27c:	0005      	movs	r5, r0
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	000e      	movs	r6, r1
 800c282:	68d8      	ldr	r0, [r3, #12]
 800c284:	4b07      	ldr	r3, [pc, #28]	@ (800c2a4 <__assert_func+0x30>)
 800c286:	2c00      	cmp	r4, #0
 800c288:	d101      	bne.n	800c28e <__assert_func+0x1a>
 800c28a:	4b07      	ldr	r3, [pc, #28]	@ (800c2a8 <__assert_func+0x34>)
 800c28c:	001c      	movs	r4, r3
 800c28e:	4907      	ldr	r1, [pc, #28]	@ (800c2ac <__assert_func+0x38>)
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	9402      	str	r4, [sp, #8]
 800c294:	002b      	movs	r3, r5
 800c296:	9600      	str	r6, [sp, #0]
 800c298:	f000 fbe0 	bl	800ca5c <fiprintf>
 800c29c:	f000 fbee 	bl	800ca7c <abort>
 800c2a0:	20000030 	.word	0x20000030
 800c2a4:	0800f002 	.word	0x0800f002
 800c2a8:	0800f03d 	.word	0x0800f03d
 800c2ac:	0800f00f 	.word	0x0800f00f

0800c2b0 <_calloc_r>:
 800c2b0:	b570      	push	{r4, r5, r6, lr}
 800c2b2:	0c0b      	lsrs	r3, r1, #16
 800c2b4:	0c15      	lsrs	r5, r2, #16
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d11e      	bne.n	800c2f8 <_calloc_r+0x48>
 800c2ba:	2d00      	cmp	r5, #0
 800c2bc:	d10c      	bne.n	800c2d8 <_calloc_r+0x28>
 800c2be:	b289      	uxth	r1, r1
 800c2c0:	b294      	uxth	r4, r2
 800c2c2:	434c      	muls	r4, r1
 800c2c4:	0021      	movs	r1, r4
 800c2c6:	f7fc fa85 	bl	80087d4 <_malloc_r>
 800c2ca:	1e05      	subs	r5, r0, #0
 800c2cc:	d01a      	beq.n	800c304 <_calloc_r+0x54>
 800c2ce:	0022      	movs	r2, r4
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	f7fd faaf 	bl	8009834 <memset>
 800c2d6:	e016      	b.n	800c306 <_calloc_r+0x56>
 800c2d8:	1c2b      	adds	r3, r5, #0
 800c2da:	1c0c      	adds	r4, r1, #0
 800c2dc:	b289      	uxth	r1, r1
 800c2de:	b292      	uxth	r2, r2
 800c2e0:	434a      	muls	r2, r1
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	b2a1      	uxth	r1, r4
 800c2e6:	4359      	muls	r1, r3
 800c2e8:	0c14      	lsrs	r4, r2, #16
 800c2ea:	190c      	adds	r4, r1, r4
 800c2ec:	0c23      	lsrs	r3, r4, #16
 800c2ee:	d107      	bne.n	800c300 <_calloc_r+0x50>
 800c2f0:	0424      	lsls	r4, r4, #16
 800c2f2:	b292      	uxth	r2, r2
 800c2f4:	4314      	orrs	r4, r2
 800c2f6:	e7e5      	b.n	800c2c4 <_calloc_r+0x14>
 800c2f8:	2d00      	cmp	r5, #0
 800c2fa:	d101      	bne.n	800c300 <_calloc_r+0x50>
 800c2fc:	1c14      	adds	r4, r2, #0
 800c2fe:	e7ed      	b.n	800c2dc <_calloc_r+0x2c>
 800c300:	230c      	movs	r3, #12
 800c302:	6003      	str	r3, [r0, #0]
 800c304:	2500      	movs	r5, #0
 800c306:	0028      	movs	r0, r5
 800c308:	bd70      	pop	{r4, r5, r6, pc}

0800c30a <rshift>:
 800c30a:	0002      	movs	r2, r0
 800c30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c30e:	6904      	ldr	r4, [r0, #16]
 800c310:	b085      	sub	sp, #20
 800c312:	3214      	adds	r2, #20
 800c314:	114b      	asrs	r3, r1, #5
 800c316:	0016      	movs	r6, r2
 800c318:	9302      	str	r3, [sp, #8]
 800c31a:	429c      	cmp	r4, r3
 800c31c:	dd31      	ble.n	800c382 <rshift+0x78>
 800c31e:	261f      	movs	r6, #31
 800c320:	000f      	movs	r7, r1
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	00a5      	lsls	r5, r4, #2
 800c326:	18d3      	adds	r3, r2, r3
 800c328:	4037      	ands	r7, r6
 800c32a:	1955      	adds	r5, r2, r5
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	9701      	str	r7, [sp, #4]
 800c330:	4231      	tst	r1, r6
 800c332:	d10d      	bne.n	800c350 <rshift+0x46>
 800c334:	0016      	movs	r6, r2
 800c336:	0019      	movs	r1, r3
 800c338:	428d      	cmp	r5, r1
 800c33a:	d836      	bhi.n	800c3aa <rshift+0xa0>
 800c33c:	9b00      	ldr	r3, [sp, #0]
 800c33e:	2600      	movs	r6, #0
 800c340:	3b03      	subs	r3, #3
 800c342:	429d      	cmp	r5, r3
 800c344:	d302      	bcc.n	800c34c <rshift+0x42>
 800c346:	9b02      	ldr	r3, [sp, #8]
 800c348:	1ae4      	subs	r4, r4, r3
 800c34a:	00a6      	lsls	r6, r4, #2
 800c34c:	1996      	adds	r6, r2, r6
 800c34e:	e018      	b.n	800c382 <rshift+0x78>
 800c350:	2120      	movs	r1, #32
 800c352:	9e01      	ldr	r6, [sp, #4]
 800c354:	9f01      	ldr	r7, [sp, #4]
 800c356:	1b89      	subs	r1, r1, r6
 800c358:	9e00      	ldr	r6, [sp, #0]
 800c35a:	9103      	str	r1, [sp, #12]
 800c35c:	ce02      	ldmia	r6!, {r1}
 800c35e:	4694      	mov	ip, r2
 800c360:	40f9      	lsrs	r1, r7
 800c362:	42b5      	cmp	r5, r6
 800c364:	d816      	bhi.n	800c394 <rshift+0x8a>
 800c366:	9b00      	ldr	r3, [sp, #0]
 800c368:	2600      	movs	r6, #0
 800c36a:	3301      	adds	r3, #1
 800c36c:	429d      	cmp	r5, r3
 800c36e:	d303      	bcc.n	800c378 <rshift+0x6e>
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	1ae4      	subs	r4, r4, r3
 800c374:	00a6      	lsls	r6, r4, #2
 800c376:	3e04      	subs	r6, #4
 800c378:	1996      	adds	r6, r2, r6
 800c37a:	6031      	str	r1, [r6, #0]
 800c37c:	2900      	cmp	r1, #0
 800c37e:	d000      	beq.n	800c382 <rshift+0x78>
 800c380:	3604      	adds	r6, #4
 800c382:	1ab1      	subs	r1, r6, r2
 800c384:	1089      	asrs	r1, r1, #2
 800c386:	6101      	str	r1, [r0, #16]
 800c388:	4296      	cmp	r6, r2
 800c38a:	d101      	bne.n	800c390 <rshift+0x86>
 800c38c:	2300      	movs	r3, #0
 800c38e:	6143      	str	r3, [r0, #20]
 800c390:	b005      	add	sp, #20
 800c392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c394:	6837      	ldr	r7, [r6, #0]
 800c396:	9b03      	ldr	r3, [sp, #12]
 800c398:	409f      	lsls	r7, r3
 800c39a:	430f      	orrs	r7, r1
 800c39c:	4661      	mov	r1, ip
 800c39e:	c180      	stmia	r1!, {r7}
 800c3a0:	468c      	mov	ip, r1
 800c3a2:	9b01      	ldr	r3, [sp, #4]
 800c3a4:	ce02      	ldmia	r6!, {r1}
 800c3a6:	40d9      	lsrs	r1, r3
 800c3a8:	e7db      	b.n	800c362 <rshift+0x58>
 800c3aa:	c980      	ldmia	r1!, {r7}
 800c3ac:	c680      	stmia	r6!, {r7}
 800c3ae:	e7c3      	b.n	800c338 <rshift+0x2e>

0800c3b0 <__hexdig_fun>:
 800c3b0:	0002      	movs	r2, r0
 800c3b2:	3a30      	subs	r2, #48	@ 0x30
 800c3b4:	0003      	movs	r3, r0
 800c3b6:	2a09      	cmp	r2, #9
 800c3b8:	d802      	bhi.n	800c3c0 <__hexdig_fun+0x10>
 800c3ba:	3b20      	subs	r3, #32
 800c3bc:	b2d8      	uxtb	r0, r3
 800c3be:	4770      	bx	lr
 800c3c0:	0002      	movs	r2, r0
 800c3c2:	3a61      	subs	r2, #97	@ 0x61
 800c3c4:	2a05      	cmp	r2, #5
 800c3c6:	d801      	bhi.n	800c3cc <__hexdig_fun+0x1c>
 800c3c8:	3b47      	subs	r3, #71	@ 0x47
 800c3ca:	e7f7      	b.n	800c3bc <__hexdig_fun+0xc>
 800c3cc:	001a      	movs	r2, r3
 800c3ce:	3a41      	subs	r2, #65	@ 0x41
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	2a05      	cmp	r2, #5
 800c3d4:	d8f3      	bhi.n	800c3be <__hexdig_fun+0xe>
 800c3d6:	3b27      	subs	r3, #39	@ 0x27
 800c3d8:	e7f0      	b.n	800c3bc <__hexdig_fun+0xc>
	...

0800c3dc <__gethex>:
 800c3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3de:	b089      	sub	sp, #36	@ 0x24
 800c3e0:	9307      	str	r3, [sp, #28]
 800c3e2:	680b      	ldr	r3, [r1, #0]
 800c3e4:	9201      	str	r2, [sp, #4]
 800c3e6:	9003      	str	r0, [sp, #12]
 800c3e8:	9106      	str	r1, [sp, #24]
 800c3ea:	1c9a      	adds	r2, r3, #2
 800c3ec:	0011      	movs	r1, r2
 800c3ee:	3201      	adds	r2, #1
 800c3f0:	1e50      	subs	r0, r2, #1
 800c3f2:	7800      	ldrb	r0, [r0, #0]
 800c3f4:	2830      	cmp	r0, #48	@ 0x30
 800c3f6:	d0f9      	beq.n	800c3ec <__gethex+0x10>
 800c3f8:	1acb      	subs	r3, r1, r3
 800c3fa:	3b02      	subs	r3, #2
 800c3fc:	9305      	str	r3, [sp, #20]
 800c3fe:	9100      	str	r1, [sp, #0]
 800c400:	f7ff ffd6 	bl	800c3b0 <__hexdig_fun>
 800c404:	2300      	movs	r3, #0
 800c406:	001d      	movs	r5, r3
 800c408:	9302      	str	r3, [sp, #8]
 800c40a:	4298      	cmp	r0, r3
 800c40c:	d11e      	bne.n	800c44c <__gethex+0x70>
 800c40e:	2201      	movs	r2, #1
 800c410:	49a6      	ldr	r1, [pc, #664]	@ (800c6ac <__gethex+0x2d0>)
 800c412:	9800      	ldr	r0, [sp, #0]
 800c414:	f7ff ff0e 	bl	800c234 <strncmp>
 800c418:	0007      	movs	r7, r0
 800c41a:	42a8      	cmp	r0, r5
 800c41c:	d000      	beq.n	800c420 <__gethex+0x44>
 800c41e:	e06a      	b.n	800c4f6 <__gethex+0x11a>
 800c420:	9b00      	ldr	r3, [sp, #0]
 800c422:	7858      	ldrb	r0, [r3, #1]
 800c424:	1c5c      	adds	r4, r3, #1
 800c426:	f7ff ffc3 	bl	800c3b0 <__hexdig_fun>
 800c42a:	2301      	movs	r3, #1
 800c42c:	9302      	str	r3, [sp, #8]
 800c42e:	42a8      	cmp	r0, r5
 800c430:	d02f      	beq.n	800c492 <__gethex+0xb6>
 800c432:	9400      	str	r4, [sp, #0]
 800c434:	9b00      	ldr	r3, [sp, #0]
 800c436:	7818      	ldrb	r0, [r3, #0]
 800c438:	2830      	cmp	r0, #48	@ 0x30
 800c43a:	d009      	beq.n	800c450 <__gethex+0x74>
 800c43c:	f7ff ffb8 	bl	800c3b0 <__hexdig_fun>
 800c440:	4242      	negs	r2, r0
 800c442:	4142      	adcs	r2, r0
 800c444:	2301      	movs	r3, #1
 800c446:	0025      	movs	r5, r4
 800c448:	9202      	str	r2, [sp, #8]
 800c44a:	9305      	str	r3, [sp, #20]
 800c44c:	9c00      	ldr	r4, [sp, #0]
 800c44e:	e004      	b.n	800c45a <__gethex+0x7e>
 800c450:	9b00      	ldr	r3, [sp, #0]
 800c452:	3301      	adds	r3, #1
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	e7ed      	b.n	800c434 <__gethex+0x58>
 800c458:	3401      	adds	r4, #1
 800c45a:	7820      	ldrb	r0, [r4, #0]
 800c45c:	f7ff ffa8 	bl	800c3b0 <__hexdig_fun>
 800c460:	1e07      	subs	r7, r0, #0
 800c462:	d1f9      	bne.n	800c458 <__gethex+0x7c>
 800c464:	2201      	movs	r2, #1
 800c466:	0020      	movs	r0, r4
 800c468:	4990      	ldr	r1, [pc, #576]	@ (800c6ac <__gethex+0x2d0>)
 800c46a:	f7ff fee3 	bl	800c234 <strncmp>
 800c46e:	2800      	cmp	r0, #0
 800c470:	d10d      	bne.n	800c48e <__gethex+0xb2>
 800c472:	2d00      	cmp	r5, #0
 800c474:	d106      	bne.n	800c484 <__gethex+0xa8>
 800c476:	3401      	adds	r4, #1
 800c478:	0025      	movs	r5, r4
 800c47a:	7820      	ldrb	r0, [r4, #0]
 800c47c:	f7ff ff98 	bl	800c3b0 <__hexdig_fun>
 800c480:	2800      	cmp	r0, #0
 800c482:	d102      	bne.n	800c48a <__gethex+0xae>
 800c484:	1b2d      	subs	r5, r5, r4
 800c486:	00af      	lsls	r7, r5, #2
 800c488:	e003      	b.n	800c492 <__gethex+0xb6>
 800c48a:	3401      	adds	r4, #1
 800c48c:	e7f5      	b.n	800c47a <__gethex+0x9e>
 800c48e:	2d00      	cmp	r5, #0
 800c490:	d1f8      	bne.n	800c484 <__gethex+0xa8>
 800c492:	2220      	movs	r2, #32
 800c494:	7823      	ldrb	r3, [r4, #0]
 800c496:	0026      	movs	r6, r4
 800c498:	4393      	bics	r3, r2
 800c49a:	2b50      	cmp	r3, #80	@ 0x50
 800c49c:	d11d      	bne.n	800c4da <__gethex+0xfe>
 800c49e:	7863      	ldrb	r3, [r4, #1]
 800c4a0:	2b2b      	cmp	r3, #43	@ 0x2b
 800c4a2:	d02d      	beq.n	800c500 <__gethex+0x124>
 800c4a4:	2b2d      	cmp	r3, #45	@ 0x2d
 800c4a6:	d02f      	beq.n	800c508 <__gethex+0x12c>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	1c66      	adds	r6, r4, #1
 800c4ac:	9304      	str	r3, [sp, #16]
 800c4ae:	7830      	ldrb	r0, [r6, #0]
 800c4b0:	f7ff ff7e 	bl	800c3b0 <__hexdig_fun>
 800c4b4:	1e43      	subs	r3, r0, #1
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	0005      	movs	r5, r0
 800c4ba:	2b18      	cmp	r3, #24
 800c4bc:	d82a      	bhi.n	800c514 <__gethex+0x138>
 800c4be:	7870      	ldrb	r0, [r6, #1]
 800c4c0:	f7ff ff76 	bl	800c3b0 <__hexdig_fun>
 800c4c4:	1e43      	subs	r3, r0, #1
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	3601      	adds	r6, #1
 800c4ca:	3d10      	subs	r5, #16
 800c4cc:	2b18      	cmp	r3, #24
 800c4ce:	d91d      	bls.n	800c50c <__gethex+0x130>
 800c4d0:	9b04      	ldr	r3, [sp, #16]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d000      	beq.n	800c4d8 <__gethex+0xfc>
 800c4d6:	426d      	negs	r5, r5
 800c4d8:	197f      	adds	r7, r7, r5
 800c4da:	9b06      	ldr	r3, [sp, #24]
 800c4dc:	601e      	str	r6, [r3, #0]
 800c4de:	9b02      	ldr	r3, [sp, #8]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d019      	beq.n	800c518 <__gethex+0x13c>
 800c4e4:	9b05      	ldr	r3, [sp, #20]
 800c4e6:	2606      	movs	r6, #6
 800c4e8:	425a      	negs	r2, r3
 800c4ea:	4153      	adcs	r3, r2
 800c4ec:	425b      	negs	r3, r3
 800c4ee:	401e      	ands	r6, r3
 800c4f0:	0030      	movs	r0, r6
 800c4f2:	b009      	add	sp, #36	@ 0x24
 800c4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	2700      	movs	r7, #0
 800c4fa:	9c00      	ldr	r4, [sp, #0]
 800c4fc:	9302      	str	r3, [sp, #8]
 800c4fe:	e7c8      	b.n	800c492 <__gethex+0xb6>
 800c500:	2300      	movs	r3, #0
 800c502:	9304      	str	r3, [sp, #16]
 800c504:	1ca6      	adds	r6, r4, #2
 800c506:	e7d2      	b.n	800c4ae <__gethex+0xd2>
 800c508:	2301      	movs	r3, #1
 800c50a:	e7fa      	b.n	800c502 <__gethex+0x126>
 800c50c:	230a      	movs	r3, #10
 800c50e:	435d      	muls	r5, r3
 800c510:	182d      	adds	r5, r5, r0
 800c512:	e7d4      	b.n	800c4be <__gethex+0xe2>
 800c514:	0026      	movs	r6, r4
 800c516:	e7e0      	b.n	800c4da <__gethex+0xfe>
 800c518:	9b00      	ldr	r3, [sp, #0]
 800c51a:	9902      	ldr	r1, [sp, #8]
 800c51c:	1ae3      	subs	r3, r4, r3
 800c51e:	3b01      	subs	r3, #1
 800c520:	2b07      	cmp	r3, #7
 800c522:	dc0a      	bgt.n	800c53a <__gethex+0x15e>
 800c524:	9803      	ldr	r0, [sp, #12]
 800c526:	f7fe f8f9 	bl	800a71c <_Balloc>
 800c52a:	1e05      	subs	r5, r0, #0
 800c52c:	d108      	bne.n	800c540 <__gethex+0x164>
 800c52e:	002a      	movs	r2, r5
 800c530:	21e4      	movs	r1, #228	@ 0xe4
 800c532:	4b5f      	ldr	r3, [pc, #380]	@ (800c6b0 <__gethex+0x2d4>)
 800c534:	485f      	ldr	r0, [pc, #380]	@ (800c6b4 <__gethex+0x2d8>)
 800c536:	f7ff fe9d 	bl	800c274 <__assert_func>
 800c53a:	3101      	adds	r1, #1
 800c53c:	105b      	asrs	r3, r3, #1
 800c53e:	e7ef      	b.n	800c520 <__gethex+0x144>
 800c540:	0003      	movs	r3, r0
 800c542:	3314      	adds	r3, #20
 800c544:	9302      	str	r3, [sp, #8]
 800c546:	9305      	str	r3, [sp, #20]
 800c548:	2300      	movs	r3, #0
 800c54a:	001e      	movs	r6, r3
 800c54c:	9304      	str	r3, [sp, #16]
 800c54e:	9b00      	ldr	r3, [sp, #0]
 800c550:	42a3      	cmp	r3, r4
 800c552:	d338      	bcc.n	800c5c6 <__gethex+0x1ea>
 800c554:	9c05      	ldr	r4, [sp, #20]
 800c556:	9b02      	ldr	r3, [sp, #8]
 800c558:	c440      	stmia	r4!, {r6}
 800c55a:	1ae4      	subs	r4, r4, r3
 800c55c:	10a4      	asrs	r4, r4, #2
 800c55e:	0030      	movs	r0, r6
 800c560:	612c      	str	r4, [r5, #16]
 800c562:	f7fe f9d3 	bl	800a90c <__hi0bits>
 800c566:	9b01      	ldr	r3, [sp, #4]
 800c568:	0164      	lsls	r4, r4, #5
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	1a26      	subs	r6, r4, r0
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	429e      	cmp	r6, r3
 800c572:	dd52      	ble.n	800c61a <__gethex+0x23e>
 800c574:	1af6      	subs	r6, r6, r3
 800c576:	0031      	movs	r1, r6
 800c578:	0028      	movs	r0, r5
 800c57a:	f7fe fd76 	bl	800b06a <__any_on>
 800c57e:	1e04      	subs	r4, r0, #0
 800c580:	d00f      	beq.n	800c5a2 <__gethex+0x1c6>
 800c582:	2401      	movs	r4, #1
 800c584:	231f      	movs	r3, #31
 800c586:	0020      	movs	r0, r4
 800c588:	1e72      	subs	r2, r6, #1
 800c58a:	4013      	ands	r3, r2
 800c58c:	4098      	lsls	r0, r3
 800c58e:	0003      	movs	r3, r0
 800c590:	1151      	asrs	r1, r2, #5
 800c592:	9802      	ldr	r0, [sp, #8]
 800c594:	0089      	lsls	r1, r1, #2
 800c596:	5809      	ldr	r1, [r1, r0]
 800c598:	4219      	tst	r1, r3
 800c59a:	d002      	beq.n	800c5a2 <__gethex+0x1c6>
 800c59c:	42a2      	cmp	r2, r4
 800c59e:	dc34      	bgt.n	800c60a <__gethex+0x22e>
 800c5a0:	2402      	movs	r4, #2
 800c5a2:	0031      	movs	r1, r6
 800c5a4:	0028      	movs	r0, r5
 800c5a6:	f7ff feb0 	bl	800c30a <rshift>
 800c5aa:	19bf      	adds	r7, r7, r6
 800c5ac:	9b01      	ldr	r3, [sp, #4]
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	42bb      	cmp	r3, r7
 800c5b2:	da42      	bge.n	800c63a <__gethex+0x25e>
 800c5b4:	0029      	movs	r1, r5
 800c5b6:	9803      	ldr	r0, [sp, #12]
 800c5b8:	f7fe f8f4 	bl	800a7a4 <_Bfree>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5c0:	26a3      	movs	r6, #163	@ 0xa3
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	e794      	b.n	800c4f0 <__gethex+0x114>
 800c5c6:	3c01      	subs	r4, #1
 800c5c8:	7823      	ldrb	r3, [r4, #0]
 800c5ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5cc:	d012      	beq.n	800c5f4 <__gethex+0x218>
 800c5ce:	9b04      	ldr	r3, [sp, #16]
 800c5d0:	2b20      	cmp	r3, #32
 800c5d2:	d104      	bne.n	800c5de <__gethex+0x202>
 800c5d4:	9b05      	ldr	r3, [sp, #20]
 800c5d6:	c340      	stmia	r3!, {r6}
 800c5d8:	2600      	movs	r6, #0
 800c5da:	9305      	str	r3, [sp, #20]
 800c5dc:	9604      	str	r6, [sp, #16]
 800c5de:	7820      	ldrb	r0, [r4, #0]
 800c5e0:	f7ff fee6 	bl	800c3b0 <__hexdig_fun>
 800c5e4:	230f      	movs	r3, #15
 800c5e6:	4018      	ands	r0, r3
 800c5e8:	9b04      	ldr	r3, [sp, #16]
 800c5ea:	4098      	lsls	r0, r3
 800c5ec:	3304      	adds	r3, #4
 800c5ee:	4306      	orrs	r6, r0
 800c5f0:	9304      	str	r3, [sp, #16]
 800c5f2:	e7ac      	b.n	800c54e <__gethex+0x172>
 800c5f4:	9b00      	ldr	r3, [sp, #0]
 800c5f6:	42a3      	cmp	r3, r4
 800c5f8:	d8e9      	bhi.n	800c5ce <__gethex+0x1f2>
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	0020      	movs	r0, r4
 800c5fe:	492b      	ldr	r1, [pc, #172]	@ (800c6ac <__gethex+0x2d0>)
 800c600:	f7ff fe18 	bl	800c234 <strncmp>
 800c604:	2800      	cmp	r0, #0
 800c606:	d1e2      	bne.n	800c5ce <__gethex+0x1f2>
 800c608:	e7a1      	b.n	800c54e <__gethex+0x172>
 800c60a:	0028      	movs	r0, r5
 800c60c:	1eb1      	subs	r1, r6, #2
 800c60e:	f7fe fd2c 	bl	800b06a <__any_on>
 800c612:	2800      	cmp	r0, #0
 800c614:	d0c4      	beq.n	800c5a0 <__gethex+0x1c4>
 800c616:	2403      	movs	r4, #3
 800c618:	e7c3      	b.n	800c5a2 <__gethex+0x1c6>
 800c61a:	9b00      	ldr	r3, [sp, #0]
 800c61c:	2400      	movs	r4, #0
 800c61e:	429e      	cmp	r6, r3
 800c620:	dac4      	bge.n	800c5ac <__gethex+0x1d0>
 800c622:	1b9e      	subs	r6, r3, r6
 800c624:	0029      	movs	r1, r5
 800c626:	0032      	movs	r2, r6
 800c628:	9803      	ldr	r0, [sp, #12]
 800c62a:	f7fe fae5 	bl	800abf8 <__lshift>
 800c62e:	0003      	movs	r3, r0
 800c630:	3314      	adds	r3, #20
 800c632:	0005      	movs	r5, r0
 800c634:	1bbf      	subs	r7, r7, r6
 800c636:	9302      	str	r3, [sp, #8]
 800c638:	e7b8      	b.n	800c5ac <__gethex+0x1d0>
 800c63a:	9b01      	ldr	r3, [sp, #4]
 800c63c:	685e      	ldr	r6, [r3, #4]
 800c63e:	42be      	cmp	r6, r7
 800c640:	dd6f      	ble.n	800c722 <__gethex+0x346>
 800c642:	9b00      	ldr	r3, [sp, #0]
 800c644:	1bf6      	subs	r6, r6, r7
 800c646:	42b3      	cmp	r3, r6
 800c648:	dc36      	bgt.n	800c6b8 <__gethex+0x2dc>
 800c64a:	9b01      	ldr	r3, [sp, #4]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	2b02      	cmp	r3, #2
 800c650:	d024      	beq.n	800c69c <__gethex+0x2c0>
 800c652:	2b03      	cmp	r3, #3
 800c654:	d026      	beq.n	800c6a4 <__gethex+0x2c8>
 800c656:	2b01      	cmp	r3, #1
 800c658:	d117      	bne.n	800c68a <__gethex+0x2ae>
 800c65a:	9b00      	ldr	r3, [sp, #0]
 800c65c:	42b3      	cmp	r3, r6
 800c65e:	d114      	bne.n	800c68a <__gethex+0x2ae>
 800c660:	2b01      	cmp	r3, #1
 800c662:	d10b      	bne.n	800c67c <__gethex+0x2a0>
 800c664:	9b01      	ldr	r3, [sp, #4]
 800c666:	9a07      	ldr	r2, [sp, #28]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	2662      	movs	r6, #98	@ 0x62
 800c66c:	6013      	str	r3, [r2, #0]
 800c66e:	2301      	movs	r3, #1
 800c670:	9a02      	ldr	r2, [sp, #8]
 800c672:	612b      	str	r3, [r5, #16]
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c678:	601d      	str	r5, [r3, #0]
 800c67a:	e739      	b.n	800c4f0 <__gethex+0x114>
 800c67c:	9900      	ldr	r1, [sp, #0]
 800c67e:	0028      	movs	r0, r5
 800c680:	3901      	subs	r1, #1
 800c682:	f7fe fcf2 	bl	800b06a <__any_on>
 800c686:	2800      	cmp	r0, #0
 800c688:	d1ec      	bne.n	800c664 <__gethex+0x288>
 800c68a:	0029      	movs	r1, r5
 800c68c:	9803      	ldr	r0, [sp, #12]
 800c68e:	f7fe f889 	bl	800a7a4 <_Bfree>
 800c692:	2300      	movs	r3, #0
 800c694:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c696:	2650      	movs	r6, #80	@ 0x50
 800c698:	6013      	str	r3, [r2, #0]
 800c69a:	e729      	b.n	800c4f0 <__gethex+0x114>
 800c69c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1f3      	bne.n	800c68a <__gethex+0x2ae>
 800c6a2:	e7df      	b.n	800c664 <__gethex+0x288>
 800c6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1dc      	bne.n	800c664 <__gethex+0x288>
 800c6aa:	e7ee      	b.n	800c68a <__gethex+0x2ae>
 800c6ac:	0800ee90 	.word	0x0800ee90
 800c6b0:	0800ed29 	.word	0x0800ed29
 800c6b4:	0800f03e 	.word	0x0800f03e
 800c6b8:	1e77      	subs	r7, r6, #1
 800c6ba:	2c00      	cmp	r4, #0
 800c6bc:	d12f      	bne.n	800c71e <__gethex+0x342>
 800c6be:	2f00      	cmp	r7, #0
 800c6c0:	d004      	beq.n	800c6cc <__gethex+0x2f0>
 800c6c2:	0039      	movs	r1, r7
 800c6c4:	0028      	movs	r0, r5
 800c6c6:	f7fe fcd0 	bl	800b06a <__any_on>
 800c6ca:	0004      	movs	r4, r0
 800c6cc:	231f      	movs	r3, #31
 800c6ce:	117a      	asrs	r2, r7, #5
 800c6d0:	401f      	ands	r7, r3
 800c6d2:	3b1e      	subs	r3, #30
 800c6d4:	40bb      	lsls	r3, r7
 800c6d6:	9902      	ldr	r1, [sp, #8]
 800c6d8:	0092      	lsls	r2, r2, #2
 800c6da:	5852      	ldr	r2, [r2, r1]
 800c6dc:	421a      	tst	r2, r3
 800c6de:	d001      	beq.n	800c6e4 <__gethex+0x308>
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	431c      	orrs	r4, r3
 800c6e4:	9b00      	ldr	r3, [sp, #0]
 800c6e6:	0031      	movs	r1, r6
 800c6e8:	1b9b      	subs	r3, r3, r6
 800c6ea:	2602      	movs	r6, #2
 800c6ec:	0028      	movs	r0, r5
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	f7ff fe0b 	bl	800c30a <rshift>
 800c6f4:	9b01      	ldr	r3, [sp, #4]
 800c6f6:	685f      	ldr	r7, [r3, #4]
 800c6f8:	2c00      	cmp	r4, #0
 800c6fa:	d03f      	beq.n	800c77c <__gethex+0x3a0>
 800c6fc:	9b01      	ldr	r3, [sp, #4]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	2b02      	cmp	r3, #2
 800c702:	d010      	beq.n	800c726 <__gethex+0x34a>
 800c704:	2b03      	cmp	r3, #3
 800c706:	d012      	beq.n	800c72e <__gethex+0x352>
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d106      	bne.n	800c71a <__gethex+0x33e>
 800c70c:	07a2      	lsls	r2, r4, #30
 800c70e:	d504      	bpl.n	800c71a <__gethex+0x33e>
 800c710:	9a02      	ldr	r2, [sp, #8]
 800c712:	6812      	ldr	r2, [r2, #0]
 800c714:	4314      	orrs	r4, r2
 800c716:	421c      	tst	r4, r3
 800c718:	d10c      	bne.n	800c734 <__gethex+0x358>
 800c71a:	2310      	movs	r3, #16
 800c71c:	e02d      	b.n	800c77a <__gethex+0x39e>
 800c71e:	2401      	movs	r4, #1
 800c720:	e7d4      	b.n	800c6cc <__gethex+0x2f0>
 800c722:	2601      	movs	r6, #1
 800c724:	e7e8      	b.n	800c6f8 <__gethex+0x31c>
 800c726:	2301      	movs	r3, #1
 800c728:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c72a:	1a9b      	subs	r3, r3, r2
 800c72c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c72e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c730:	2b00      	cmp	r3, #0
 800c732:	d0f2      	beq.n	800c71a <__gethex+0x33e>
 800c734:	692b      	ldr	r3, [r5, #16]
 800c736:	2000      	movs	r0, #0
 800c738:	9302      	str	r3, [sp, #8]
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	9304      	str	r3, [sp, #16]
 800c73e:	002b      	movs	r3, r5
 800c740:	9a04      	ldr	r2, [sp, #16]
 800c742:	3314      	adds	r3, #20
 800c744:	1899      	adds	r1, r3, r2
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	1c54      	adds	r4, r2, #1
 800c74a:	d01c      	beq.n	800c786 <__gethex+0x3aa>
 800c74c:	3201      	adds	r2, #1
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	002b      	movs	r3, r5
 800c752:	3314      	adds	r3, #20
 800c754:	2e02      	cmp	r6, #2
 800c756:	d13f      	bne.n	800c7d8 <__gethex+0x3fc>
 800c758:	9a01      	ldr	r2, [sp, #4]
 800c75a:	9900      	ldr	r1, [sp, #0]
 800c75c:	6812      	ldr	r2, [r2, #0]
 800c75e:	3a01      	subs	r2, #1
 800c760:	428a      	cmp	r2, r1
 800c762:	d109      	bne.n	800c778 <__gethex+0x39c>
 800c764:	000a      	movs	r2, r1
 800c766:	201f      	movs	r0, #31
 800c768:	4010      	ands	r0, r2
 800c76a:	2201      	movs	r2, #1
 800c76c:	4082      	lsls	r2, r0
 800c76e:	1149      	asrs	r1, r1, #5
 800c770:	0089      	lsls	r1, r1, #2
 800c772:	58cb      	ldr	r3, [r1, r3]
 800c774:	4213      	tst	r3, r2
 800c776:	d13d      	bne.n	800c7f4 <__gethex+0x418>
 800c778:	2320      	movs	r3, #32
 800c77a:	431e      	orrs	r6, r3
 800c77c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c77e:	601d      	str	r5, [r3, #0]
 800c780:	9b07      	ldr	r3, [sp, #28]
 800c782:	601f      	str	r7, [r3, #0]
 800c784:	e6b4      	b.n	800c4f0 <__gethex+0x114>
 800c786:	c301      	stmia	r3!, {r0}
 800c788:	4299      	cmp	r1, r3
 800c78a:	d8dc      	bhi.n	800c746 <__gethex+0x36a>
 800c78c:	68ab      	ldr	r3, [r5, #8]
 800c78e:	9a02      	ldr	r2, [sp, #8]
 800c790:	429a      	cmp	r2, r3
 800c792:	db18      	blt.n	800c7c6 <__gethex+0x3ea>
 800c794:	6869      	ldr	r1, [r5, #4]
 800c796:	9803      	ldr	r0, [sp, #12]
 800c798:	3101      	adds	r1, #1
 800c79a:	f7fd ffbf 	bl	800a71c <_Balloc>
 800c79e:	1e04      	subs	r4, r0, #0
 800c7a0:	d104      	bne.n	800c7ac <__gethex+0x3d0>
 800c7a2:	0022      	movs	r2, r4
 800c7a4:	2184      	movs	r1, #132	@ 0x84
 800c7a6:	4b1d      	ldr	r3, [pc, #116]	@ (800c81c <__gethex+0x440>)
 800c7a8:	481d      	ldr	r0, [pc, #116]	@ (800c820 <__gethex+0x444>)
 800c7aa:	e6c4      	b.n	800c536 <__gethex+0x15a>
 800c7ac:	0029      	movs	r1, r5
 800c7ae:	692a      	ldr	r2, [r5, #16]
 800c7b0:	310c      	adds	r1, #12
 800c7b2:	3202      	adds	r2, #2
 800c7b4:	0092      	lsls	r2, r2, #2
 800c7b6:	300c      	adds	r0, #12
 800c7b8:	f7ff fd4d 	bl	800c256 <memcpy>
 800c7bc:	0029      	movs	r1, r5
 800c7be:	9803      	ldr	r0, [sp, #12]
 800c7c0:	f7fd fff0 	bl	800a7a4 <_Bfree>
 800c7c4:	0025      	movs	r5, r4
 800c7c6:	692b      	ldr	r3, [r5, #16]
 800c7c8:	1c5a      	adds	r2, r3, #1
 800c7ca:	612a      	str	r2, [r5, #16]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	18eb      	adds	r3, r5, r3
 800c7d4:	605a      	str	r2, [r3, #4]
 800c7d6:	e7bb      	b.n	800c750 <__gethex+0x374>
 800c7d8:	692a      	ldr	r2, [r5, #16]
 800c7da:	9902      	ldr	r1, [sp, #8]
 800c7dc:	428a      	cmp	r2, r1
 800c7de:	dd0b      	ble.n	800c7f8 <__gethex+0x41c>
 800c7e0:	2101      	movs	r1, #1
 800c7e2:	0028      	movs	r0, r5
 800c7e4:	f7ff fd91 	bl	800c30a <rshift>
 800c7e8:	9b01      	ldr	r3, [sp, #4]
 800c7ea:	3701      	adds	r7, #1
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	42bb      	cmp	r3, r7
 800c7f0:	da00      	bge.n	800c7f4 <__gethex+0x418>
 800c7f2:	e6df      	b.n	800c5b4 <__gethex+0x1d8>
 800c7f4:	2601      	movs	r6, #1
 800c7f6:	e7bf      	b.n	800c778 <__gethex+0x39c>
 800c7f8:	221f      	movs	r2, #31
 800c7fa:	9c00      	ldr	r4, [sp, #0]
 800c7fc:	9900      	ldr	r1, [sp, #0]
 800c7fe:	4014      	ands	r4, r2
 800c800:	4211      	tst	r1, r2
 800c802:	d0f7      	beq.n	800c7f4 <__gethex+0x418>
 800c804:	9a04      	ldr	r2, [sp, #16]
 800c806:	189b      	adds	r3, r3, r2
 800c808:	3b04      	subs	r3, #4
 800c80a:	6818      	ldr	r0, [r3, #0]
 800c80c:	f7fe f87e 	bl	800a90c <__hi0bits>
 800c810:	2320      	movs	r3, #32
 800c812:	1b1b      	subs	r3, r3, r4
 800c814:	4298      	cmp	r0, r3
 800c816:	dbe3      	blt.n	800c7e0 <__gethex+0x404>
 800c818:	e7ec      	b.n	800c7f4 <__gethex+0x418>
 800c81a:	46c0      	nop			@ (mov r8, r8)
 800c81c:	0800ed29 	.word	0x0800ed29
 800c820:	0800f03e 	.word	0x0800f03e

0800c824 <L_shift>:
 800c824:	2308      	movs	r3, #8
 800c826:	b570      	push	{r4, r5, r6, lr}
 800c828:	2520      	movs	r5, #32
 800c82a:	1a9a      	subs	r2, r3, r2
 800c82c:	0092      	lsls	r2, r2, #2
 800c82e:	1aad      	subs	r5, r5, r2
 800c830:	6843      	ldr	r3, [r0, #4]
 800c832:	6804      	ldr	r4, [r0, #0]
 800c834:	001e      	movs	r6, r3
 800c836:	40ae      	lsls	r6, r5
 800c838:	40d3      	lsrs	r3, r2
 800c83a:	4334      	orrs	r4, r6
 800c83c:	6004      	str	r4, [r0, #0]
 800c83e:	6043      	str	r3, [r0, #4]
 800c840:	3004      	adds	r0, #4
 800c842:	4288      	cmp	r0, r1
 800c844:	d3f4      	bcc.n	800c830 <L_shift+0xc>
 800c846:	bd70      	pop	{r4, r5, r6, pc}

0800c848 <__match>:
 800c848:	b530      	push	{r4, r5, lr}
 800c84a:	6803      	ldr	r3, [r0, #0]
 800c84c:	780c      	ldrb	r4, [r1, #0]
 800c84e:	3301      	adds	r3, #1
 800c850:	2c00      	cmp	r4, #0
 800c852:	d102      	bne.n	800c85a <__match+0x12>
 800c854:	6003      	str	r3, [r0, #0]
 800c856:	2001      	movs	r0, #1
 800c858:	bd30      	pop	{r4, r5, pc}
 800c85a:	781a      	ldrb	r2, [r3, #0]
 800c85c:	0015      	movs	r5, r2
 800c85e:	3d41      	subs	r5, #65	@ 0x41
 800c860:	2d19      	cmp	r5, #25
 800c862:	d800      	bhi.n	800c866 <__match+0x1e>
 800c864:	3220      	adds	r2, #32
 800c866:	3101      	adds	r1, #1
 800c868:	42a2      	cmp	r2, r4
 800c86a:	d0ef      	beq.n	800c84c <__match+0x4>
 800c86c:	2000      	movs	r0, #0
 800c86e:	e7f3      	b.n	800c858 <__match+0x10>

0800c870 <__hexnan>:
 800c870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c872:	680b      	ldr	r3, [r1, #0]
 800c874:	b08b      	sub	sp, #44	@ 0x2c
 800c876:	9201      	str	r2, [sp, #4]
 800c878:	9901      	ldr	r1, [sp, #4]
 800c87a:	115a      	asrs	r2, r3, #5
 800c87c:	0092      	lsls	r2, r2, #2
 800c87e:	188a      	adds	r2, r1, r2
 800c880:	9202      	str	r2, [sp, #8]
 800c882:	0019      	movs	r1, r3
 800c884:	221f      	movs	r2, #31
 800c886:	4011      	ands	r1, r2
 800c888:	9008      	str	r0, [sp, #32]
 800c88a:	9106      	str	r1, [sp, #24]
 800c88c:	4213      	tst	r3, r2
 800c88e:	d002      	beq.n	800c896 <__hexnan+0x26>
 800c890:	9b02      	ldr	r3, [sp, #8]
 800c892:	3304      	adds	r3, #4
 800c894:	9302      	str	r3, [sp, #8]
 800c896:	9b02      	ldr	r3, [sp, #8]
 800c898:	2500      	movs	r5, #0
 800c89a:	1f1f      	subs	r7, r3, #4
 800c89c:	003e      	movs	r6, r7
 800c89e:	003c      	movs	r4, r7
 800c8a0:	9b08      	ldr	r3, [sp, #32]
 800c8a2:	603d      	str	r5, [r7, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	9507      	str	r5, [sp, #28]
 800c8a8:	9305      	str	r3, [sp, #20]
 800c8aa:	9503      	str	r5, [sp, #12]
 800c8ac:	9b05      	ldr	r3, [sp, #20]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8b2:	9b05      	ldr	r3, [sp, #20]
 800c8b4:	785b      	ldrb	r3, [r3, #1]
 800c8b6:	9304      	str	r3, [sp, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d028      	beq.n	800c90e <__hexnan+0x9e>
 800c8bc:	9804      	ldr	r0, [sp, #16]
 800c8be:	f7ff fd77 	bl	800c3b0 <__hexdig_fun>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d155      	bne.n	800c972 <__hexnan+0x102>
 800c8c6:	9b04      	ldr	r3, [sp, #16]
 800c8c8:	2b20      	cmp	r3, #32
 800c8ca:	d819      	bhi.n	800c900 <__hexnan+0x90>
 800c8cc:	9b03      	ldr	r3, [sp, #12]
 800c8ce:	9a07      	ldr	r2, [sp, #28]
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	dd12      	ble.n	800c8fa <__hexnan+0x8a>
 800c8d4:	42b4      	cmp	r4, r6
 800c8d6:	d206      	bcs.n	800c8e6 <__hexnan+0x76>
 800c8d8:	2d07      	cmp	r5, #7
 800c8da:	dc04      	bgt.n	800c8e6 <__hexnan+0x76>
 800c8dc:	002a      	movs	r2, r5
 800c8de:	0031      	movs	r1, r6
 800c8e0:	0020      	movs	r0, r4
 800c8e2:	f7ff ff9f 	bl	800c824 <L_shift>
 800c8e6:	9b01      	ldr	r3, [sp, #4]
 800c8e8:	2508      	movs	r5, #8
 800c8ea:	429c      	cmp	r4, r3
 800c8ec:	d905      	bls.n	800c8fa <__hexnan+0x8a>
 800c8ee:	1f26      	subs	r6, r4, #4
 800c8f0:	2500      	movs	r5, #0
 800c8f2:	0034      	movs	r4, r6
 800c8f4:	9b03      	ldr	r3, [sp, #12]
 800c8f6:	6035      	str	r5, [r6, #0]
 800c8f8:	9307      	str	r3, [sp, #28]
 800c8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8fc:	9305      	str	r3, [sp, #20]
 800c8fe:	e7d5      	b.n	800c8ac <__hexnan+0x3c>
 800c900:	9b04      	ldr	r3, [sp, #16]
 800c902:	2b29      	cmp	r3, #41	@ 0x29
 800c904:	d15a      	bne.n	800c9bc <__hexnan+0x14c>
 800c906:	9b05      	ldr	r3, [sp, #20]
 800c908:	9a08      	ldr	r2, [sp, #32]
 800c90a:	3302      	adds	r3, #2
 800c90c:	6013      	str	r3, [r2, #0]
 800c90e:	9b03      	ldr	r3, [sp, #12]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d053      	beq.n	800c9bc <__hexnan+0x14c>
 800c914:	42b4      	cmp	r4, r6
 800c916:	d206      	bcs.n	800c926 <__hexnan+0xb6>
 800c918:	2d07      	cmp	r5, #7
 800c91a:	dc04      	bgt.n	800c926 <__hexnan+0xb6>
 800c91c:	002a      	movs	r2, r5
 800c91e:	0031      	movs	r1, r6
 800c920:	0020      	movs	r0, r4
 800c922:	f7ff ff7f 	bl	800c824 <L_shift>
 800c926:	9b01      	ldr	r3, [sp, #4]
 800c928:	429c      	cmp	r4, r3
 800c92a:	d936      	bls.n	800c99a <__hexnan+0x12a>
 800c92c:	001a      	movs	r2, r3
 800c92e:	0023      	movs	r3, r4
 800c930:	cb02      	ldmia	r3!, {r1}
 800c932:	c202      	stmia	r2!, {r1}
 800c934:	429f      	cmp	r7, r3
 800c936:	d2fb      	bcs.n	800c930 <__hexnan+0xc0>
 800c938:	9b02      	ldr	r3, [sp, #8]
 800c93a:	1c61      	adds	r1, r4, #1
 800c93c:	1eda      	subs	r2, r3, #3
 800c93e:	2304      	movs	r3, #4
 800c940:	4291      	cmp	r1, r2
 800c942:	d805      	bhi.n	800c950 <__hexnan+0xe0>
 800c944:	9b02      	ldr	r3, [sp, #8]
 800c946:	3b04      	subs	r3, #4
 800c948:	1b1b      	subs	r3, r3, r4
 800c94a:	089b      	lsrs	r3, r3, #2
 800c94c:	3301      	adds	r3, #1
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	9a01      	ldr	r2, [sp, #4]
 800c952:	18d3      	adds	r3, r2, r3
 800c954:	2200      	movs	r2, #0
 800c956:	c304      	stmia	r3!, {r2}
 800c958:	429f      	cmp	r7, r3
 800c95a:	d2fc      	bcs.n	800c956 <__hexnan+0xe6>
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d104      	bne.n	800c96c <__hexnan+0xfc>
 800c962:	9b01      	ldr	r3, [sp, #4]
 800c964:	429f      	cmp	r7, r3
 800c966:	d127      	bne.n	800c9b8 <__hexnan+0x148>
 800c968:	2301      	movs	r3, #1
 800c96a:	603b      	str	r3, [r7, #0]
 800c96c:	2005      	movs	r0, #5
 800c96e:	b00b      	add	sp, #44	@ 0x2c
 800c970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c972:	9b03      	ldr	r3, [sp, #12]
 800c974:	3501      	adds	r5, #1
 800c976:	3301      	adds	r3, #1
 800c978:	9303      	str	r3, [sp, #12]
 800c97a:	2d08      	cmp	r5, #8
 800c97c:	dd06      	ble.n	800c98c <__hexnan+0x11c>
 800c97e:	9b01      	ldr	r3, [sp, #4]
 800c980:	429c      	cmp	r4, r3
 800c982:	d9ba      	bls.n	800c8fa <__hexnan+0x8a>
 800c984:	2300      	movs	r3, #0
 800c986:	2501      	movs	r5, #1
 800c988:	3c04      	subs	r4, #4
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	220f      	movs	r2, #15
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	4010      	ands	r0, r2
 800c992:	011b      	lsls	r3, r3, #4
 800c994:	4303      	orrs	r3, r0
 800c996:	6023      	str	r3, [r4, #0]
 800c998:	e7af      	b.n	800c8fa <__hexnan+0x8a>
 800c99a:	9b06      	ldr	r3, [sp, #24]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d0dd      	beq.n	800c95c <__hexnan+0xec>
 800c9a0:	2320      	movs	r3, #32
 800c9a2:	9a06      	ldr	r2, [sp, #24]
 800c9a4:	9902      	ldr	r1, [sp, #8]
 800c9a6:	1a9b      	subs	r3, r3, r2
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	4252      	negs	r2, r2
 800c9ac:	40da      	lsrs	r2, r3
 800c9ae:	3904      	subs	r1, #4
 800c9b0:	680b      	ldr	r3, [r1, #0]
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	600b      	str	r3, [r1, #0]
 800c9b6:	e7d1      	b.n	800c95c <__hexnan+0xec>
 800c9b8:	3f04      	subs	r7, #4
 800c9ba:	e7cf      	b.n	800c95c <__hexnan+0xec>
 800c9bc:	2004      	movs	r0, #4
 800c9be:	e7d6      	b.n	800c96e <__hexnan+0xfe>

0800c9c0 <__ascii_mbtowc>:
 800c9c0:	b082      	sub	sp, #8
 800c9c2:	2900      	cmp	r1, #0
 800c9c4:	d100      	bne.n	800c9c8 <__ascii_mbtowc+0x8>
 800c9c6:	a901      	add	r1, sp, #4
 800c9c8:	1e10      	subs	r0, r2, #0
 800c9ca:	d006      	beq.n	800c9da <__ascii_mbtowc+0x1a>
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d006      	beq.n	800c9de <__ascii_mbtowc+0x1e>
 800c9d0:	7813      	ldrb	r3, [r2, #0]
 800c9d2:	600b      	str	r3, [r1, #0]
 800c9d4:	7810      	ldrb	r0, [r2, #0]
 800c9d6:	1e43      	subs	r3, r0, #1
 800c9d8:	4198      	sbcs	r0, r3
 800c9da:	b002      	add	sp, #8
 800c9dc:	4770      	bx	lr
 800c9de:	2002      	movs	r0, #2
 800c9e0:	4240      	negs	r0, r0
 800c9e2:	e7fa      	b.n	800c9da <__ascii_mbtowc+0x1a>

0800c9e4 <_realloc_r>:
 800c9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9e6:	0006      	movs	r6, r0
 800c9e8:	000c      	movs	r4, r1
 800c9ea:	0015      	movs	r5, r2
 800c9ec:	2900      	cmp	r1, #0
 800c9ee:	d105      	bne.n	800c9fc <_realloc_r+0x18>
 800c9f0:	0011      	movs	r1, r2
 800c9f2:	f7fb feef 	bl	80087d4 <_malloc_r>
 800c9f6:	0004      	movs	r4, r0
 800c9f8:	0020      	movs	r0, r4
 800c9fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9fc:	2a00      	cmp	r2, #0
 800c9fe:	d103      	bne.n	800ca08 <_realloc_r+0x24>
 800ca00:	f7fd fe42 	bl	800a688 <_free_r>
 800ca04:	2400      	movs	r4, #0
 800ca06:	e7f7      	b.n	800c9f8 <_realloc_r+0x14>
 800ca08:	f000 f83f 	bl	800ca8a <_malloc_usable_size_r>
 800ca0c:	0007      	movs	r7, r0
 800ca0e:	4285      	cmp	r5, r0
 800ca10:	d802      	bhi.n	800ca18 <_realloc_r+0x34>
 800ca12:	0843      	lsrs	r3, r0, #1
 800ca14:	42ab      	cmp	r3, r5
 800ca16:	d3ef      	bcc.n	800c9f8 <_realloc_r+0x14>
 800ca18:	0029      	movs	r1, r5
 800ca1a:	0030      	movs	r0, r6
 800ca1c:	f7fb feda 	bl	80087d4 <_malloc_r>
 800ca20:	9001      	str	r0, [sp, #4]
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d0ee      	beq.n	800ca04 <_realloc_r+0x20>
 800ca26:	002a      	movs	r2, r5
 800ca28:	42bd      	cmp	r5, r7
 800ca2a:	d900      	bls.n	800ca2e <_realloc_r+0x4a>
 800ca2c:	003a      	movs	r2, r7
 800ca2e:	0021      	movs	r1, r4
 800ca30:	9801      	ldr	r0, [sp, #4]
 800ca32:	f7ff fc10 	bl	800c256 <memcpy>
 800ca36:	0021      	movs	r1, r4
 800ca38:	0030      	movs	r0, r6
 800ca3a:	f7fd fe25 	bl	800a688 <_free_r>
 800ca3e:	9c01      	ldr	r4, [sp, #4]
 800ca40:	e7da      	b.n	800c9f8 <_realloc_r+0x14>

0800ca42 <__ascii_wctomb>:
 800ca42:	0003      	movs	r3, r0
 800ca44:	1e08      	subs	r0, r1, #0
 800ca46:	d005      	beq.n	800ca54 <__ascii_wctomb+0x12>
 800ca48:	2aff      	cmp	r2, #255	@ 0xff
 800ca4a:	d904      	bls.n	800ca56 <__ascii_wctomb+0x14>
 800ca4c:	228a      	movs	r2, #138	@ 0x8a
 800ca4e:	2001      	movs	r0, #1
 800ca50:	601a      	str	r2, [r3, #0]
 800ca52:	4240      	negs	r0, r0
 800ca54:	4770      	bx	lr
 800ca56:	2001      	movs	r0, #1
 800ca58:	700a      	strb	r2, [r1, #0]
 800ca5a:	e7fb      	b.n	800ca54 <__ascii_wctomb+0x12>

0800ca5c <fiprintf>:
 800ca5c:	b40e      	push	{r1, r2, r3}
 800ca5e:	b517      	push	{r0, r1, r2, r4, lr}
 800ca60:	4c05      	ldr	r4, [pc, #20]	@ (800ca78 <fiprintf+0x1c>)
 800ca62:	ab05      	add	r3, sp, #20
 800ca64:	cb04      	ldmia	r3!, {r2}
 800ca66:	0001      	movs	r1, r0
 800ca68:	6820      	ldr	r0, [r4, #0]
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	f000 f83c 	bl	800cae8 <_vfiprintf_r>
 800ca70:	bc1e      	pop	{r1, r2, r3, r4}
 800ca72:	bc08      	pop	{r3}
 800ca74:	b003      	add	sp, #12
 800ca76:	4718      	bx	r3
 800ca78:	20000030 	.word	0x20000030

0800ca7c <abort>:
 800ca7c:	2006      	movs	r0, #6
 800ca7e:	b510      	push	{r4, lr}
 800ca80:	f000 fa18 	bl	800ceb4 <raise>
 800ca84:	2001      	movs	r0, #1
 800ca86:	f7f8 f88d 	bl	8004ba4 <_exit>

0800ca8a <_malloc_usable_size_r>:
 800ca8a:	1f0b      	subs	r3, r1, #4
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	1f18      	subs	r0, r3, #4
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	da01      	bge.n	800ca98 <_malloc_usable_size_r+0xe>
 800ca94:	580b      	ldr	r3, [r1, r0]
 800ca96:	18c0      	adds	r0, r0, r3
 800ca98:	4770      	bx	lr

0800ca9a <__sfputc_r>:
 800ca9a:	6893      	ldr	r3, [r2, #8]
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	6093      	str	r3, [r2, #8]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	da04      	bge.n	800cab0 <__sfputc_r+0x16>
 800caa6:	6994      	ldr	r4, [r2, #24]
 800caa8:	42a3      	cmp	r3, r4
 800caaa:	db07      	blt.n	800cabc <__sfputc_r+0x22>
 800caac:	290a      	cmp	r1, #10
 800caae:	d005      	beq.n	800cabc <__sfputc_r+0x22>
 800cab0:	6813      	ldr	r3, [r2, #0]
 800cab2:	1c58      	adds	r0, r3, #1
 800cab4:	6010      	str	r0, [r2, #0]
 800cab6:	7019      	strb	r1, [r3, #0]
 800cab8:	0008      	movs	r0, r1
 800caba:	bd10      	pop	{r4, pc}
 800cabc:	f000 f930 	bl	800cd20 <__swbuf_r>
 800cac0:	0001      	movs	r1, r0
 800cac2:	e7f9      	b.n	800cab8 <__sfputc_r+0x1e>

0800cac4 <__sfputs_r>:
 800cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac6:	0006      	movs	r6, r0
 800cac8:	000f      	movs	r7, r1
 800caca:	0014      	movs	r4, r2
 800cacc:	18d5      	adds	r5, r2, r3
 800cace:	42ac      	cmp	r4, r5
 800cad0:	d101      	bne.n	800cad6 <__sfputs_r+0x12>
 800cad2:	2000      	movs	r0, #0
 800cad4:	e007      	b.n	800cae6 <__sfputs_r+0x22>
 800cad6:	7821      	ldrb	r1, [r4, #0]
 800cad8:	003a      	movs	r2, r7
 800cada:	0030      	movs	r0, r6
 800cadc:	f7ff ffdd 	bl	800ca9a <__sfputc_r>
 800cae0:	3401      	adds	r4, #1
 800cae2:	1c43      	adds	r3, r0, #1
 800cae4:	d1f3      	bne.n	800cace <__sfputs_r+0xa>
 800cae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cae8 <_vfiprintf_r>:
 800cae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caea:	b0a1      	sub	sp, #132	@ 0x84
 800caec:	000f      	movs	r7, r1
 800caee:	0015      	movs	r5, r2
 800caf0:	001e      	movs	r6, r3
 800caf2:	9003      	str	r0, [sp, #12]
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d004      	beq.n	800cb02 <_vfiprintf_r+0x1a>
 800caf8:	6a03      	ldr	r3, [r0, #32]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <_vfiprintf_r+0x1a>
 800cafe:	f7fc fdf9 	bl	80096f4 <__sinit>
 800cb02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb04:	07db      	lsls	r3, r3, #31
 800cb06:	d405      	bmi.n	800cb14 <_vfiprintf_r+0x2c>
 800cb08:	89bb      	ldrh	r3, [r7, #12]
 800cb0a:	059b      	lsls	r3, r3, #22
 800cb0c:	d402      	bmi.n	800cb14 <_vfiprintf_r+0x2c>
 800cb0e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cb10:	f7fc ff27 	bl	8009962 <__retarget_lock_acquire_recursive>
 800cb14:	89bb      	ldrh	r3, [r7, #12]
 800cb16:	071b      	lsls	r3, r3, #28
 800cb18:	d502      	bpl.n	800cb20 <_vfiprintf_r+0x38>
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d113      	bne.n	800cb48 <_vfiprintf_r+0x60>
 800cb20:	0039      	movs	r1, r7
 800cb22:	9803      	ldr	r0, [sp, #12]
 800cb24:	f000 f93e 	bl	800cda4 <__swsetup_r>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d00d      	beq.n	800cb48 <_vfiprintf_r+0x60>
 800cb2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb2e:	07db      	lsls	r3, r3, #31
 800cb30:	d503      	bpl.n	800cb3a <_vfiprintf_r+0x52>
 800cb32:	2001      	movs	r0, #1
 800cb34:	4240      	negs	r0, r0
 800cb36:	b021      	add	sp, #132	@ 0x84
 800cb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb3a:	89bb      	ldrh	r3, [r7, #12]
 800cb3c:	059b      	lsls	r3, r3, #22
 800cb3e:	d4f8      	bmi.n	800cb32 <_vfiprintf_r+0x4a>
 800cb40:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cb42:	f7fc ff0f 	bl	8009964 <__retarget_lock_release_recursive>
 800cb46:	e7f4      	b.n	800cb32 <_vfiprintf_r+0x4a>
 800cb48:	2300      	movs	r3, #0
 800cb4a:	ac08      	add	r4, sp, #32
 800cb4c:	6163      	str	r3, [r4, #20]
 800cb4e:	3320      	adds	r3, #32
 800cb50:	7663      	strb	r3, [r4, #25]
 800cb52:	3310      	adds	r3, #16
 800cb54:	76a3      	strb	r3, [r4, #26]
 800cb56:	9607      	str	r6, [sp, #28]
 800cb58:	002e      	movs	r6, r5
 800cb5a:	7833      	ldrb	r3, [r6, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <_vfiprintf_r+0x7c>
 800cb60:	2b25      	cmp	r3, #37	@ 0x25
 800cb62:	d148      	bne.n	800cbf6 <_vfiprintf_r+0x10e>
 800cb64:	1b73      	subs	r3, r6, r5
 800cb66:	9305      	str	r3, [sp, #20]
 800cb68:	42ae      	cmp	r6, r5
 800cb6a:	d00b      	beq.n	800cb84 <_vfiprintf_r+0x9c>
 800cb6c:	002a      	movs	r2, r5
 800cb6e:	0039      	movs	r1, r7
 800cb70:	9803      	ldr	r0, [sp, #12]
 800cb72:	f7ff ffa7 	bl	800cac4 <__sfputs_r>
 800cb76:	3001      	adds	r0, #1
 800cb78:	d100      	bne.n	800cb7c <_vfiprintf_r+0x94>
 800cb7a:	e0ae      	b.n	800ccda <_vfiprintf_r+0x1f2>
 800cb7c:	6963      	ldr	r3, [r4, #20]
 800cb7e:	9a05      	ldr	r2, [sp, #20]
 800cb80:	189b      	adds	r3, r3, r2
 800cb82:	6163      	str	r3, [r4, #20]
 800cb84:	7833      	ldrb	r3, [r6, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d100      	bne.n	800cb8c <_vfiprintf_r+0xa4>
 800cb8a:	e0a6      	b.n	800ccda <_vfiprintf_r+0x1f2>
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	2300      	movs	r3, #0
 800cb90:	4252      	negs	r2, r2
 800cb92:	6062      	str	r2, [r4, #4]
 800cb94:	a904      	add	r1, sp, #16
 800cb96:	3254      	adds	r2, #84	@ 0x54
 800cb98:	1852      	adds	r2, r2, r1
 800cb9a:	1c75      	adds	r5, r6, #1
 800cb9c:	6023      	str	r3, [r4, #0]
 800cb9e:	60e3      	str	r3, [r4, #12]
 800cba0:	60a3      	str	r3, [r4, #8]
 800cba2:	7013      	strb	r3, [r2, #0]
 800cba4:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cba6:	4b59      	ldr	r3, [pc, #356]	@ (800cd0c <_vfiprintf_r+0x224>)
 800cba8:	2205      	movs	r2, #5
 800cbaa:	0018      	movs	r0, r3
 800cbac:	7829      	ldrb	r1, [r5, #0]
 800cbae:	9305      	str	r3, [sp, #20]
 800cbb0:	f7fc fed9 	bl	8009966 <memchr>
 800cbb4:	1c6e      	adds	r6, r5, #1
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d11f      	bne.n	800cbfa <_vfiprintf_r+0x112>
 800cbba:	6822      	ldr	r2, [r4, #0]
 800cbbc:	06d3      	lsls	r3, r2, #27
 800cbbe:	d504      	bpl.n	800cbca <_vfiprintf_r+0xe2>
 800cbc0:	2353      	movs	r3, #83	@ 0x53
 800cbc2:	a904      	add	r1, sp, #16
 800cbc4:	185b      	adds	r3, r3, r1
 800cbc6:	2120      	movs	r1, #32
 800cbc8:	7019      	strb	r1, [r3, #0]
 800cbca:	0713      	lsls	r3, r2, #28
 800cbcc:	d504      	bpl.n	800cbd8 <_vfiprintf_r+0xf0>
 800cbce:	2353      	movs	r3, #83	@ 0x53
 800cbd0:	a904      	add	r1, sp, #16
 800cbd2:	185b      	adds	r3, r3, r1
 800cbd4:	212b      	movs	r1, #43	@ 0x2b
 800cbd6:	7019      	strb	r1, [r3, #0]
 800cbd8:	782b      	ldrb	r3, [r5, #0]
 800cbda:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbdc:	d016      	beq.n	800cc0c <_vfiprintf_r+0x124>
 800cbde:	002e      	movs	r6, r5
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	200a      	movs	r0, #10
 800cbe4:	68e3      	ldr	r3, [r4, #12]
 800cbe6:	7832      	ldrb	r2, [r6, #0]
 800cbe8:	1c75      	adds	r5, r6, #1
 800cbea:	3a30      	subs	r2, #48	@ 0x30
 800cbec:	2a09      	cmp	r2, #9
 800cbee:	d950      	bls.n	800cc92 <_vfiprintf_r+0x1aa>
 800cbf0:	2900      	cmp	r1, #0
 800cbf2:	d111      	bne.n	800cc18 <_vfiprintf_r+0x130>
 800cbf4:	e017      	b.n	800cc26 <_vfiprintf_r+0x13e>
 800cbf6:	3601      	adds	r6, #1
 800cbf8:	e7af      	b.n	800cb5a <_vfiprintf_r+0x72>
 800cbfa:	9b05      	ldr	r3, [sp, #20]
 800cbfc:	6822      	ldr	r2, [r4, #0]
 800cbfe:	1ac0      	subs	r0, r0, r3
 800cc00:	2301      	movs	r3, #1
 800cc02:	4083      	lsls	r3, r0
 800cc04:	4313      	orrs	r3, r2
 800cc06:	0035      	movs	r5, r6
 800cc08:	6023      	str	r3, [r4, #0]
 800cc0a:	e7cc      	b.n	800cba6 <_vfiprintf_r+0xbe>
 800cc0c:	9b07      	ldr	r3, [sp, #28]
 800cc0e:	1d19      	adds	r1, r3, #4
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	9107      	str	r1, [sp, #28]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	db01      	blt.n	800cc1c <_vfiprintf_r+0x134>
 800cc18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc1a:	e004      	b.n	800cc26 <_vfiprintf_r+0x13e>
 800cc1c:	425b      	negs	r3, r3
 800cc1e:	60e3      	str	r3, [r4, #12]
 800cc20:	2302      	movs	r3, #2
 800cc22:	4313      	orrs	r3, r2
 800cc24:	6023      	str	r3, [r4, #0]
 800cc26:	7833      	ldrb	r3, [r6, #0]
 800cc28:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc2a:	d10c      	bne.n	800cc46 <_vfiprintf_r+0x15e>
 800cc2c:	7873      	ldrb	r3, [r6, #1]
 800cc2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc30:	d134      	bne.n	800cc9c <_vfiprintf_r+0x1b4>
 800cc32:	9b07      	ldr	r3, [sp, #28]
 800cc34:	3602      	adds	r6, #2
 800cc36:	1d1a      	adds	r2, r3, #4
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	9207      	str	r2, [sp, #28]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	da01      	bge.n	800cc44 <_vfiprintf_r+0x15c>
 800cc40:	2301      	movs	r3, #1
 800cc42:	425b      	negs	r3, r3
 800cc44:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc46:	4d32      	ldr	r5, [pc, #200]	@ (800cd10 <_vfiprintf_r+0x228>)
 800cc48:	2203      	movs	r2, #3
 800cc4a:	0028      	movs	r0, r5
 800cc4c:	7831      	ldrb	r1, [r6, #0]
 800cc4e:	f7fc fe8a 	bl	8009966 <memchr>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	d006      	beq.n	800cc64 <_vfiprintf_r+0x17c>
 800cc56:	2340      	movs	r3, #64	@ 0x40
 800cc58:	1b40      	subs	r0, r0, r5
 800cc5a:	4083      	lsls	r3, r0
 800cc5c:	6822      	ldr	r2, [r4, #0]
 800cc5e:	3601      	adds	r6, #1
 800cc60:	4313      	orrs	r3, r2
 800cc62:	6023      	str	r3, [r4, #0]
 800cc64:	7831      	ldrb	r1, [r6, #0]
 800cc66:	2206      	movs	r2, #6
 800cc68:	482a      	ldr	r0, [pc, #168]	@ (800cd14 <_vfiprintf_r+0x22c>)
 800cc6a:	1c75      	adds	r5, r6, #1
 800cc6c:	7621      	strb	r1, [r4, #24]
 800cc6e:	f7fc fe7a 	bl	8009966 <memchr>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d040      	beq.n	800ccf8 <_vfiprintf_r+0x210>
 800cc76:	4b28      	ldr	r3, [pc, #160]	@ (800cd18 <_vfiprintf_r+0x230>)
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d122      	bne.n	800ccc2 <_vfiprintf_r+0x1da>
 800cc7c:	2207      	movs	r2, #7
 800cc7e:	9b07      	ldr	r3, [sp, #28]
 800cc80:	3307      	adds	r3, #7
 800cc82:	4393      	bics	r3, r2
 800cc84:	3308      	adds	r3, #8
 800cc86:	9307      	str	r3, [sp, #28]
 800cc88:	6963      	ldr	r3, [r4, #20]
 800cc8a:	9a04      	ldr	r2, [sp, #16]
 800cc8c:	189b      	adds	r3, r3, r2
 800cc8e:	6163      	str	r3, [r4, #20]
 800cc90:	e762      	b.n	800cb58 <_vfiprintf_r+0x70>
 800cc92:	4343      	muls	r3, r0
 800cc94:	002e      	movs	r6, r5
 800cc96:	2101      	movs	r1, #1
 800cc98:	189b      	adds	r3, r3, r2
 800cc9a:	e7a4      	b.n	800cbe6 <_vfiprintf_r+0xfe>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	200a      	movs	r0, #10
 800cca0:	0019      	movs	r1, r3
 800cca2:	3601      	adds	r6, #1
 800cca4:	6063      	str	r3, [r4, #4]
 800cca6:	7832      	ldrb	r2, [r6, #0]
 800cca8:	1c75      	adds	r5, r6, #1
 800ccaa:	3a30      	subs	r2, #48	@ 0x30
 800ccac:	2a09      	cmp	r2, #9
 800ccae:	d903      	bls.n	800ccb8 <_vfiprintf_r+0x1d0>
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d0c8      	beq.n	800cc46 <_vfiprintf_r+0x15e>
 800ccb4:	9109      	str	r1, [sp, #36]	@ 0x24
 800ccb6:	e7c6      	b.n	800cc46 <_vfiprintf_r+0x15e>
 800ccb8:	4341      	muls	r1, r0
 800ccba:	002e      	movs	r6, r5
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	1889      	adds	r1, r1, r2
 800ccc0:	e7f1      	b.n	800cca6 <_vfiprintf_r+0x1be>
 800ccc2:	aa07      	add	r2, sp, #28
 800ccc4:	9200      	str	r2, [sp, #0]
 800ccc6:	0021      	movs	r1, r4
 800ccc8:	003a      	movs	r2, r7
 800ccca:	4b14      	ldr	r3, [pc, #80]	@ (800cd1c <_vfiprintf_r+0x234>)
 800cccc:	9803      	ldr	r0, [sp, #12]
 800ccce:	f7fb feb7 	bl	8008a40 <_printf_float>
 800ccd2:	9004      	str	r0, [sp, #16]
 800ccd4:	9b04      	ldr	r3, [sp, #16]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	d1d6      	bne.n	800cc88 <_vfiprintf_r+0x1a0>
 800ccda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccdc:	07db      	lsls	r3, r3, #31
 800ccde:	d405      	bmi.n	800ccec <_vfiprintf_r+0x204>
 800cce0:	89bb      	ldrh	r3, [r7, #12]
 800cce2:	059b      	lsls	r3, r3, #22
 800cce4:	d402      	bmi.n	800ccec <_vfiprintf_r+0x204>
 800cce6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cce8:	f7fc fe3c 	bl	8009964 <__retarget_lock_release_recursive>
 800ccec:	89bb      	ldrh	r3, [r7, #12]
 800ccee:	065b      	lsls	r3, r3, #25
 800ccf0:	d500      	bpl.n	800ccf4 <_vfiprintf_r+0x20c>
 800ccf2:	e71e      	b.n	800cb32 <_vfiprintf_r+0x4a>
 800ccf4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ccf6:	e71e      	b.n	800cb36 <_vfiprintf_r+0x4e>
 800ccf8:	aa07      	add	r2, sp, #28
 800ccfa:	9200      	str	r2, [sp, #0]
 800ccfc:	0021      	movs	r1, r4
 800ccfe:	003a      	movs	r2, r7
 800cd00:	4b06      	ldr	r3, [pc, #24]	@ (800cd1c <_vfiprintf_r+0x234>)
 800cd02:	9803      	ldr	r0, [sp, #12]
 800cd04:	f7fc f94a 	bl	8008f9c <_printf_i>
 800cd08:	e7e3      	b.n	800ccd2 <_vfiprintf_r+0x1ea>
 800cd0a:	46c0      	nop			@ (mov r8, r8)
 800cd0c:	0800efe9 	.word	0x0800efe9
 800cd10:	0800efef 	.word	0x0800efef
 800cd14:	0800eff3 	.word	0x0800eff3
 800cd18:	08008a41 	.word	0x08008a41
 800cd1c:	0800cac5 	.word	0x0800cac5

0800cd20 <__swbuf_r>:
 800cd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd22:	0006      	movs	r6, r0
 800cd24:	000d      	movs	r5, r1
 800cd26:	0014      	movs	r4, r2
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d004      	beq.n	800cd36 <__swbuf_r+0x16>
 800cd2c:	6a03      	ldr	r3, [r0, #32]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <__swbuf_r+0x16>
 800cd32:	f7fc fcdf 	bl	80096f4 <__sinit>
 800cd36:	69a3      	ldr	r3, [r4, #24]
 800cd38:	60a3      	str	r3, [r4, #8]
 800cd3a:	89a3      	ldrh	r3, [r4, #12]
 800cd3c:	071b      	lsls	r3, r3, #28
 800cd3e:	d502      	bpl.n	800cd46 <__swbuf_r+0x26>
 800cd40:	6923      	ldr	r3, [r4, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d109      	bne.n	800cd5a <__swbuf_r+0x3a>
 800cd46:	0021      	movs	r1, r4
 800cd48:	0030      	movs	r0, r6
 800cd4a:	f000 f82b 	bl	800cda4 <__swsetup_r>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d003      	beq.n	800cd5a <__swbuf_r+0x3a>
 800cd52:	2501      	movs	r5, #1
 800cd54:	426d      	negs	r5, r5
 800cd56:	0028      	movs	r0, r5
 800cd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd5a:	6923      	ldr	r3, [r4, #16]
 800cd5c:	6820      	ldr	r0, [r4, #0]
 800cd5e:	b2ef      	uxtb	r7, r5
 800cd60:	1ac0      	subs	r0, r0, r3
 800cd62:	6963      	ldr	r3, [r4, #20]
 800cd64:	b2ed      	uxtb	r5, r5
 800cd66:	4283      	cmp	r3, r0
 800cd68:	dc05      	bgt.n	800cd76 <__swbuf_r+0x56>
 800cd6a:	0021      	movs	r1, r4
 800cd6c:	0030      	movs	r0, r6
 800cd6e:	f7ff fa23 	bl	800c1b8 <_fflush_r>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d1ed      	bne.n	800cd52 <__swbuf_r+0x32>
 800cd76:	68a3      	ldr	r3, [r4, #8]
 800cd78:	3001      	adds	r0, #1
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	60a3      	str	r3, [r4, #8]
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	1c5a      	adds	r2, r3, #1
 800cd82:	6022      	str	r2, [r4, #0]
 800cd84:	701f      	strb	r7, [r3, #0]
 800cd86:	6963      	ldr	r3, [r4, #20]
 800cd88:	4283      	cmp	r3, r0
 800cd8a:	d004      	beq.n	800cd96 <__swbuf_r+0x76>
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	07db      	lsls	r3, r3, #31
 800cd90:	d5e1      	bpl.n	800cd56 <__swbuf_r+0x36>
 800cd92:	2d0a      	cmp	r5, #10
 800cd94:	d1df      	bne.n	800cd56 <__swbuf_r+0x36>
 800cd96:	0021      	movs	r1, r4
 800cd98:	0030      	movs	r0, r6
 800cd9a:	f7ff fa0d 	bl	800c1b8 <_fflush_r>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d0d9      	beq.n	800cd56 <__swbuf_r+0x36>
 800cda2:	e7d6      	b.n	800cd52 <__swbuf_r+0x32>

0800cda4 <__swsetup_r>:
 800cda4:	4b2d      	ldr	r3, [pc, #180]	@ (800ce5c <__swsetup_r+0xb8>)
 800cda6:	b570      	push	{r4, r5, r6, lr}
 800cda8:	0005      	movs	r5, r0
 800cdaa:	6818      	ldr	r0, [r3, #0]
 800cdac:	000c      	movs	r4, r1
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d004      	beq.n	800cdbc <__swsetup_r+0x18>
 800cdb2:	6a03      	ldr	r3, [r0, #32]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d101      	bne.n	800cdbc <__swsetup_r+0x18>
 800cdb8:	f7fc fc9c 	bl	80096f4 <__sinit>
 800cdbc:	230c      	movs	r3, #12
 800cdbe:	5ee2      	ldrsh	r2, [r4, r3]
 800cdc0:	0713      	lsls	r3, r2, #28
 800cdc2:	d423      	bmi.n	800ce0c <__swsetup_r+0x68>
 800cdc4:	06d3      	lsls	r3, r2, #27
 800cdc6:	d407      	bmi.n	800cdd8 <__swsetup_r+0x34>
 800cdc8:	2309      	movs	r3, #9
 800cdca:	602b      	str	r3, [r5, #0]
 800cdcc:	2340      	movs	r3, #64	@ 0x40
 800cdce:	2001      	movs	r0, #1
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	81a3      	strh	r3, [r4, #12]
 800cdd4:	4240      	negs	r0, r0
 800cdd6:	e03a      	b.n	800ce4e <__swsetup_r+0xaa>
 800cdd8:	0752      	lsls	r2, r2, #29
 800cdda:	d513      	bpl.n	800ce04 <__swsetup_r+0x60>
 800cddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdde:	2900      	cmp	r1, #0
 800cde0:	d008      	beq.n	800cdf4 <__swsetup_r+0x50>
 800cde2:	0023      	movs	r3, r4
 800cde4:	3344      	adds	r3, #68	@ 0x44
 800cde6:	4299      	cmp	r1, r3
 800cde8:	d002      	beq.n	800cdf0 <__swsetup_r+0x4c>
 800cdea:	0028      	movs	r0, r5
 800cdec:	f7fd fc4c 	bl	800a688 <_free_r>
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdf4:	2224      	movs	r2, #36	@ 0x24
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	4393      	bics	r3, r2
 800cdfa:	81a3      	strh	r3, [r4, #12]
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	6063      	str	r3, [r4, #4]
 800ce00:	6923      	ldr	r3, [r4, #16]
 800ce02:	6023      	str	r3, [r4, #0]
 800ce04:	2308      	movs	r3, #8
 800ce06:	89a2      	ldrh	r2, [r4, #12]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	81a3      	strh	r3, [r4, #12]
 800ce0c:	6923      	ldr	r3, [r4, #16]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d10b      	bne.n	800ce2a <__swsetup_r+0x86>
 800ce12:	21a0      	movs	r1, #160	@ 0xa0
 800ce14:	2280      	movs	r2, #128	@ 0x80
 800ce16:	89a3      	ldrh	r3, [r4, #12]
 800ce18:	0089      	lsls	r1, r1, #2
 800ce1a:	0092      	lsls	r2, r2, #2
 800ce1c:	400b      	ands	r3, r1
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d003      	beq.n	800ce2a <__swsetup_r+0x86>
 800ce22:	0021      	movs	r1, r4
 800ce24:	0028      	movs	r0, r5
 800ce26:	f000 f88f 	bl	800cf48 <__smakebuf_r>
 800ce2a:	230c      	movs	r3, #12
 800ce2c:	5ee2      	ldrsh	r2, [r4, r3]
 800ce2e:	2101      	movs	r1, #1
 800ce30:	0013      	movs	r3, r2
 800ce32:	400b      	ands	r3, r1
 800ce34:	420a      	tst	r2, r1
 800ce36:	d00b      	beq.n	800ce50 <__swsetup_r+0xac>
 800ce38:	2300      	movs	r3, #0
 800ce3a:	60a3      	str	r3, [r4, #8]
 800ce3c:	6963      	ldr	r3, [r4, #20]
 800ce3e:	425b      	negs	r3, r3
 800ce40:	61a3      	str	r3, [r4, #24]
 800ce42:	2000      	movs	r0, #0
 800ce44:	6923      	ldr	r3, [r4, #16]
 800ce46:	4283      	cmp	r3, r0
 800ce48:	d101      	bne.n	800ce4e <__swsetup_r+0xaa>
 800ce4a:	0613      	lsls	r3, r2, #24
 800ce4c:	d4be      	bmi.n	800cdcc <__swsetup_r+0x28>
 800ce4e:	bd70      	pop	{r4, r5, r6, pc}
 800ce50:	0791      	lsls	r1, r2, #30
 800ce52:	d400      	bmi.n	800ce56 <__swsetup_r+0xb2>
 800ce54:	6963      	ldr	r3, [r4, #20]
 800ce56:	60a3      	str	r3, [r4, #8]
 800ce58:	e7f3      	b.n	800ce42 <__swsetup_r+0x9e>
 800ce5a:	46c0      	nop			@ (mov r8, r8)
 800ce5c:	20000030 	.word	0x20000030

0800ce60 <_raise_r>:
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	0004      	movs	r4, r0
 800ce64:	000d      	movs	r5, r1
 800ce66:	291f      	cmp	r1, #31
 800ce68:	d904      	bls.n	800ce74 <_raise_r+0x14>
 800ce6a:	2316      	movs	r3, #22
 800ce6c:	6003      	str	r3, [r0, #0]
 800ce6e:	2001      	movs	r0, #1
 800ce70:	4240      	negs	r0, r0
 800ce72:	bd70      	pop	{r4, r5, r6, pc}
 800ce74:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d004      	beq.n	800ce84 <_raise_r+0x24>
 800ce7a:	008a      	lsls	r2, r1, #2
 800ce7c:	189b      	adds	r3, r3, r2
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	2a00      	cmp	r2, #0
 800ce82:	d108      	bne.n	800ce96 <_raise_r+0x36>
 800ce84:	0020      	movs	r0, r4
 800ce86:	f000 f831 	bl	800ceec <_getpid_r>
 800ce8a:	002a      	movs	r2, r5
 800ce8c:	0001      	movs	r1, r0
 800ce8e:	0020      	movs	r0, r4
 800ce90:	f000 f81a 	bl	800cec8 <_kill_r>
 800ce94:	e7ed      	b.n	800ce72 <_raise_r+0x12>
 800ce96:	2a01      	cmp	r2, #1
 800ce98:	d009      	beq.n	800ceae <_raise_r+0x4e>
 800ce9a:	1c51      	adds	r1, r2, #1
 800ce9c:	d103      	bne.n	800cea6 <_raise_r+0x46>
 800ce9e:	2316      	movs	r3, #22
 800cea0:	6003      	str	r3, [r0, #0]
 800cea2:	2001      	movs	r0, #1
 800cea4:	e7e5      	b.n	800ce72 <_raise_r+0x12>
 800cea6:	2100      	movs	r1, #0
 800cea8:	0028      	movs	r0, r5
 800ceaa:	6019      	str	r1, [r3, #0]
 800ceac:	4790      	blx	r2
 800ceae:	2000      	movs	r0, #0
 800ceb0:	e7df      	b.n	800ce72 <_raise_r+0x12>
	...

0800ceb4 <raise>:
 800ceb4:	b510      	push	{r4, lr}
 800ceb6:	4b03      	ldr	r3, [pc, #12]	@ (800cec4 <raise+0x10>)
 800ceb8:	0001      	movs	r1, r0
 800ceba:	6818      	ldr	r0, [r3, #0]
 800cebc:	f7ff ffd0 	bl	800ce60 <_raise_r>
 800cec0:	bd10      	pop	{r4, pc}
 800cec2:	46c0      	nop			@ (mov r8, r8)
 800cec4:	20000030 	.word	0x20000030

0800cec8 <_kill_r>:
 800cec8:	2300      	movs	r3, #0
 800ceca:	b570      	push	{r4, r5, r6, lr}
 800cecc:	4d06      	ldr	r5, [pc, #24]	@ (800cee8 <_kill_r+0x20>)
 800cece:	0004      	movs	r4, r0
 800ced0:	0008      	movs	r0, r1
 800ced2:	0011      	movs	r1, r2
 800ced4:	602b      	str	r3, [r5, #0]
 800ced6:	f7f7 fe55 	bl	8004b84 <_kill>
 800ceda:	1c43      	adds	r3, r0, #1
 800cedc:	d103      	bne.n	800cee6 <_kill_r+0x1e>
 800cede:	682b      	ldr	r3, [r5, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d000      	beq.n	800cee6 <_kill_r+0x1e>
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	bd70      	pop	{r4, r5, r6, pc}
 800cee8:	200008b4 	.word	0x200008b4

0800ceec <_getpid_r>:
 800ceec:	b510      	push	{r4, lr}
 800ceee:	f7f7 fe43 	bl	8004b78 <_getpid>
 800cef2:	bd10      	pop	{r4, pc}

0800cef4 <__swhatbuf_r>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	000e      	movs	r6, r1
 800cef8:	001d      	movs	r5, r3
 800cefa:	230e      	movs	r3, #14
 800cefc:	5ec9      	ldrsh	r1, [r1, r3]
 800cefe:	0014      	movs	r4, r2
 800cf00:	b096      	sub	sp, #88	@ 0x58
 800cf02:	2900      	cmp	r1, #0
 800cf04:	da0c      	bge.n	800cf20 <__swhatbuf_r+0x2c>
 800cf06:	89b2      	ldrh	r2, [r6, #12]
 800cf08:	2380      	movs	r3, #128	@ 0x80
 800cf0a:	0011      	movs	r1, r2
 800cf0c:	4019      	ands	r1, r3
 800cf0e:	421a      	tst	r2, r3
 800cf10:	d114      	bne.n	800cf3c <__swhatbuf_r+0x48>
 800cf12:	2380      	movs	r3, #128	@ 0x80
 800cf14:	00db      	lsls	r3, r3, #3
 800cf16:	2000      	movs	r0, #0
 800cf18:	6029      	str	r1, [r5, #0]
 800cf1a:	6023      	str	r3, [r4, #0]
 800cf1c:	b016      	add	sp, #88	@ 0x58
 800cf1e:	bd70      	pop	{r4, r5, r6, pc}
 800cf20:	466a      	mov	r2, sp
 800cf22:	f000 f853 	bl	800cfcc <_fstat_r>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	dbed      	blt.n	800cf06 <__swhatbuf_r+0x12>
 800cf2a:	23f0      	movs	r3, #240	@ 0xf0
 800cf2c:	9901      	ldr	r1, [sp, #4]
 800cf2e:	021b      	lsls	r3, r3, #8
 800cf30:	4019      	ands	r1, r3
 800cf32:	4b04      	ldr	r3, [pc, #16]	@ (800cf44 <__swhatbuf_r+0x50>)
 800cf34:	18c9      	adds	r1, r1, r3
 800cf36:	424b      	negs	r3, r1
 800cf38:	4159      	adcs	r1, r3
 800cf3a:	e7ea      	b.n	800cf12 <__swhatbuf_r+0x1e>
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	2340      	movs	r3, #64	@ 0x40
 800cf40:	e7e9      	b.n	800cf16 <__swhatbuf_r+0x22>
 800cf42:	46c0      	nop			@ (mov r8, r8)
 800cf44:	ffffe000 	.word	0xffffe000

0800cf48 <__smakebuf_r>:
 800cf48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf4a:	2602      	movs	r6, #2
 800cf4c:	898b      	ldrh	r3, [r1, #12]
 800cf4e:	0005      	movs	r5, r0
 800cf50:	000c      	movs	r4, r1
 800cf52:	b085      	sub	sp, #20
 800cf54:	4233      	tst	r3, r6
 800cf56:	d007      	beq.n	800cf68 <__smakebuf_r+0x20>
 800cf58:	0023      	movs	r3, r4
 800cf5a:	3347      	adds	r3, #71	@ 0x47
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	6123      	str	r3, [r4, #16]
 800cf60:	2301      	movs	r3, #1
 800cf62:	6163      	str	r3, [r4, #20]
 800cf64:	b005      	add	sp, #20
 800cf66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf68:	ab03      	add	r3, sp, #12
 800cf6a:	aa02      	add	r2, sp, #8
 800cf6c:	f7ff ffc2 	bl	800cef4 <__swhatbuf_r>
 800cf70:	9f02      	ldr	r7, [sp, #8]
 800cf72:	9001      	str	r0, [sp, #4]
 800cf74:	0039      	movs	r1, r7
 800cf76:	0028      	movs	r0, r5
 800cf78:	f7fb fc2c 	bl	80087d4 <_malloc_r>
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d108      	bne.n	800cf92 <__smakebuf_r+0x4a>
 800cf80:	220c      	movs	r2, #12
 800cf82:	5ea3      	ldrsh	r3, [r4, r2]
 800cf84:	059a      	lsls	r2, r3, #22
 800cf86:	d4ed      	bmi.n	800cf64 <__smakebuf_r+0x1c>
 800cf88:	2203      	movs	r2, #3
 800cf8a:	4393      	bics	r3, r2
 800cf8c:	431e      	orrs	r6, r3
 800cf8e:	81a6      	strh	r6, [r4, #12]
 800cf90:	e7e2      	b.n	800cf58 <__smakebuf_r+0x10>
 800cf92:	2380      	movs	r3, #128	@ 0x80
 800cf94:	89a2      	ldrh	r2, [r4, #12]
 800cf96:	6020      	str	r0, [r4, #0]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	81a3      	strh	r3, [r4, #12]
 800cf9c:	9b03      	ldr	r3, [sp, #12]
 800cf9e:	6120      	str	r0, [r4, #16]
 800cfa0:	6167      	str	r7, [r4, #20]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00c      	beq.n	800cfc0 <__smakebuf_r+0x78>
 800cfa6:	0028      	movs	r0, r5
 800cfa8:	230e      	movs	r3, #14
 800cfaa:	5ee1      	ldrsh	r1, [r4, r3]
 800cfac:	f000 f820 	bl	800cff0 <_isatty_r>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d005      	beq.n	800cfc0 <__smakebuf_r+0x78>
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	89a2      	ldrh	r2, [r4, #12]
 800cfb8:	439a      	bics	r2, r3
 800cfba:	3b02      	subs	r3, #2
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	81a3      	strh	r3, [r4, #12]
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	9a01      	ldr	r2, [sp, #4]
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	81a3      	strh	r3, [r4, #12]
 800cfc8:	e7cc      	b.n	800cf64 <__smakebuf_r+0x1c>
	...

0800cfcc <_fstat_r>:
 800cfcc:	2300      	movs	r3, #0
 800cfce:	b570      	push	{r4, r5, r6, lr}
 800cfd0:	4d06      	ldr	r5, [pc, #24]	@ (800cfec <_fstat_r+0x20>)
 800cfd2:	0004      	movs	r4, r0
 800cfd4:	0008      	movs	r0, r1
 800cfd6:	0011      	movs	r1, r2
 800cfd8:	602b      	str	r3, [r5, #0]
 800cfda:	f7f7 fe33 	bl	8004c44 <_fstat>
 800cfde:	1c43      	adds	r3, r0, #1
 800cfe0:	d103      	bne.n	800cfea <_fstat_r+0x1e>
 800cfe2:	682b      	ldr	r3, [r5, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d000      	beq.n	800cfea <_fstat_r+0x1e>
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	bd70      	pop	{r4, r5, r6, pc}
 800cfec:	200008b4 	.word	0x200008b4

0800cff0 <_isatty_r>:
 800cff0:	2300      	movs	r3, #0
 800cff2:	b570      	push	{r4, r5, r6, lr}
 800cff4:	4d06      	ldr	r5, [pc, #24]	@ (800d010 <_isatty_r+0x20>)
 800cff6:	0004      	movs	r4, r0
 800cff8:	0008      	movs	r0, r1
 800cffa:	602b      	str	r3, [r5, #0]
 800cffc:	f7f7 fe30 	bl	8004c60 <_isatty>
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	d103      	bne.n	800d00c <_isatty_r+0x1c>
 800d004:	682b      	ldr	r3, [r5, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d000      	beq.n	800d00c <_isatty_r+0x1c>
 800d00a:	6023      	str	r3, [r4, #0]
 800d00c:	bd70      	pop	{r4, r5, r6, pc}
 800d00e:	46c0      	nop			@ (mov r8, r8)
 800d010:	200008b4 	.word	0x200008b4

0800d014 <_init>:
 800d014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d016:	46c0      	nop			@ (mov r8, r8)
 800d018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d01a:	bc08      	pop	{r3}
 800d01c:	469e      	mov	lr, r3
 800d01e:	4770      	bx	lr

0800d020 <_fini>:
 800d020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d022:	46c0      	nop			@ (mov r8, r8)
 800d024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d026:	bc08      	pop	{r3}
 800d028:	469e      	mov	lr, r3
 800d02a:	4770      	bx	lr
